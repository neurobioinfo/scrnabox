{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"scrnabox: A pipeline for scRNA analysis under HPC This repository includes a tutorial for the scRNA-seq data analysis using scrnabox pipeline under an HPC environment ( slurm work load manager system ). Contents Workflow analysis Standard scRNA-seq Cell hashtags scrnabox.slurm Installing Processed Data Tutorial References Workflow analysis The following figures illustrate the steps involved in analyzing scRNA-seq data using the Standard and Cell Hashtags with the scrnabox pipeline This pipeline currently includes implementation of the standard and cell hashtags scRNA. Standard scRNA-seq The following steps describe how to analyze scRNA-seq data using the pipeline: - Step 1: cellranger - This step runs Cellranger on the scRNA-seq data to generate the feature-barcode matrices for each sample. - Step 2: Seurat object - This step runs Seurat on the feature-barcode matrices obtained from step 1 to generate a Seurat object for each sample. The Seurat object contains a lot of information, and accessing SeuratObject@meta.data will provide a data frame with relevant information on each cell. - Step 3: QC and filter - The Seurat object includes quality metrics that can be used to filter cells and genes against possible doublets. Metrics such as total UMI counts per cell (nCount_RNA), total number of detected features per cell (nFeature_RNA), and mitochondrial count (percent.mito) are often used. - Step 4: Doublet removal - This step can be used to remove doublets from the data. By default, the pipeline removes doublets, but you can choose to keep them by changing the parameter from 'yes' to 'no'. - Step 5: Integration - This step integrates multiple scRNA-seq datasets using the Comprehensive Integration of Single Cell Data (CCA) method in Seurat, Tim, et al. (2019). The pipeline identifies anchors using the FindIntegrationAnchors function and passes them to the IntegrateData function to get a single Seurat object representing all the datasets. - Step 6: Clustering- It involves clustering the data using a k-nearest neighbor graph based on the integrated PCA. This step produces UMAP and heatmaps of unlabelled clusters. However, it is up to the user to decide on the best cluster resolution outside the pipeline by examining the output and selecting the most appropriate annotation for the clusters. - step 7: Cluster annotate - In this step, you can annotate the clusters with known cell types or use marker genes to predict the cell type of each cluster. - step 8: Differential gene expression (DEG)- There are multiple ways to perform differential gene expression analysis, but in this pipeline, we use the FindAllMarkers function to rank the highly differentially expressed genes in each cluster, which allows us to identify genes that are significantly differentially expressed between each cluster and the rest of the cells. From there, we can define contrasts to run statistical tests and investigate the phenotype and genotypes of each cluster. The Step 1 - Step 8 can be done using scrnabox.slurm in the HPC system ( slurm work load manager system ). - step 9, Enrichment analysis: in this step, we obtain a list of significant genes using enrichment methods. The step 9 can be done using scrnaboxR, see Practice . Cell Hashtags The following steps explain how to analyze the Hashtag oligonucleotide (henceforth referred to as HTO) - Step 1: cellranger - This step runs Cellranger on the scRNA-seq data to generate the feature-barcode matrices for each sample. - Step 2: Seurat object - This step runs Seurat on the feature-barcode matrices obtained from step 1 to generate a Seurat object for each sample. The Seurat object contains a lot of information, and accessing SeuratObject@meta.data will provide a data frame with relevant information on each cell. - Step 3: QC and filter - The Seurat object includes quality metrics that can be used to filter cells and genes against possible doublets. Metrics such as total UMI counts per cell (nCount_RNA), total number of detected features per cell (nFeature_RNA), and mitochondrial count (percent.mito) are often used. - Step 4: Demuplixing- In this step, demultiplexing is performed to separate the reads in the sequencing run according to their sample of origin, based on their barcode information. The pipeline includes an option to remove doublets and negative cells during a later step after quality control and filtering. - Step 5: Integration - This step integrates multiple scRNA-seq datasets using the Comprehensive Integration of Single Cell Data (CCA) method in Seurat, Tim, et al. (2019). The pipeline identifies anchors using the FindIntegrationAnchors function and passes them to the IntegrateData function to get a single Seurat object representing all the datasets. - Step 6: Clustering- It involves clustering the data using a k-nearest neighbor graph based on the integrated PCA. This step produces UMAP and heatmaps of unlabelled clusters. However, it is up to the user to decide on the best cluster resolution outside the pipeline by examining the output and selecting the most appropriate annotation for the clusters. - step 7: Cluster annotate - In this step, you can annotate the clusters with known cell types or use marker genes to predict the cell type of each cluster. - step 8: Differential gene expression (DEG)- There are multiple ways to perform differential gene expression analysis, but in this pipeline, we use the FindAllMarkers function to rank the highly differentially expressed genes in each cluster, which allows us to identify genes that are significantly differentially expressed between each cluster and the rest of the cells. From there, we can define contrasts to run statistical tests and investigate the phenotype and genotypes of each cluster. The Step 1 - Step 8 can be done using scrnabox.slurm in the HPC system ( slurm work load manager system ). - step 9, Enrichment analysis: in this step, we obtain a list of significant genes using enrichment methods. The step 9 can be done using scrnaboxR, see Practice . scrnabox.slurm The scrnabox.slurm is a pipeline specifically designed for analyzing data under a High-Performance Computing (HPC) system using the Slurm Workload Manager ( slurm work load manager system ). It has been extensively utilized on the Beluga , you can find comprehensive instructions on how to utilize the pipeline for Cell Hashtags and Standard scRNA-seq , the pipeline provides detailed guidance on processing and analyzing these specific types of single-cell RNA sequencing (scRNA-seq) data. Installing The package is written in the bash, so it can be used with any slurm system. To download scrnabox.slurm run the below comments wget https://github.com/neurobioinfo/scrnabox/releases/download/v0.1.0/scrnabox.slurm.zip unzip scrnabox.slurm.zip To obtain a brief guidance of the pipeline, execute the following code. bash ./scrnabox.slurm/launch_scrnabox.sh -h scrnabox.slurm needs R and cellranger . For the R, you need to install 'Seurat','ggplot2', 'dplyr', 'foreach', 'doParallel', 'Matrix', 'DoubletFinder','cowplot','clustree' . Then install 'scrnaboxR' : devtools::install_github(\"neurobioinfo/scrnabox/scrnaboxR\") The 'scrnaboxR' is an R package that provides a collection of functions for conducting enrichment analysis and other analyses associated with single-cell RNA sequencing (scRNA-seq) data. It serves as a companion to scrnabox, offering a range of tools and functionalities to enhance scRNA-seq data analysis. You need to add the R info in scrnabox_config.ini , you can define the path of R library in R_LIB_PATH= , version of R in R_VERSION , you can add the path of cell ranger in MODULECELLRANGER Processed Data The pipeline can also be used with processed data from different projects. Tutorial To analyze DGE look at Practice . References Stuart, T., Butler, A., Hoffman, P., Hafemeister, C., Papalexi, E., Mauck III, W. M., ... & Satija, R. (2019). Comprehensive integration of single-cell data. Cell, 177(7), 1888-1902. Contributing This is an early version, any contribute or suggestion is appreciated, you can directly contact with Saeid Amiri or Rhalena Thomas . Changelog Every release is documented on the GitHub Releases page . License This project is licensed under the MIT License - see the LICENSE.md file for details. Acknowledgement The pipeline is done as part Dark Genome project, it is written by Saeid Amiri with associate of Rhalena Thomas and Neuro Bioinformatics Core. Copyright belong MNI BIOINFO CORE (https://github.com/neurobioinfo). Todo \u2b06 back to top","title":"Home"},{"location":"#scrnabox-a-pipeline-for-scrna-analysis-under-hpc","text":"This repository includes a tutorial for the scRNA-seq data analysis using scrnabox pipeline under an HPC environment ( slurm work load manager system ).","title":"scrnabox: A pipeline for scRNA analysis under HPC"},{"location":"#contents","text":"Workflow analysis Standard scRNA-seq Cell hashtags scrnabox.slurm Installing Processed Data Tutorial References","title":"Contents"},{"location":"#workflow-analysis","text":"The following figures illustrate the steps involved in analyzing scRNA-seq data using the Standard and Cell Hashtags with the scrnabox pipeline This pipeline currently includes implementation of the standard and cell hashtags scRNA.","title":"Workflow analysis"},{"location":"#standard-scrna-seq","text":"The following steps describe how to analyze scRNA-seq data using the pipeline: - Step 1: cellranger - This step runs Cellranger on the scRNA-seq data to generate the feature-barcode matrices for each sample. - Step 2: Seurat object - This step runs Seurat on the feature-barcode matrices obtained from step 1 to generate a Seurat object for each sample. The Seurat object contains a lot of information, and accessing SeuratObject@meta.data will provide a data frame with relevant information on each cell. - Step 3: QC and filter - The Seurat object includes quality metrics that can be used to filter cells and genes against possible doublets. Metrics such as total UMI counts per cell (nCount_RNA), total number of detected features per cell (nFeature_RNA), and mitochondrial count (percent.mito) are often used. - Step 4: Doublet removal - This step can be used to remove doublets from the data. By default, the pipeline removes doublets, but you can choose to keep them by changing the parameter from 'yes' to 'no'. - Step 5: Integration - This step integrates multiple scRNA-seq datasets using the Comprehensive Integration of Single Cell Data (CCA) method in Seurat, Tim, et al. (2019). The pipeline identifies anchors using the FindIntegrationAnchors function and passes them to the IntegrateData function to get a single Seurat object representing all the datasets. - Step 6: Clustering- It involves clustering the data using a k-nearest neighbor graph based on the integrated PCA. This step produces UMAP and heatmaps of unlabelled clusters. However, it is up to the user to decide on the best cluster resolution outside the pipeline by examining the output and selecting the most appropriate annotation for the clusters. - step 7: Cluster annotate - In this step, you can annotate the clusters with known cell types or use marker genes to predict the cell type of each cluster. - step 8: Differential gene expression (DEG)- There are multiple ways to perform differential gene expression analysis, but in this pipeline, we use the FindAllMarkers function to rank the highly differentially expressed genes in each cluster, which allows us to identify genes that are significantly differentially expressed between each cluster and the rest of the cells. From there, we can define contrasts to run statistical tests and investigate the phenotype and genotypes of each cluster. The Step 1 - Step 8 can be done using scrnabox.slurm in the HPC system ( slurm work load manager system ). - step 9, Enrichment analysis: in this step, we obtain a list of significant genes using enrichment methods. The step 9 can be done using scrnaboxR, see Practice .","title":"Standard scRNA-seq"},{"location":"#cell-hashtags","text":"The following steps explain how to analyze the Hashtag oligonucleotide (henceforth referred to as HTO) - Step 1: cellranger - This step runs Cellranger on the scRNA-seq data to generate the feature-barcode matrices for each sample. - Step 2: Seurat object - This step runs Seurat on the feature-barcode matrices obtained from step 1 to generate a Seurat object for each sample. The Seurat object contains a lot of information, and accessing SeuratObject@meta.data will provide a data frame with relevant information on each cell. - Step 3: QC and filter - The Seurat object includes quality metrics that can be used to filter cells and genes against possible doublets. Metrics such as total UMI counts per cell (nCount_RNA), total number of detected features per cell (nFeature_RNA), and mitochondrial count (percent.mito) are often used. - Step 4: Demuplixing- In this step, demultiplexing is performed to separate the reads in the sequencing run according to their sample of origin, based on their barcode information. The pipeline includes an option to remove doublets and negative cells during a later step after quality control and filtering. - Step 5: Integration - This step integrates multiple scRNA-seq datasets using the Comprehensive Integration of Single Cell Data (CCA) method in Seurat, Tim, et al. (2019). The pipeline identifies anchors using the FindIntegrationAnchors function and passes them to the IntegrateData function to get a single Seurat object representing all the datasets. - Step 6: Clustering- It involves clustering the data using a k-nearest neighbor graph based on the integrated PCA. This step produces UMAP and heatmaps of unlabelled clusters. However, it is up to the user to decide on the best cluster resolution outside the pipeline by examining the output and selecting the most appropriate annotation for the clusters. - step 7: Cluster annotate - In this step, you can annotate the clusters with known cell types or use marker genes to predict the cell type of each cluster. - step 8: Differential gene expression (DEG)- There are multiple ways to perform differential gene expression analysis, but in this pipeline, we use the FindAllMarkers function to rank the highly differentially expressed genes in each cluster, which allows us to identify genes that are significantly differentially expressed between each cluster and the rest of the cells. From there, we can define contrasts to run statistical tests and investigate the phenotype and genotypes of each cluster. The Step 1 - Step 8 can be done using scrnabox.slurm in the HPC system ( slurm work load manager system ). - step 9, Enrichment analysis: in this step, we obtain a list of significant genes using enrichment methods. The step 9 can be done using scrnaboxR, see Practice .","title":"Cell Hashtags"},{"location":"#scrnaboxslurm","text":"The scrnabox.slurm is a pipeline specifically designed for analyzing data under a High-Performance Computing (HPC) system using the Slurm Workload Manager ( slurm work load manager system ). It has been extensively utilized on the Beluga , you can find comprehensive instructions on how to utilize the pipeline for Cell Hashtags and Standard scRNA-seq , the pipeline provides detailed guidance on processing and analyzing these specific types of single-cell RNA sequencing (scRNA-seq) data.","title":"scrnabox.slurm"},{"location":"#installing","text":"The package is written in the bash, so it can be used with any slurm system. To download scrnabox.slurm run the below comments wget https://github.com/neurobioinfo/scrnabox/releases/download/v0.1.0/scrnabox.slurm.zip unzip scrnabox.slurm.zip To obtain a brief guidance of the pipeline, execute the following code. bash ./scrnabox.slurm/launch_scrnabox.sh -h scrnabox.slurm needs R and cellranger . For the R, you need to install 'Seurat','ggplot2', 'dplyr', 'foreach', 'doParallel', 'Matrix', 'DoubletFinder','cowplot','clustree' . Then install 'scrnaboxR' : devtools::install_github(\"neurobioinfo/scrnabox/scrnaboxR\") The 'scrnaboxR' is an R package that provides a collection of functions for conducting enrichment analysis and other analyses associated with single-cell RNA sequencing (scRNA-seq) data. It serves as a companion to scrnabox, offering a range of tools and functionalities to enhance scRNA-seq data analysis. You need to add the R info in scrnabox_config.ini , you can define the path of R library in R_LIB_PATH= , version of R in R_VERSION , you can add the path of cell ranger in MODULECELLRANGER","title":"Installing"},{"location":"#processed-data","text":"The pipeline can also be used with processed data from different projects.","title":"Processed Data"},{"location":"#tutorial","text":"To analyze DGE look at Practice .","title":"Tutorial"},{"location":"#references","text":"Stuart, T., Butler, A., Hoffman, P., Hafemeister, C., Papalexi, E., Mauck III, W. M., ... & Satija, R. (2019). Comprehensive integration of single-cell data. Cell, 177(7), 1888-1902.","title":"References"},{"location":"#contributing","text":"This is an early version, any contribute or suggestion is appreciated, you can directly contact with Saeid Amiri or Rhalena Thomas .","title":"Contributing"},{"location":"#changelog","text":"Every release is documented on the GitHub Releases page .","title":"Changelog"},{"location":"#license","text":"This project is licensed under the MIT License - see the LICENSE.md file for details.","title":"License"},{"location":"#acknowledgement","text":"The pipeline is done as part Dark Genome project, it is written by Saeid Amiri with associate of Rhalena Thomas and Neuro Bioinformatics Core. Copyright belong MNI BIOINFO CORE (https://github.com/neurobioinfo).","title":"Acknowledgement"},{"location":"#todo","text":"\u2b06 back to top","title":"Todo"},{"location":"README_HTO/","text":"ScRNA pipeline to run HTO Contents Introduction Setup Step 1: cellranger Step 2: Seurat object Step 3: QC and filter Step 4: demuplixing Step 5: integration Step 6: Clustering step 7: Celltype annotation step 8: DEG contrast Integrating seurat objects Introduction This guide provides a brief introduction to analyzing hashtag oligonucleotide (HTO) data using the Scrnabox pipeline, scrnabox.slurm is an open-source pipeline for scRNA analysis that includes a job scheduler for HPC system. It outlines the steps involved in processing and analyzing HTO data, including quality control, cell filtering, clustering, and contrast analysis. By following these steps, researchers can gain insights into gene expression patterns in single cells and understand the underlying cellular heterogeneity in their samples. Setup Before running the pipeline, create a dedicated folder for the analysis and export the pipeline to this folder mkdir -p ~/scratch/des export SCRNABOX_HOME=~/scrnabox.slurm export SCRNABOX_PWD=~/scratch/des To obtain a brief guidance on the parameters, execute the following code. bash $SCRNABOX_HOME/launch_scrnabox.sh -h After defining the 'SCRNABOX_PWD' variable, create a folder named samples_info , then add subfolder for each sample in the samples_info , then prepare two files - library.csv and features_ref.csv - containing necessary information about the sample and save then inside the subfolder (note, the pipeline uses the name of subfolder as sample name under orig.ident in Seurat object). An example format for these files can be found at link ; create a CSV file named library.csv with three columns: fastq , sample , and library_type . In the fastq column, provide the path to the file. In the sample column, write the first of sample name, e.g., write Sample1GEXD01_MPS12347745_C12_S1_R1_001.fastq.gz as \"Sample1GEXD01_MPS12347745_C12\". In the library_type column, specify the type of the library. For HTO, you also need to create a separate CSV file named feature_ref.csv. This file should contain the following columns: id , name , read , pattern , sequence , and feature_type , it is the format used in the cellranger. Then run the following code to setup pipeline for cell Hashtag oligonucleotide analyzing (HTO): bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 0 \\ --method HTO In the code, -d ${SCRNABOX_PWD} , -steps 0 , and --method HTO specify certain parameters for the pipelines. The -d ${SCRNABOX_PWD} flag sets the working directory, -steps 0 determines the specific step to be executed (in this case, we choose the setup step), and --method HTO indicates that the pipeline is running the HTO method. When the pipeline setup is executed, it generates several files and folders under ${SCRNABOX_PWD}, including ./job_info/configs/scrnabox.config.ini (which contains the configuration arguments), ./job_info/expected.done.files.txt (which records the completed steps), ./job_info/logs (which contains logs for the submitted jobs), and ./job_info/parameters/ (which includes the arguments and parameters used in running the job and can be modified if necessary).\" Since you are using hashtags, you need to choose --method HTO . To view a brief overview of the pipeline, run the following code bash $SCRNABOX_HOME/launch_scrnabox.sh--help Step 1: cellranger In this step, Cell Ranger is executed, and the resulting output is saved under ${SCRNABOX_PWD}/step1, which generates a count matrix. As Cell Ranger runs a user interface, it is recommended to run this step in a 'screen'. screen -S run_scrnabox_HTO bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 1 If you already have the Count Matrices, skip this step and go next step. Step 2: Seurat object This step involves creating Seurat objects, which are a standard format for data generated using the 10x Genomics platform. The resulting objects are saved under ${SCRNABOX_PWD}/step2 . If you have the count matrices and skipt the Step 1, you should specify the path of count matrices under count_matrices= in the step 2's parameters: ${SCRNABOX_PWD}/job_output/parameters/step2_par.txt . bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 2 Step 3: QC and filter In this step, quality control is performed on the data, and the resulting output is saved under ${SCRNABOX_PWD}/step3 . The data is filtered based on the following criteria: nFeature_RNA > 1000 & nCount_RNA < 65000 & mitochondria_percent < 25 . bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 3 \\ --nFeature_RNA_L 1000 \\ --nCount_RNA_U 65000 \\ --mitochondria_percent_U 25 The parameters of this step are: - nFeatures_RNA: this parameter presents the number of unique RNA transcripts for each cell. If the value is less than 1000, it is considered as debris or dead cells and removed. --nFeature_RNA_L and --nFeature_RNA_U options set the lower and upper thresholds for nFeatures_RNA, respectively. - nCount_RNA: Cells with an abnormally high number of RNA transcripts may be doublets. To remove doublets, the nCount_RNA parameter is used instead. The --nCount_RNA_L and --nCount_RNA_U options set the lower and upper thresholds for nCount_RNA, respectively. - mitochondria_percent: High mitochondrial transcript levels relative to total RNA transcripts may indicate dead or dying cells and can affect clustering performance. By default, cells with mitochondrial transcript percentages greater than 25% are removed. The --mitochondria_percent_U option sets the upper threshold for mitochondrial transcript percentage. Step 4: Demultiplexing If you are using hashtags, you need to select the appropriate label for the hashtags. You can obtain the hashtag labels by executing the following code: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 4 \\ --msd T They actually include the gentoptype and are saved under the column MULTI_ID as default. You can add the current label and its corresponding new label in the file '${SCRNABOX_PWD}/job_output/parameters/step4_par.txt': 'old_antibody_label=' 'new_antibody_label='. Once you have added the labels, run the following command to run the demultiplexing process, the new label will be saved under column MULTI_ID_Lables . bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 4 This step can be used to remove the 'Doublet'. By default, the pipeline removes the doublet, if you want to keep them, just change 'yes' to 'no' in '${SCRNABOX_PWD}/job_info/parameters/step4_par.txt'. Step 5: Integration In this step, one combines multiple single-cell RNA-seq datasets. bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 5 Step 6: Clustering In this step, the pipeline runs clustering on the integrated dataset to group cells with similar gene expression patterns together based on a shared nearest neighbor graph (SNN). bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 6 step 7: Cluster annotation In this step, you will use various methods to identify and annotate cell clusters. This may involve creating t-SNE or UMAP plots to visualize cell clusters, or using marker gene analysis or gene set enrichment analysis to identify cell types. The goal is to determine the cell types or states present in your dataset and assign them to each cluster. The cluster annotation information will be used in Step 8 for downstream analysis and interpretation Marker In this step, the pipeline finds differentially expressed genes for each cluster, which can be used to identify cluster-specific markers. This is done using the FindAllMarkers function in Seurat. The function compares gene expression in each cluster to the expression in all other clusters and identifies genes that are differentially expressed with a significant p-value. The output includes the top differentially expressed genes for each cluster and their corresponding p-values and fold changes. These markers can be used for downstream analysis such as cell type identification and functional annotation. The results are saved under ${SCRNABOX_PWD}/step7. This step produces ./step7/info7/top_sel.csv , ./step7/info7/cluster_just_genes.xlsx , ./step7/info7/cluster_whole.xlsx , ./step7/info7/ClusterMarkers.rds , ./step7/figs7/heatmap.pdf , ./step7/figs7/umap.pdf , ./step7/figs7/umap_splitted.pdf bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --marker T FindTransferAnchors In this step, the pipeline uses the FindTransferAnchors function in Seurat identifies anchors between a reference and query object and add it to query object predictions . This step produces ./step7/objs7/seu_step7.rds . bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --fta T EnrichR In this step, the pipeline uses the EnrichR tool to perform gene set enrichment analysis on the differentially expressed genes identified in the previous step. EnrichR compares the list of genes against a large collection of gene set libraries, including pathways, gene ontology terms, and transcription factor targets, to identify enriched sets of genes that are related to biological functions, pathways, or processes. The results are saved as pdfs and csvs file. If your HPC allows access to the internet during batch submission, you can run the following codes bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --enrich T Otherwise, run the enrichment directly in R: dir.create(\"$SCRNABOX_PWD/step7/annot\") level_cluster='integrated_snn_res.0.7' ClusterMarkers='$SCRNABOX_PWD/step7/info7/ClusterMarkers.rds' PWD='$SCRNABOX_PWD/step7/annot/' PSUE='$SCRNABOX_PWD/step6/objs6/seu_step6.rds' top_sel=5 db <- c('Descartes_Cell_Types_and_Tissue_2021','CellMarker_Augmented_2021','Azimuth_Cell_Types_2021') scrnaboxR::annotation(level_cluster,ClusterMarkers,PWD,PSUE,top_sel,db) To run enrichment on your PC, first copy it to your PC, mkdir ~/Desktop/des/ scp -r usrid@beluga.computecanada.ca:${SCRNABOX_PWD}/step7 ~/Desktop/des/ scp -r usrid@beluga.computecanada.ca:${SCRNABOX_PWD}/step6 ~/Desktop/des/ Then run the following codes in R: dir.create(\"~/Desktop/des/step7/annot\") level_cluster='integrated_snn_res.0.7' ClusterMarkers='~/Desktop/des/step7/info7/ClusterMarkers.rds' PWD='~/Desktop/des/step7/annot/' PSUE='~/Desktop/des/step6/objs6/seu_step6.rds' top_sel=5 db <- c('Descartes_Cell_Types_and_Tissue_2021','CellMarker_Augmented_2021','Azimuth_Cell_Types_2021') scrnaboxR::annotation(level_cluster,ClusterMarkers,PWD,PSUE,top_sel,db) step 8: DGE contrast This step involves running the differential gene expression (DEG) analysis. To do this, you will first need to add the labels obtained from Step 7 to /job_info/parameters/step8_ clus_label.txt . These labels typically represent cell type or condition information and should be separated by commas. Once the labels have been added, you can use a variety of methods to perform DEG analysis, such as the popular edgeR or DESeq2 packages, this pipeline uses edgeR . DGEList This step involves creating a DGEListobject from a table of counts obtained from seurate objects.it is recommended to allocate at least 3 times the size of the seu_int_clu.rds file in RAM, 3*size(seu_int_clu.rds). bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --dgelist T DGE contrasts At this stage, it is possible to perform a contrast analysis on the clustered results, either at the genotype level or at the genotype-cell level Genotype You can find a file called ${SCRNABOX_PWD}/job_info/parameters/step8_contrast_main.txt , which contains columns for cont_name , control , ex_control , and all . You can specify genotype contrasts in this file and then use the --genotype T option to run the genotype contrast bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --genotype T Genotype-cell To perform an interaction analysis between cell type and genotype, specify your contrast in the file ${SCRNABOX_PWD}/job_info/parameters/step8_contrast_inte.txt . To run Step 8 using the interaction contrast, execute the following command which use the -celltype T option to run the Genotype-cell contrast. bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --celltype T You can integrate the contrast directly into the pipeline by calling it, CONTINT=~/des/step7_contrast_inte.txt bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --celltype T \\ --cont ${CONTINT} CONTMAIN=~/des/step7_contrast_main.txt bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --genotype T \\ --cont ${CONTMAIN} Note: If you have a large number of contrasts to run, it may be more efficient to split them up and submit batch jobs instead. Integrating seurat objects To combine different seurat objects, you can run the following codes. LISTOFSEU=~/list.txt bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps integrate \\ --seulist ${LISTOFSEU} LISTOFSEU includes the path of seurate files, put them in different lines. By default, the pipeline standardize the seurat objects before integrating, you can change the default in ${SCRNABOX_PWD}/job_info/parameters/stepint_par.txt .","title":"Cell hashtags"},{"location":"README_HTO/#scrna-pipeline-to-run-hto","text":"","title":"ScRNA pipeline to run HTO"},{"location":"README_HTO/#contents","text":"Introduction Setup Step 1: cellranger Step 2: Seurat object Step 3: QC and filter Step 4: demuplixing Step 5: integration Step 6: Clustering step 7: Celltype annotation step 8: DEG contrast Integrating seurat objects","title":"Contents"},{"location":"README_HTO/#introduction","text":"This guide provides a brief introduction to analyzing hashtag oligonucleotide (HTO) data using the Scrnabox pipeline, scrnabox.slurm is an open-source pipeline for scRNA analysis that includes a job scheduler for HPC system. It outlines the steps involved in processing and analyzing HTO data, including quality control, cell filtering, clustering, and contrast analysis. By following these steps, researchers can gain insights into gene expression patterns in single cells and understand the underlying cellular heterogeneity in their samples.","title":"Introduction"},{"location":"README_HTO/#setup","text":"Before running the pipeline, create a dedicated folder for the analysis and export the pipeline to this folder mkdir -p ~/scratch/des export SCRNABOX_HOME=~/scrnabox.slurm export SCRNABOX_PWD=~/scratch/des To obtain a brief guidance on the parameters, execute the following code. bash $SCRNABOX_HOME/launch_scrnabox.sh -h After defining the 'SCRNABOX_PWD' variable, create a folder named samples_info , then add subfolder for each sample in the samples_info , then prepare two files - library.csv and features_ref.csv - containing necessary information about the sample and save then inside the subfolder (note, the pipeline uses the name of subfolder as sample name under orig.ident in Seurat object). An example format for these files can be found at link ; create a CSV file named library.csv with three columns: fastq , sample , and library_type . In the fastq column, provide the path to the file. In the sample column, write the first of sample name, e.g., write Sample1GEXD01_MPS12347745_C12_S1_R1_001.fastq.gz as \"Sample1GEXD01_MPS12347745_C12\". In the library_type column, specify the type of the library. For HTO, you also need to create a separate CSV file named feature_ref.csv. This file should contain the following columns: id , name , read , pattern , sequence , and feature_type , it is the format used in the cellranger. Then run the following code to setup pipeline for cell Hashtag oligonucleotide analyzing (HTO): bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 0 \\ --method HTO In the code, -d ${SCRNABOX_PWD} , -steps 0 , and --method HTO specify certain parameters for the pipelines. The -d ${SCRNABOX_PWD} flag sets the working directory, -steps 0 determines the specific step to be executed (in this case, we choose the setup step), and --method HTO indicates that the pipeline is running the HTO method. When the pipeline setup is executed, it generates several files and folders under ${SCRNABOX_PWD}, including ./job_info/configs/scrnabox.config.ini (which contains the configuration arguments), ./job_info/expected.done.files.txt (which records the completed steps), ./job_info/logs (which contains logs for the submitted jobs), and ./job_info/parameters/ (which includes the arguments and parameters used in running the job and can be modified if necessary).\" Since you are using hashtags, you need to choose --method HTO . To view a brief overview of the pipeline, run the following code bash $SCRNABOX_HOME/launch_scrnabox.sh--help","title":"Setup"},{"location":"README_HTO/#step-1-cellranger","text":"In this step, Cell Ranger is executed, and the resulting output is saved under ${SCRNABOX_PWD}/step1, which generates a count matrix. As Cell Ranger runs a user interface, it is recommended to run this step in a 'screen'. screen -S run_scrnabox_HTO bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 1 If you already have the Count Matrices, skip this step and go next step.","title":"Step 1: cellranger"},{"location":"README_HTO/#step-2-seurat-object","text":"This step involves creating Seurat objects, which are a standard format for data generated using the 10x Genomics platform. The resulting objects are saved under ${SCRNABOX_PWD}/step2 . If you have the count matrices and skipt the Step 1, you should specify the path of count matrices under count_matrices= in the step 2's parameters: ${SCRNABOX_PWD}/job_output/parameters/step2_par.txt . bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 2","title":"Step 2: Seurat object"},{"location":"README_HTO/#step-3-qc-and-filter","text":"In this step, quality control is performed on the data, and the resulting output is saved under ${SCRNABOX_PWD}/step3 . The data is filtered based on the following criteria: nFeature_RNA > 1000 & nCount_RNA < 65000 & mitochondria_percent < 25 . bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 3 \\ --nFeature_RNA_L 1000 \\ --nCount_RNA_U 65000 \\ --mitochondria_percent_U 25 The parameters of this step are: - nFeatures_RNA: this parameter presents the number of unique RNA transcripts for each cell. If the value is less than 1000, it is considered as debris or dead cells and removed. --nFeature_RNA_L and --nFeature_RNA_U options set the lower and upper thresholds for nFeatures_RNA, respectively. - nCount_RNA: Cells with an abnormally high number of RNA transcripts may be doublets. To remove doublets, the nCount_RNA parameter is used instead. The --nCount_RNA_L and --nCount_RNA_U options set the lower and upper thresholds for nCount_RNA, respectively. - mitochondria_percent: High mitochondrial transcript levels relative to total RNA transcripts may indicate dead or dying cells and can affect clustering performance. By default, cells with mitochondrial transcript percentages greater than 25% are removed. The --mitochondria_percent_U option sets the upper threshold for mitochondrial transcript percentage.","title":"Step 3: QC and filter"},{"location":"README_HTO/#step-4-demultiplexing","text":"If you are using hashtags, you need to select the appropriate label for the hashtags. You can obtain the hashtag labels by executing the following code: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 4 \\ --msd T They actually include the gentoptype and are saved under the column MULTI_ID as default. You can add the current label and its corresponding new label in the file '${SCRNABOX_PWD}/job_output/parameters/step4_par.txt': 'old_antibody_label=' 'new_antibody_label='. Once you have added the labels, run the following command to run the demultiplexing process, the new label will be saved under column MULTI_ID_Lables . bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 4 This step can be used to remove the 'Doublet'. By default, the pipeline removes the doublet, if you want to keep them, just change 'yes' to 'no' in '${SCRNABOX_PWD}/job_info/parameters/step4_par.txt'.","title":"Step 4: Demultiplexing"},{"location":"README_HTO/#step-5-integration","text":"In this step, one combines multiple single-cell RNA-seq datasets. bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 5","title":"Step 5: Integration"},{"location":"README_HTO/#step-6-clustering","text":"In this step, the pipeline runs clustering on the integrated dataset to group cells with similar gene expression patterns together based on a shared nearest neighbor graph (SNN). bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 6","title":"Step 6: Clustering"},{"location":"README_HTO/#step-7-cluster-annotation","text":"In this step, you will use various methods to identify and annotate cell clusters. This may involve creating t-SNE or UMAP plots to visualize cell clusters, or using marker gene analysis or gene set enrichment analysis to identify cell types. The goal is to determine the cell types or states present in your dataset and assign them to each cluster. The cluster annotation information will be used in Step 8 for downstream analysis and interpretation","title":"step 7: Cluster annotation"},{"location":"README_HTO/#marker","text":"In this step, the pipeline finds differentially expressed genes for each cluster, which can be used to identify cluster-specific markers. This is done using the FindAllMarkers function in Seurat. The function compares gene expression in each cluster to the expression in all other clusters and identifies genes that are differentially expressed with a significant p-value. The output includes the top differentially expressed genes for each cluster and their corresponding p-values and fold changes. These markers can be used for downstream analysis such as cell type identification and functional annotation. The results are saved under ${SCRNABOX_PWD}/step7. This step produces ./step7/info7/top_sel.csv , ./step7/info7/cluster_just_genes.xlsx , ./step7/info7/cluster_whole.xlsx , ./step7/info7/ClusterMarkers.rds , ./step7/figs7/heatmap.pdf , ./step7/figs7/umap.pdf , ./step7/figs7/umap_splitted.pdf bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --marker T","title":"Marker"},{"location":"README_HTO/#findtransferanchors","text":"In this step, the pipeline uses the FindTransferAnchors function in Seurat identifies anchors between a reference and query object and add it to query object predictions . This step produces ./step7/objs7/seu_step7.rds . bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --fta T","title":"FindTransferAnchors"},{"location":"README_HTO/#enrichr","text":"In this step, the pipeline uses the EnrichR tool to perform gene set enrichment analysis on the differentially expressed genes identified in the previous step. EnrichR compares the list of genes against a large collection of gene set libraries, including pathways, gene ontology terms, and transcription factor targets, to identify enriched sets of genes that are related to biological functions, pathways, or processes. The results are saved as pdfs and csvs file. If your HPC allows access to the internet during batch submission, you can run the following codes bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --enrich T Otherwise, run the enrichment directly in R: dir.create(\"$SCRNABOX_PWD/step7/annot\") level_cluster='integrated_snn_res.0.7' ClusterMarkers='$SCRNABOX_PWD/step7/info7/ClusterMarkers.rds' PWD='$SCRNABOX_PWD/step7/annot/' PSUE='$SCRNABOX_PWD/step6/objs6/seu_step6.rds' top_sel=5 db <- c('Descartes_Cell_Types_and_Tissue_2021','CellMarker_Augmented_2021','Azimuth_Cell_Types_2021') scrnaboxR::annotation(level_cluster,ClusterMarkers,PWD,PSUE,top_sel,db) To run enrichment on your PC, first copy it to your PC, mkdir ~/Desktop/des/ scp -r usrid@beluga.computecanada.ca:${SCRNABOX_PWD}/step7 ~/Desktop/des/ scp -r usrid@beluga.computecanada.ca:${SCRNABOX_PWD}/step6 ~/Desktop/des/ Then run the following codes in R: dir.create(\"~/Desktop/des/step7/annot\") level_cluster='integrated_snn_res.0.7' ClusterMarkers='~/Desktop/des/step7/info7/ClusterMarkers.rds' PWD='~/Desktop/des/step7/annot/' PSUE='~/Desktop/des/step6/objs6/seu_step6.rds' top_sel=5 db <- c('Descartes_Cell_Types_and_Tissue_2021','CellMarker_Augmented_2021','Azimuth_Cell_Types_2021') scrnaboxR::annotation(level_cluster,ClusterMarkers,PWD,PSUE,top_sel,db)","title":"EnrichR"},{"location":"README_HTO/#step-8-dge-contrast","text":"This step involves running the differential gene expression (DEG) analysis. To do this, you will first need to add the labels obtained from Step 7 to /job_info/parameters/step8_ clus_label.txt . These labels typically represent cell type or condition information and should be separated by commas. Once the labels have been added, you can use a variety of methods to perform DEG analysis, such as the popular edgeR or DESeq2 packages, this pipeline uses edgeR .","title":"step 8: DGE contrast"},{"location":"README_HTO/#dgelist","text":"This step involves creating a DGEListobject from a table of counts obtained from seurate objects.it is recommended to allocate at least 3 times the size of the seu_int_clu.rds file in RAM, 3*size(seu_int_clu.rds). bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --dgelist T","title":"DGEList"},{"location":"README_HTO/#dge-contrasts","text":"At this stage, it is possible to perform a contrast analysis on the clustered results, either at the genotype level or at the genotype-cell level","title":"DGE contrasts"},{"location":"README_HTO/#genotype","text":"You can find a file called ${SCRNABOX_PWD}/job_info/parameters/step8_contrast_main.txt , which contains columns for cont_name , control , ex_control , and all . You can specify genotype contrasts in this file and then use the --genotype T option to run the genotype contrast bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --genotype T","title":"Genotype"},{"location":"README_HTO/#genotype-cell","text":"To perform an interaction analysis between cell type and genotype, specify your contrast in the file ${SCRNABOX_PWD}/job_info/parameters/step8_contrast_inte.txt . To run Step 8 using the interaction contrast, execute the following command which use the -celltype T option to run the Genotype-cell contrast. bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --celltype T You can integrate the contrast directly into the pipeline by calling it, CONTINT=~/des/step7_contrast_inte.txt bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --celltype T \\ --cont ${CONTINT} CONTMAIN=~/des/step7_contrast_main.txt bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --genotype T \\ --cont ${CONTMAIN} Note: If you have a large number of contrasts to run, it may be more efficient to split them up and submit batch jobs instead.","title":"Genotype-cell"},{"location":"README_HTO/#integrating-seurat-objects","text":"To combine different seurat objects, you can run the following codes. LISTOFSEU=~/list.txt bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps integrate \\ --seulist ${LISTOFSEU} LISTOFSEU includes the path of seurate files, put them in different lines. By default, the pipeline standardize the seurat objects before integrating, you can change the default in ${SCRNABOX_PWD}/job_info/parameters/stepint_par.txt .","title":"Integrating seurat objects"},{"location":"README_SCRNA/","text":"ScRNA pipeline to run standard scRNA Contents Introduction Setup Step 1: cellranger Step 2: Seurat object Step 3: QC and filter Step 4: Remove doublet Step 5: integration Step 6: Clustering step 7: Cluster annotation step 8: DEG contrast Integrating seurat objects Introduction This guide provides a brief introduction to analyzing standard data using the Scrnabox pipeline, scrnabox.slurm is an open-source pipeline for scRNA analysis that includes a job scheduler for HPC system. It outlines the steps involved in processing and analyzing data, including quality control, cell filtering, clustering, and contrast analysis. By following these steps, researchers can gain insights into gene expression patterns in single cells and understand the underlying cellular heterogeneity in their samples. The following figure illustrates the steps involved in analyzing standard scRNA-seq data with the scrnabox pipeline Setup Before running the pipeline, create a dedicated folder for the analysis and export the pipeline to this folder mkdir -p ~/scratch/des export SCRNABOX_HOME=~/scrnabox.slurm export SCRNABOX_PWD=~/scratch/des To obtain a brief guidance on the parameters, please execute the following code. bash $SCRNABOX_HOME/launch_scrnabox.sh -h After defining the 'SCRNABOX_PWD' variable, create a folder named samples_info , then add subfolder for each sample in the samples_info , then prepare two files - library.csv and features_ref.csv - containing necessary information about the sample and save then inside the subfolder (note, the pipeline uses the name of subfolder as sample name under orig.ident in Seurat object). An example format for these files can be found at link ; create a CSV file named library.csv with three columns: fastq , sample , and library_type . In the fastq column, provide the path to the file. In the sample column, write the first of sample name, e.g., write Sample1GEXD01_MPS12347745_C12_S1_R1_001.fastq.gz as \"Sample1GEXD01_MPS12347745_C12\". In the library_type column, specify the type of the library. Then run the following code to setup pipeline: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 0 \\ --method SCRNA In the code, -d ${SCRNABOX_PWD} , -steps 0 , and --method SCRNA specify certain parameters for the pipelines. The -d ${SCRNABOX_PWD} flag sets the working directory, -steps 0 determines the specific step to be executed (in this case, we choose the setup step), and --method SCRNA indicates that the pipeline is running the SCRNA method. When the pipeline setup is executed, it generates several files and folders under ${SCRNABOX_PWD}, including ./job_output/configs/scrnabox.config.ini (which contains the configuration arguments), ./job_output/expected.done.files.txt (which records the completed steps), ./job_output/logs (which contains logs for the submitted jobs), and ./job_output/parameters/ (which includes the arguments and parameters used in running the job and can be modified if necessary).\" Since you are using hashtags, you need to choose --method SCRNA . Step 1: cellranger In this step, Cell Ranger is executed, and the resulting output is saved under ${SCRNABOX_PWD}/step1, which generates a count matrix. As Cell Ranger runs a user interface, it is recommended to run this step in a 'screen'. screen -S run_scrnabox bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 1 If you already have the Count Matrices, skip this step and go next step. Step 2: Seurat object This step involves creating Seurat objects, which are a standard format for data generated using the 10x Genomics platform. The resulting objects are saved under ${SCRNABOX_PWD}/step2 . If you have the count matrices and skipt the Step 1, you should specify the path of count matrices under count_matrices= in the step 2's parameters: ${SCRNABOX_PWD}/job_output/parameters/step2_par.txt . bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 2 If you already have the Count Matrices, skip this step and go next step. Step 3: QC and filter In this step, quality control is performed on the data, and the resulting output is saved under ${SCRNABOX_PWD}/step3 . The data is filtered based on the following criteria: nFeature_RNA > 1000 & nCount_RNA < 65000 & mitochondria_percent < 25 . bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 3 \\ --nFeature_RNA_L 1000 \\ --nCount_RNA_U 65000 \\ --mitochondria_percent_U 25 The parameters of this step are: - nFeatures_RNA: this parameter presents the number of unique RNA transcripts for each cell. If the value is less than 1000, it is considered as debris or dead cells and removed. --nFeature_RNA_L and --nFeature_RNA_U options set the lower and upper thresholds for nFeatures_RNA, respectively. - nCount_RNA: Cells with an abnormally high number of RNA transcripts may be doublets. To remove doublets, the nCount_RNA parameter is used instead. The --nCount_RNA_L and --nCount_RNA_U options set the lower and upper thresholds for nCount_RNA, respectively. - mitochondria_percent: High mitochondrial transcript levels relative to total RNA transcripts may indicate dead or dying cells and can affect clustering performance. By default, cells with mitochondrial transcript percentages greater than 25% are removed. The --mitochondria_percent_U option sets the upper threshold for mitochondrial transcript percentage. Step 4: Remove doublet The genoype of sample is saved under the column MULTI_ID as default. You can add the current label and its corresponding new label in the file ${SCRNABOX_PWD}/job_output/parameters/step4_par.txt : old_label= and new_label= and the new label will be saved under column MULTI_ID_Lables . This step can be used to remove the 'Doublet'. By default, the pipeline removes the doublet, if you want to keep them, just change 'yes' to 'no' in '${SCRNABOX_PWD}/job_info/parameters/step4_par.txt'. Also you can add the current label and its corresponding new label in the file '${SCRNABOX_PWD}/job_output/parameters/step4_par.txt'. Once you have added the labels, run the following command to run this step. bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 4 Step 5: Integration In this step, one combines multiple single-cell RNA-seq datasets. bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 5 Step 6: Clustering In this step, the pipeline runs clustering on the integrated dataset to group cells with similar gene expression patterns together based on a shared nearest neighbor network. bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 6 step 7: Cluster annotation In this step, you will use various methods to identify and annotate cell clusters. This may involve creating t-SNE or UMAP plots to visualize cell clusters, or using marker gene analysis or gene set enrichment analysis to identify cell types. The goal is to determine the cell types or states present in your dataset and assign them to each cluster. The cluster annotation information will be used in Step 8 for downstream analysis and interpretation Marker In this step, the pipeline finds differentially expressed genes for each cluster, which can be used to identify cluster-specific markers. This is done using the FindAllMarkers function in Seurat. The function compares gene expression in each cluster to the expression in all other clusters and identifies genes that are differentially expressed with a significant p-value. The output includes the top differentially expressed genes for each cluster and their corresponding p-values and fold changes. These markers can be used for downstream analysis such as cell type identification and functional annotation. The results are saved under ${SCRNABOX_PWD}/step7. This step produces ./step7/info7/top_sel.csv , ./step7/info7/cluster_just_genes.xlsx , ./step7/info7/cluster_whole.xlsx , ./step7/info7/ClusterMarkers.rds , ./step7/figs7/heatmap.pdf , ./step7/figs7/umap.pdf , ./step7/figs7/umap_splitted.pdf bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --marker T FindTransferAnchors In this step, the pipeline uses the FindTransferAnchors function in Seurat identifies anchors between a reference and query object and add it to query object predictions . This step produces ./step7/objs7/seu_step7.rds . bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --fta T EnrichR In this step, the pipeline uses the EnrichR tool to perform gene set enrichment analysis on the differentially expressed genes identified in the previous step. EnrichR compares the list of genes against a large collection of gene set libraries, including pathways, gene ontology terms, and transcription factor targets, to identify enriched sets of genes that are related to biological functions, pathways, or processes. The results are saved as pdfs and csvs file. If your HPC allows access to the internet during batch submission, you can run the following codes bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --enrich T Otherwise, run the enrichment directly in R: dir.create(\"$SCRNABOX_PWD/step7/annot\") level_cluster='integrated_snn_res.0.7' ClusterMarkers='$SCRNABOX_PWD/step7/info7/ClusterMarkers.rds' PWD='$SCRNABOX_PWD/step7/annot/' PSUE='$SCRNABOX_PWD/step6/objs6/seu_step6.rds' top_sel=5 db <- c('Descartes_Cell_Types_and_Tissue_2021','CellMarker_Augmented_2021','Azimuth_Cell_Types_2021') scrnaboxR::annotation(level_cluster,ClusterMarkers,PWD,PSUE,top_sel,db) To run enrichment on your PC, first copy it to your PC, mkdir ~/Desktop/des/ scp -r usrid@beluga.computecanada.ca:${SCRNABOX_PWD}/step7 ~/Desktop/des/ scp -r usrid@beluga.computecanada.ca:${SCRNABOX_PWD}/step6 ~/Desktop/des/ Then run the following codes in R: dir.create(\"~/Desktop/des/step7/annot\") level_cluster='integrated_snn_res.0.7' ClusterMarkers='~/Desktop/des/step7/info7/ClusterMarkers.rds' PWD='~/Desktop/des/step7/annot/' PSUE='~/Desktop/des/step6/objs6/seu_step6.rds' top_sel=5 db <- c('Descartes_Cell_Types_and_Tissue_2021','CellMarker_Augmented_2021','Azimuth_Cell_Types_2021') scrnaboxR::annotation(level_cluster,ClusterMarkers,PWD,PSUE,top_sel,db) step 8: DGE contrast This step runs the Differetial gene expression (DEG); first add the labels obtained from Step 7 to /job_output/parameters/step8_ clus_label.txt . DGEList This step creates a DGEListobject from a table of counts obtained from seurate objects. It might need alot of RAM, we suggest 3*size(seu_int_clu.rds) bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --dgelist T DGE contrasts At this stage, it is possible to perform a contrast analysis on the clustered results, either at the genotype level or at the genotype-cell level Genotype You can find a file called ${SCRNABOX_PWD}/job_info/parameters/step8_contrast_main.txt , which contains columns for cont_name , control , ex_control , and all . You can specify genotype contrasts in this file and then use the --genotype T option to run the genotype contrast bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --genotype T Genotype-cell To perform an interaction analysis between cell type and genotype, specify your contrast in the file ${SCRNABOX_PWD}/job_info/parameters/step8_contrast_inte.txt . To run Step 8 using the interaction contrast, execute the following command which use the -celltype T option to run the Genotype-cell contrast. bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --celltype T You can integrate the contrast directly into the pipeline by calling it, CONTINT=~/des/step7_contrast_inte.txt bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --celltype T \\ --cont ${CONTINT} CONTMAIN=~/des/step7_contrast_main.txt bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --genotype T \\ --cont ${CONTMAIN} Note: If you have a large number of contrasts to run, it may be more efficient to split them up and submit batch jobs instead. Integrating seurat objects To combine different seurat objects, you can run the following codes. LISTOFSEU=~/list.txt bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps integrate \\ --seulist ${LISTOFSEU} \\ LISTOFSEU includes the path of seurate files, put them in different lines. By default, the pipeline standardize the seurat objects before integrating, you can change the default in ${SCRNABOX_PWD}/job_output/parameters/stepint_par.txt .","title":"Standard scRNA"},{"location":"README_SCRNA/#scrna-pipeline-to-run-standard-scrna","text":"","title":"ScRNA pipeline to run standard scRNA"},{"location":"README_SCRNA/#contents","text":"Introduction Setup Step 1: cellranger Step 2: Seurat object Step 3: QC and filter Step 4: Remove doublet Step 5: integration Step 6: Clustering step 7: Cluster annotation step 8: DEG contrast Integrating seurat objects","title":"Contents"},{"location":"README_SCRNA/#introduction","text":"This guide provides a brief introduction to analyzing standard data using the Scrnabox pipeline, scrnabox.slurm is an open-source pipeline for scRNA analysis that includes a job scheduler for HPC system. It outlines the steps involved in processing and analyzing data, including quality control, cell filtering, clustering, and contrast analysis. By following these steps, researchers can gain insights into gene expression patterns in single cells and understand the underlying cellular heterogeneity in their samples. The following figure illustrates the steps involved in analyzing standard scRNA-seq data with the scrnabox pipeline","title":"Introduction"},{"location":"README_SCRNA/#setup","text":"Before running the pipeline, create a dedicated folder for the analysis and export the pipeline to this folder mkdir -p ~/scratch/des export SCRNABOX_HOME=~/scrnabox.slurm export SCRNABOX_PWD=~/scratch/des To obtain a brief guidance on the parameters, please execute the following code. bash $SCRNABOX_HOME/launch_scrnabox.sh -h After defining the 'SCRNABOX_PWD' variable, create a folder named samples_info , then add subfolder for each sample in the samples_info , then prepare two files - library.csv and features_ref.csv - containing necessary information about the sample and save then inside the subfolder (note, the pipeline uses the name of subfolder as sample name under orig.ident in Seurat object). An example format for these files can be found at link ; create a CSV file named library.csv with three columns: fastq , sample , and library_type . In the fastq column, provide the path to the file. In the sample column, write the first of sample name, e.g., write Sample1GEXD01_MPS12347745_C12_S1_R1_001.fastq.gz as \"Sample1GEXD01_MPS12347745_C12\". In the library_type column, specify the type of the library. Then run the following code to setup pipeline: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 0 \\ --method SCRNA In the code, -d ${SCRNABOX_PWD} , -steps 0 , and --method SCRNA specify certain parameters for the pipelines. The -d ${SCRNABOX_PWD} flag sets the working directory, -steps 0 determines the specific step to be executed (in this case, we choose the setup step), and --method SCRNA indicates that the pipeline is running the SCRNA method. When the pipeline setup is executed, it generates several files and folders under ${SCRNABOX_PWD}, including ./job_output/configs/scrnabox.config.ini (which contains the configuration arguments), ./job_output/expected.done.files.txt (which records the completed steps), ./job_output/logs (which contains logs for the submitted jobs), and ./job_output/parameters/ (which includes the arguments and parameters used in running the job and can be modified if necessary).\" Since you are using hashtags, you need to choose --method SCRNA .","title":"Setup"},{"location":"README_SCRNA/#step-1-cellranger","text":"In this step, Cell Ranger is executed, and the resulting output is saved under ${SCRNABOX_PWD}/step1, which generates a count matrix. As Cell Ranger runs a user interface, it is recommended to run this step in a 'screen'. screen -S run_scrnabox bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 1 If you already have the Count Matrices, skip this step and go next step.","title":"Step 1: cellranger"},{"location":"README_SCRNA/#step-2-seurat-object","text":"This step involves creating Seurat objects, which are a standard format for data generated using the 10x Genomics platform. The resulting objects are saved under ${SCRNABOX_PWD}/step2 . If you have the count matrices and skipt the Step 1, you should specify the path of count matrices under count_matrices= in the step 2's parameters: ${SCRNABOX_PWD}/job_output/parameters/step2_par.txt . bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 2 If you already have the Count Matrices, skip this step and go next step.","title":"Step 2: Seurat object"},{"location":"README_SCRNA/#step-3-qc-and-filter","text":"In this step, quality control is performed on the data, and the resulting output is saved under ${SCRNABOX_PWD}/step3 . The data is filtered based on the following criteria: nFeature_RNA > 1000 & nCount_RNA < 65000 & mitochondria_percent < 25 . bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 3 \\ --nFeature_RNA_L 1000 \\ --nCount_RNA_U 65000 \\ --mitochondria_percent_U 25 The parameters of this step are: - nFeatures_RNA: this parameter presents the number of unique RNA transcripts for each cell. If the value is less than 1000, it is considered as debris or dead cells and removed. --nFeature_RNA_L and --nFeature_RNA_U options set the lower and upper thresholds for nFeatures_RNA, respectively. - nCount_RNA: Cells with an abnormally high number of RNA transcripts may be doublets. To remove doublets, the nCount_RNA parameter is used instead. The --nCount_RNA_L and --nCount_RNA_U options set the lower and upper thresholds for nCount_RNA, respectively. - mitochondria_percent: High mitochondrial transcript levels relative to total RNA transcripts may indicate dead or dying cells and can affect clustering performance. By default, cells with mitochondrial transcript percentages greater than 25% are removed. The --mitochondria_percent_U option sets the upper threshold for mitochondrial transcript percentage.","title":"Step 3: QC and filter"},{"location":"README_SCRNA/#step-4-remove-doublet","text":"The genoype of sample is saved under the column MULTI_ID as default. You can add the current label and its corresponding new label in the file ${SCRNABOX_PWD}/job_output/parameters/step4_par.txt : old_label= and new_label= and the new label will be saved under column MULTI_ID_Lables . This step can be used to remove the 'Doublet'. By default, the pipeline removes the doublet, if you want to keep them, just change 'yes' to 'no' in '${SCRNABOX_PWD}/job_info/parameters/step4_par.txt'. Also you can add the current label and its corresponding new label in the file '${SCRNABOX_PWD}/job_output/parameters/step4_par.txt'. Once you have added the labels, run the following command to run this step. bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 4","title":"Step 4: Remove doublet"},{"location":"README_SCRNA/#step-5-integration","text":"In this step, one combines multiple single-cell RNA-seq datasets. bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 5","title":"Step 5: Integration"},{"location":"README_SCRNA/#step-6-clustering","text":"In this step, the pipeline runs clustering on the integrated dataset to group cells with similar gene expression patterns together based on a shared nearest neighbor network. bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 6","title":"Step 6: Clustering"},{"location":"README_SCRNA/#step-7-cluster-annotation","text":"In this step, you will use various methods to identify and annotate cell clusters. This may involve creating t-SNE or UMAP plots to visualize cell clusters, or using marker gene analysis or gene set enrichment analysis to identify cell types. The goal is to determine the cell types or states present in your dataset and assign them to each cluster. The cluster annotation information will be used in Step 8 for downstream analysis and interpretation","title":"step 7: Cluster annotation"},{"location":"README_SCRNA/#marker","text":"In this step, the pipeline finds differentially expressed genes for each cluster, which can be used to identify cluster-specific markers. This is done using the FindAllMarkers function in Seurat. The function compares gene expression in each cluster to the expression in all other clusters and identifies genes that are differentially expressed with a significant p-value. The output includes the top differentially expressed genes for each cluster and their corresponding p-values and fold changes. These markers can be used for downstream analysis such as cell type identification and functional annotation. The results are saved under ${SCRNABOX_PWD}/step7. This step produces ./step7/info7/top_sel.csv , ./step7/info7/cluster_just_genes.xlsx , ./step7/info7/cluster_whole.xlsx , ./step7/info7/ClusterMarkers.rds , ./step7/figs7/heatmap.pdf , ./step7/figs7/umap.pdf , ./step7/figs7/umap_splitted.pdf bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --marker T","title":"Marker"},{"location":"README_SCRNA/#findtransferanchors","text":"In this step, the pipeline uses the FindTransferAnchors function in Seurat identifies anchors between a reference and query object and add it to query object predictions . This step produces ./step7/objs7/seu_step7.rds . bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --fta T","title":"FindTransferAnchors"},{"location":"README_SCRNA/#enrichr","text":"In this step, the pipeline uses the EnrichR tool to perform gene set enrichment analysis on the differentially expressed genes identified in the previous step. EnrichR compares the list of genes against a large collection of gene set libraries, including pathways, gene ontology terms, and transcription factor targets, to identify enriched sets of genes that are related to biological functions, pathways, or processes. The results are saved as pdfs and csvs file. If your HPC allows access to the internet during batch submission, you can run the following codes bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --enrich T Otherwise, run the enrichment directly in R: dir.create(\"$SCRNABOX_PWD/step7/annot\") level_cluster='integrated_snn_res.0.7' ClusterMarkers='$SCRNABOX_PWD/step7/info7/ClusterMarkers.rds' PWD='$SCRNABOX_PWD/step7/annot/' PSUE='$SCRNABOX_PWD/step6/objs6/seu_step6.rds' top_sel=5 db <- c('Descartes_Cell_Types_and_Tissue_2021','CellMarker_Augmented_2021','Azimuth_Cell_Types_2021') scrnaboxR::annotation(level_cluster,ClusterMarkers,PWD,PSUE,top_sel,db) To run enrichment on your PC, first copy it to your PC, mkdir ~/Desktop/des/ scp -r usrid@beluga.computecanada.ca:${SCRNABOX_PWD}/step7 ~/Desktop/des/ scp -r usrid@beluga.computecanada.ca:${SCRNABOX_PWD}/step6 ~/Desktop/des/ Then run the following codes in R: dir.create(\"~/Desktop/des/step7/annot\") level_cluster='integrated_snn_res.0.7' ClusterMarkers='~/Desktop/des/step7/info7/ClusterMarkers.rds' PWD='~/Desktop/des/step7/annot/' PSUE='~/Desktop/des/step6/objs6/seu_step6.rds' top_sel=5 db <- c('Descartes_Cell_Types_and_Tissue_2021','CellMarker_Augmented_2021','Azimuth_Cell_Types_2021') scrnaboxR::annotation(level_cluster,ClusterMarkers,PWD,PSUE,top_sel,db)","title":"EnrichR"},{"location":"README_SCRNA/#step-8-dge-contrast","text":"This step runs the Differetial gene expression (DEG); first add the labels obtained from Step 7 to /job_output/parameters/step8_ clus_label.txt .","title":"step 8: DGE contrast"},{"location":"README_SCRNA/#dgelist","text":"This step creates a DGEListobject from a table of counts obtained from seurate objects. It might need alot of RAM, we suggest 3*size(seu_int_clu.rds) bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --dgelist T","title":"DGEList"},{"location":"README_SCRNA/#dge-contrasts","text":"At this stage, it is possible to perform a contrast analysis on the clustered results, either at the genotype level or at the genotype-cell level","title":"DGE contrasts"},{"location":"README_SCRNA/#genotype","text":"You can find a file called ${SCRNABOX_PWD}/job_info/parameters/step8_contrast_main.txt , which contains columns for cont_name , control , ex_control , and all . You can specify genotype contrasts in this file and then use the --genotype T option to run the genotype contrast bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --genotype T","title":"Genotype"},{"location":"README_SCRNA/#genotype-cell","text":"To perform an interaction analysis between cell type and genotype, specify your contrast in the file ${SCRNABOX_PWD}/job_info/parameters/step8_contrast_inte.txt . To run Step 8 using the interaction contrast, execute the following command which use the -celltype T option to run the Genotype-cell contrast. bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --celltype T You can integrate the contrast directly into the pipeline by calling it, CONTINT=~/des/step7_contrast_inte.txt bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --celltype T \\ --cont ${CONTINT} CONTMAIN=~/des/step7_contrast_main.txt bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --genotype T \\ --cont ${CONTMAIN} Note: If you have a large number of contrasts to run, it may be more efficient to split them up and submit batch jobs instead.","title":"Genotype-cell"},{"location":"README_SCRNA/#integrating-seurat-objects","text":"To combine different seurat objects, you can run the following codes. LISTOFSEU=~/list.txt bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps integrate \\ --seulist ${LISTOFSEU} \\ LISTOFSEU includes the path of seurate files, put them in different lines. By default, the pipeline standardize the seurat objects before integrating, you can change the default in ${SCRNABOX_PWD}/job_output/parameters/stepint_par.txt .","title":"Integrating seurat objects"},{"location":"about/","text":"Coming soon","title":"About"},{"location":"about/#coming-soon","text":"","title":"Coming soon"}]}