{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to scRNAbox's documentation! ScRNAbox is a single-cell RNA sequencing (scRNAseq) pipeline specifically designed for analyzing data under a High-Performance Computing (HPC) systems using the Slurm Workload Manager . The scRNAbox pipeline leverages the Seurat v4 framework and incorporates eight analytical steps into a comprehensive scRNAseq analysis that provides the foundation for further investigations. The eight analytical steps are outlined below. The scRNAbox pipeline provides two distinct, yet highly comparable analysis tracks: Standard analysis track HTO analysis track The standard analysis track is designed for experiments where each sample is captured and sequenced separately, while the HTO analysis track is designed for multiplexed experiments where samples are tagged with sample-specific oligonucleotide tagged Hashtag antibodies (HTO), pooled, and sequenced together. The two tracks share all of the same processes except for Steps 1 and 4. In Step 1, the FASTQ processing for HTO data requires different configurations than the standard analysis. In Step 4, the HTO data is demultiplexed and a different doublet removal method is used. For a comprehenseive description of each step, please see the Pipeline section of the scRNAbox documentation or see our pre-print manuscript . For a tutorial that leverages the datasets used as the application cases in our pre-print manuscript, please see scRNAbox analysis of the midbrain dataset . Contents Pipeline: Installation Step 0: Set up Step 1: FASTQ to expression matrix Step 2: Seurat object and ambient RNA Step 3: Quality control and filtering Step 4: Doublet removal (standard) Step 4: Demultiplexing (HTO) Step 5: Integration Step 6: Clustering Step 7: Cluster annotation Step 8: Differential gene expression Documentation: Job configurations Execution parameters Outputs Tutorial: Downloading the Midbrain dataset SCRNA analysis track: Midbrain dataset Downloading the PBMC dataset HTO analysis track: PBMC dataset Analysis of DGE outputs Manual CellRanger library preparation About: License Help and Feedback Acknowledgement","title":"Home"},{"location":"#welcome-to-scrnaboxs-documentation","text":"ScRNAbox is a single-cell RNA sequencing (scRNAseq) pipeline specifically designed for analyzing data under a High-Performance Computing (HPC) systems using the Slurm Workload Manager . The scRNAbox pipeline leverages the Seurat v4 framework and incorporates eight analytical steps into a comprehensive scRNAseq analysis that provides the foundation for further investigations. The eight analytical steps are outlined below. The scRNAbox pipeline provides two distinct, yet highly comparable analysis tracks: Standard analysis track HTO analysis track The standard analysis track is designed for experiments where each sample is captured and sequenced separately, while the HTO analysis track is designed for multiplexed experiments where samples are tagged with sample-specific oligonucleotide tagged Hashtag antibodies (HTO), pooled, and sequenced together. The two tracks share all of the same processes except for Steps 1 and 4. In Step 1, the FASTQ processing for HTO data requires different configurations than the standard analysis. In Step 4, the HTO data is demultiplexed and a different doublet removal method is used. For a comprehenseive description of each step, please see the Pipeline section of the scRNAbox documentation or see our pre-print manuscript . For a tutorial that leverages the datasets used as the application cases in our pre-print manuscript, please see scRNAbox analysis of the midbrain dataset .","title":"Welcome to scRNAbox's documentation!"},{"location":"#contents","text":"Pipeline: Installation Step 0: Set up Step 1: FASTQ to expression matrix Step 2: Seurat object and ambient RNA Step 3: Quality control and filtering Step 4: Doublet removal (standard) Step 4: Demultiplexing (HTO) Step 5: Integration Step 6: Clustering Step 7: Cluster annotation Step 8: Differential gene expression Documentation: Job configurations Execution parameters Outputs Tutorial: Downloading the Midbrain dataset SCRNA analysis track: Midbrain dataset Downloading the PBMC dataset HTO analysis track: PBMC dataset Analysis of DGE outputs Manual CellRanger library preparation About: License Help and Feedback Acknowledgement","title":"Contents"},{"location":"Acknowledgement/","text":"Acknowledgement The scRNAbox pipeline was produced for projects funded by Canadian Institute of Health Research and Michael J. Fox Foundation. The scRNAbox pipeline was produced as part Dark Genome Project. It is written by Saeid Amiri , Michael Fiorini , and Rhalena Thomas with associate of Sali Farhan and Edward Fon at the Montreal Neurological Institute-Hospital. Copyright belongs MNI BIOINFO CORE .","title":"Acknowledgement"},{"location":"Acknowledgement/#acknowledgement","text":"The scRNAbox pipeline was produced for projects funded by Canadian Institute of Health Research and Michael J. Fox Foundation. The scRNAbox pipeline was produced as part Dark Genome Project. It is written by Saeid Amiri , Michael Fiorini , and Rhalena Thomas with associate of Sali Farhan and Edward Fon at the Montreal Neurological Institute-Hospital. Copyright belongs MNI BIOINFO CORE .","title":"Acknowledgement"},{"location":"DEG/","text":"Analysis of DGE outputs This tutorial provides the code used for producing Figure 5 of our pre-print manuscript ; downstream analyses of the differential gene expression (DGE) results for the midbrain dataset ( Smajic et al. 2022 ). The tutorial can be broken down into three sections: DEG summary Cell-based DGE enrichment analysis Sample-based DGE enrichment analysis . The outputs from Step 8 of the scRNAbox analuysis of the midbrain dataset tutorial are used as input. Set up Set seed set.seed(1234) Load libraries library(ggrepel) library(ggplot2) library(stringr) BiocManager::install(\"clusterProfiler\") BiocManager::install(\"pathview\") BiocManager::install(\"enrichplot\") library(clusterProfiler) library(enrichplot) organism = \"org.Hs.eg.db\" BiocManager::install(organism, character.only = TRUE) library(organism, character.only = TRUE) require(DOSE) library(stringr) library(dplyr) 1. DEG summary 1.1. load cell-based all cells DEG file ## load DEG csv file all <- read.delim(\"/Users/mfiorini/Desktop/scRNA_pipeline/Manuscript/Manuscript_Figures/Smajic3/Step5/wilcoxon_all_cells/HCvPD/HCvPD_DEG.csv\", header = T, sep = \",\") 1.2. load cell-based cell type groups DEG files ## list of cell types used for DEG contrasts cell_based_cell_types <- c('Astrocytes', 'DaN', 'Endothelial', 'Ependymal', 'Excitatory', 'GABA', 'Inhibitory', 'Microglia', 'Oligocendrocytes', 'OPC', 'Pericytes') ## create empty list object list <- list() ## load DEG csv files for(i in unique(cell_based_cell_types)){ list[i] <- list(read.delim(paste0(\"/Users/mfiorini/Desktop/scRNA_pipeline/Manuscript/Manuscript_Figures/Smajic3/Step5/wilcoxon_celltype_groups/\", i,\"PDvHC/\",i,\"PDvHC_DEG.csv\"), header = T, sep = \",\")) } ## create data frame for each cell type list2env(list,envir=.GlobalEnv) 1.3. load sample-based all cells DEG file ## load DEG csv file all_sample <- read.delim(\"/Users/mfiorini/Desktop/scRNA_pipeline/Manuscript/Manuscript_Figures/Smajic3/Step5/pseudo_bulk_all_cells/PDvControl/DGE_AllCellsMainContrast HC vs PD.csv\", header = T, sep = \",\") 1.4. load sample-based cell type groups DEG files ## list of cell types used for DEG contrasts sample_based_cell_types <- c('astro', 'DaN', 'endo', 'ependymal', 'excit', 'GABA', 'inhib', 'mg', 'Olig', 'opc', 'peri') ## create empty list object list <- list() ## load DEG csv files for(i in unique(sample_based_cell_types)){ list[paste0(i,\"_sample\")] <- list(read.delim(paste0(\"/Users/mfiorini/Desktop/scRNA_pipeline/Manuscript/Manuscript_Figures/Smajic3/Step5/pseudo_bulk_celltype_groups/PDvControlbulk/info/DGE_\",i,\"MainContrast HC vs PD.csv\"), header = T, sep = \",\")) } ## create data frame for each cell type list2env(list,envir=.GlobalEnv) 1.5. Clean up cell-based DEG files ## make list of cell type dataframes CellType_df <- list(Astrocytes, DaN, Endothelial, Ependymal, Excitatory, GABA, Inhibitory, Microglia, Oligocendrocytes, OPC, Pericytes, all) ## set names of list as cell types names(CellType_df) <- c('Astrocytes', 'DaN', 'Endothelial', 'Ependymal', 'Excitatory', 'GABA', 'Inhibitory', 'Microglia', 'Oligocendrocytes', 'OPC', 'Pericytes', \"all\") ## list of columns that we want to keep cols_keep <- c(\"X\",\"p_val\",\"avg_log2FC\",\"p_val_adj\") ## process each dataframe to only keep DEGs with a p-value < 0.05 and log2FC > 1 or < -1 list <- list() for (i in unique(names(CellType_df))){ j <- data.frame(CellType_df[i]) colnames(j) <- c(\"X\", \"p_val\", \"avg_log2FC\", \"pct.1\", \"pct.2\", \"p_val_adj\") j <- j[,colnames(j) %in% cols_keep] j <- subset(j, p_val <= 0.05) j <- subset(j, avg_log2FC >= 1 | avg_log2FC <= -1) if (nrow(j > 0)){ j$cell_type <- paste0(i) j$method <- \"cell_based\" list[i] <- list(j) }else{ print(paste0(\"did not find any DEGs for \", i)) } list[i] } ## create data frame for each cell type list2env(list,envir=.GlobalEnv) 1.6. Clean up sample-based DEG files ## make list of cell type dataframes CellType_df <- list(astro_sample, DaN_sample, endo_sample, ependymal_sample, excit_sample, GABA_sample, inhib_sample, mg_sample, Olig_sample, opc_sample, peri_sample, all_sample) ## set names of list as cell types names(CellType_df) <- c('astro_sample', 'DaN_sample', 'endo_sample', 'ependymal_sample', 'excit_sample', 'GABA_sample', 'inhib_sample', 'mg_sample', 'Olig_sample', 'opc_sample', 'peri_sample', \"all_sample\") ## list of columns that we want to keep cols_keep <- c(\"X\",\"pvalue\",\"log2FoldChange\",\"padj\") ## process each dataframe to only keep DEGs with a p-value and log2FC > 1 or < -1 list <- list() for (i in unique(names(CellType_df))){ j <- data.frame(CellType_df[i]) colnames(j) <- c('X', 'baseMean', 'log2FoldChange', 'lfcSE' ,'stat', 'pvalue', 'padj') j <- j[,colnames(j) %in% cols_keep] j <- subset(j, pvalue <= 0.05) j <- subset(j, log2FoldChange >= 1 | log2FoldChange <= -1) if (nrow(j > 0)){ j$cell_type <- paste0(i) j$method <- \"sample_based\" list[i] <- list(j) }else{ print(paste0(\"did not find any DEGs for \", i)) } list[i] } ## create data frame for each cell type list2env(list,envir=.GlobalEnv) 1.7. Compute number of DEGs identified for each type using cell-based DGE analysis ## bind dataframes # do not include any cell types that identified 0 DEGS (e.g. OPC) bind_cell_based <- rbind(Astrocytes, DaN, Endothelial, Ependymal, Excitatory, GABA, Inhibitory, Microglia, Oligocendrocytes,Pericytes, all) ## define colours bind_cell_based$col[bind_cell_based$avg_log2FC > 0] <- \"indianred3\" bind_cell_based$col[bind_cell_based$avg_log2FC < 0] <- \"dodgerblue2\" bind_cell_based$col[bind_cell_based$avg_log2FC > 0 & bind_cell_based$p_val_adj < 0.05] <- \"red4\" bind_cell_based$col[bind_cell_based$avg_log2FC < 0 & bind_cell_based$p_val_adj < 0.05] <- \"navy\" bind_cell_based$direction[bind_cell_based$avg_log2FC > 0] <- \"up\" bind_cell_based$direction[bind_cell_based$avg_log2FC < 0] <- \"down\" ## plot cell_based_DEG_counts <- ggplot(bind_cell_based, aes(x = direction, fill = col)) + geom_bar() + theme_classic() + theme(axis.text.x = element_blank(), axis.text.y = element_text(size = 12), axis.ticks.x = element_blank(), strip.background = element_rect(colour=NA, fill=NA), strip.text = element_text(size = 12), legend.position = \"none\", axis.title.y = element_text(face=\"bold\", size = 12), axis.title.x = element_text(face=\"bold\", size = 12), plot.title = element_text(hjust = 0.5, face = \"bold\", size = 12)) + scale_fill_manual(values = c(\"dodgerblue2\", \"indianred3\", \"navy\",\"red4\")) + facet_wrap(~cell_type, ncol=12, strip.position = \"bottom\") + ylab(\"Number of DEGs\") + xlab(\"Cell type\") + scale_y_continuous(limits = c(0, 60)) + ggtitle (\"Cell-based: MAST\") cell_based_DEG_counts Figure 1. Number of DEGs identified by cell-based DGE analysis for each cell type. DEGs were calculated using cells as replicates and the MAST framework. Bar chart showing the number of DEGs identified with a log 2 fold-change < -1 (blue) and > 1 (red) and p-values < 0.05. Bonferroni adjusted p-values < 0.05 are indicated by the darker shade. 1.8. Compute number of DEGs identified for each cell type using sample-based DGE analysis ## bind dataframes bind_sample_based <- rbind(astro_sample, DaN_sample, endo_sample, ependymal_sample, excit_sample, GABA_sample, inhib_sample, mg_sample, Olig_sample, opc_sample, peri_sample, all_sample) ## define colours bind_sample_based$col[bind_sample_based$log2FoldChange > 0] <- \"indianred3\" bind_sample_based$col[bind_sample_based$log2FoldChange < 0] <- \"dodgerblue2\" bind_sample_based$col[bind_sample_based$log2FoldChange > 0 & bind_sample_based$padj < 0.05] <- \"red4\" bind_sample_based$col[bind_sample_based$log2FoldChange < 0 & bind_sample_based$padj < 0.05] <- \"navy\" bind_sample_based$direction[bind_sample_based$log2FoldChange > 0] <- \"up\" bind_sample_based$direction[bind_sample_based$log2FoldChange < 0] <- \"down\" ## rename cell types bind_sample_based$cell_type[bind_sample_based$cell_type == \"astro_sample\"] <- \"Astrocyte\" bind_sample_based$cell_type[bind_sample_based$cell_type == \"DaN_sample\"] <- \"DaN\" bind_sample_based$cell_type[bind_sample_based$cell_type == \"endo_sample\"] <- \"Endothelial\" bind_sample_based$cell_type[bind_sample_based$cell_type == \"ependymal_sample\"] <- \"Ependymal\" bind_sample_based$cell_type[bind_sample_based$cell_type == \"excit_sample\"] <- \"Excitatory\" bind_sample_based$cell_type[bind_sample_based$cell_type == \"GABA_sample\"] <- \"GABA\" bind_sample_based$cell_type[bind_sample_based$cell_type == \"inhib_sample\"] <- \"Inhibitory\" bind_sample_based$cell_type[bind_sample_based$cell_type == \"mg_sample\"] <- \"Microglia\" bind_sample_based$cell_type[bind_sample_based$cell_type == \"Olig_sample\"] <- \"Oligoden.\" bind_sample_based$cell_type[bind_sample_based$cell_type == \"opc_sample\"] <- \"OPC\" bind_sample_based$cell_type[bind_sample_based$cell_type == \"peri_sample\"] <- \"Pericyte\" bind_sample_based$cell_type[bind_sample_based$cell_type == \"all_sample\"] <- \"All Cells\" ## plot sample_based_DEG_counts <- ggplot(bind_sample_based, aes(x = direction, fill = col)) + geom_bar() + theme_classic() + theme(axis.text.x = element_blank(), axis.text.y = element_text(size = 12), axis.ticks.x = element_blank(), strip.background = element_rect(colour=NA, fill=NA), strip.text = element_text(size = 12), legend.position = \"none\", axis.title.y = element_text(face=\"bold\", size = 12), axis.title.x = element_text(face=\"bold\", size = 12), plot.title = element_text(hjust = 0.5, face = \"bold\", size = 12)) + scale_fill_manual(values = c(\"dodgerblue2\", \"indianred3\", \"navy\",\"red4\")) + facet_wrap(~cell_type, ncol=12, strip.position = \"bottom\") + ylab(\"Number of DEGs\") + xlab(\"Cell type\") + ggtitle (\"Sample-based: DESeq2\") sample_based_DEG_counts Figure 2. Number of DEGs identified by sample-based DGE analysis for each cell type. . DEGs were calculated using samples as replicates and the DESeq2 framework. Bar chart showing the number of DEGs identified with a log 2 fold-change < -1 (blue) and > 1 (red) and p-values < 0.05. Bonferroni adjusted p-values < 0.05 are indicated by the darker shade. 1.9. DEG overlap analysis ## list of cell-based dataframes cell_based_dfs <- list(Astrocytes, DaN, Endothelial, Ependymal, Excitatory, GABA, Inhibitory, Microglia, Oligocendrocytes, OPC, Pericytes, all) ## set names of named list names(cell_based_dfs) <- c('Astrocytes_CellBased', 'DaN_CellBased', 'Endothelial_CellBased', 'Ependymal_CellBased', 'Excitatory_CellBased', 'GABA_CellBased', 'Inhibitory_CellBased', 'Microglia_CellBased', 'Oligocendrocytes_CellBased', 'OPC_CellBased', 'Pericytes_CellBased', 'all_CellBased') ## list of sample-based dataframes sample_based_dfs <- list(astro_sample, DaN_sample, endo_sample, ependymal_sample, excit_sample, GABA_sample, inhib_sample, mg_sample, Olig_sample, opc_sample, peri_sample, all_sample) ## set names of named list names(sample_based_dfs) <- c('Astrocytes_SampleBased', 'DaN_SampleBased', 'Endothelial_SampleBased', 'Ependymal_SampleBased', 'Excitatory_SampleBased', 'GABA_SampleBased', 'Inhibitory_SampleBased', 'Microglia_SampleBased', 'Oligocendrocytes_SampleBased', 'OPC_SampleBased', 'Pericytes_SampleBased', 'all_SampleBased') ## combine the list combined_list <- append(cell_based_dfs,sample_based_dfs ) ## list of unique cell types cell_types <- unique(str_extract(names(combined_list), \"[^_]+\")) ## compute overlap list <- list() for (i in unique(cell_types)){ df <- data.frame(names(combined_list)) df$num <- rownames(df) df_lim <- df[grep(i, df$names.combined_list.), ] cell_num <- as.numeric(df_lim$num[grep(\"CellBased\", df_lim$names.combined_list.)]) sample_num <- as.numeric(df_lim$num[grep(\"SampleBased\", df_lim$names.combined_list.)]) cell <- data.frame(combined_list[as.numeric(cell_num)]) colnames(cell) <- c('X', 'p_val', 'avg_log2FC', 'p_val_adj', 'cell_type', 'method') sample <- data.frame(combined_list[as.numeric(sample_num)]) colnames(sample) <- c(\"X\", \"log2FoldChange\", \"pvalue\", \"padj\", \"cell_type\", \"method\" ) # both padjusted cell_temp <- cell$X[cell$p_val_adj <= 0.05] cell_temp <- cell_temp[!is.na(cell_temp)] sample_temp <- sample$X[sample$padj <= 0.05] sample_temp <- sample_temp[!is.na(sample_temp)] length_adj <- length(intersect(sample_temp, cell_temp)) # both pvalue cell_temp <- cell$X[cell$p_val <= 0.05] cell_temp <- cell_temp[!is.na(cell_temp)] sample_temp <- sample$X[sample$pvalue <= 0.05] sample_temp <- sample_temp[!is.na(sample_temp)] length_p <- length(intersect(sample_temp, cell_temp)) ## cell-based pvalue cell_temp <- cell$X cell_temp <- cell_temp[!is.na(cell_temp)] length_cell_base <- length(cell_temp) ## sample-based pvalue sample_temp <- sample$X sample_temp <- sample_temp[!is.na(sample_temp)] length_sample_base <- length(sample_temp) ## cell-based padjust cell_temp <- cell$X[cell$p_val_adj <= 0.05] cell_temp <- cell_temp[!is.na(cell_temp)] length_cell_adj <- length(cell_temp) ## sample-based padjust sample_temp <- sample$X[sample$padj <= 0.05] sample_temp <- sample_temp[!is.na(sample_temp)] length_sample_adj <- length(sample_temp) ## dataframe class <- c('AdjustedP_Overlap', 'P_Overlap', 'P_CellBased', 'P_SampleBased', 'AdjustedP_CellBased', 'AdjustedP_SampleBased') val <- c(length_adj,length_p,length_cell_base,length_sample_base, length_cell_adj,length_sample_adj) temp_df <- data.frame(class, val) temp_df$celltype <- i list[i] <- list(temp_df) } ## set list elements to dataframe list2env(list,envir=.GlobalEnv) ## bind dataframe df <- bind_rows(mget(cell_types)) ## set fator level df$class <- factor(df$class, levels = c(\"P_CellBased\", \"P_SampleBased\", \"P_Overlap\", \"AdjustedP_CellBased\", \"AdjustedP_SampleBased\", \"AdjustedP_Overlap\")) ## plot ggplot(df, aes(x = celltype, y = class, fill = val)) +geom_tile(col = \"black\", fill = \"white\") + theme_bw()+ geom_text(aes(label = val))+ theme( axis.text = element_text(size = 12), axis.title = element_text(size = 12, face = \"bold\"), legend.title = element_text(face = \"bold\"), axis.text.x = element_text(angle = 45, hjust = 1, colour = \"black\"), axis.text.y = element_text(colour = \"black\"))+ scale_colour_manual(values = c(\"black\", \"black\"), legend) + scale_y_discrete(expand = c(0,0)) + #labels = c(\"Pseudo-bulk: p-value < 0.05\", scale_x_discrete(expand = c(0,0)) + xlab(\"Cell Type\") + ylab(\"\") + guides(colour = \"none\") Figure 3. Number of DEG identified by cell-based DGE-MAST, sample-based DGE-DESeq2, or both frameworks across all cell types . Only DEGs with olg 2 fold-change < -1 and > 1 are included. 2. Cell-based DGE enrichment analysis 2.1. load cell-based all cells DEG file ## load DEG csv file all <- read.delim(\"/Users/mfiorini/Desktop/scRNA_pipeline/Manuscript/Manuscript_Figures/Smajic3/Step5/wilcoxon_all_cells/HCvPD/HCvPD_DEG.csv\", header = T, sep = \",\") 2.2. load cell-based cell type groups DEG files ## list of cell types used for DEG contrasts cell_based_cell_types <- c('Astrocytes', 'DaN', 'Endothelial', 'Ependymal', 'Excitatory', 'GABA', 'Inhibitory', 'Microglia', 'Oligocendrocytes', 'OPC', 'Pericytes') ## create empty list object list <- list() ## load DEG csv files for(i in unique(cell_based_cell_types)){ list[i] <- list(read.delim(paste0(\"/Users/mfiorini/Desktop/scRNA_pipeline/Manuscript/Manuscript_Figures/Smajic3/Step5/wilcoxon_celltype_groups/\", i,\"PDvHC/\",i,\"PDvHC_DEG.csv\"), header = T, sep = \",\")) } ## create data frame for each cell type list2env(list,envir=.GlobalEnv) 2.3. Clean up cell-based DEG files ## make list of cell type dataframe CellType_df <- list(Astrocytes, DaN, Endothelial, Ependymal, Excitatory, GABA, Inhibitory, Microglia, Oligocendrocytes, OPC, Pericytes, all) ## set names of list as cepp types names(CellType_df) <- c('Astrocytes', 'DaN', 'Endothelial', 'Ependymal', 'Excitatory', 'GABA', 'Inhibitory', 'Microglia', 'Oligocendrocytes', 'OPC', 'Pericytes', \"all\") ## list of columns that we want to keep cols_keep <- c(\"X\",\"p_val\",\"avg_log2FC\",\"p_val_adj\") ## process each dataframe to only keep DEGs with a p-value < 0.05 and log2FC > 1 list_CellBased <- list() for (i in unique(names(CellType_df))){ j <- data.frame(CellType_df[i]) colnames(j) <- c(\"X\", \"p_val\", \"avg_log2FC\", \"pct.1\", \"pct.2\", \"p_val_adj\") j <- j[,colnames(j) %in% cols_keep] j <- subset(j, p_val <= 0.05) j <- subset(j, avg_log2FC >= 1 | avg_log2FC <= -1) if (nrow(j > 0)){ j$cell_type <- paste0(i) j$method <- \"cell_based\" list_CellBased[i] <- list(j) }else{ print(paste0(\"did not find any DEGs for \", i)) } list_CellBased[i] } ## create data frame for each cell type list2env(list_CellBased,envir=.GlobalEnv) 2.4. EnrichR: Cell type groups ## do not run enrichr for all cell types test <- data.frame(names(list_CellBased)) test <- test %>% filter(!grepl('all', names.list_CellBased.)) cell_type_num <- as.numeric(rownames(test)) ## create empty list CellBased_gse_list <- list() ## GSE loop for (i in cell_type_num){ ## create cell type specific dataframe j <- data.frame(list_CellBased[i]) colnames(j) <- c('X', 'p_val', 'avg_log2FC', 'p_val_adj', 'cell_type', 'method') ## we want the log2 fold change gene_list <- j$avg_log2FC ## assign gene to log2fc names(gene_list) <- j$X ## omit any NA values gene_list<-na.omit(gene_list) ## sort the list in decreasing order gene_list = sort(gene_list, decreasing = TRUE) ## perform gseGO gse_bulk<- gseGO(geneList=gene_list, ont =\"BP\", keyType = \"SYMBOL\", nPerm = 1000, minGSSize = 3, maxGSSize = 800, pvalueCutoff = 1.00, verbose = TRUE, OrgDb = organism, pAdjustMethod = \"none\") ## organize results if (nrow(gse_bulk@result) > 0){ ## count the gene number gene_count<- gse_bulk@result %>% group_by(ID) %>% summarise(count = sum(str_count(core_enrichment, \"/\")) + 1) ## merge with the original dataframe dot_df<- left_join(gse_bulk@result, gene_count, by = \"ID\") %>% mutate(GeneRatio = count/setSize) dot_df <- dot_df[order(dot_df$pvalue),] dot_df$Celltype <- names(list_CellBased[i]) ## store in list CellBased_gse_list[i] <- list(dot_df) }else{ print(paste0('no term enriched under specific pvalueCutoff for ',names(list_CellBased[i]))) } } ## remove NULL (cell types with no enrichment results) CellBased_gse_list <- CellBased_gse_list[!sapply(CellBased_gse_list,is.null)] ## set names of list element to cell types names <- list() for (i in 1:length(CellBased_gse_list)){ j <- data.frame(CellBased_gse_list[i]) names[i] <- unique(j$Celltype) } names(CellBased_gse_list) <- names ## set to dataframe list2env(CellBased_gse_list,envir=.GlobalEnv) 2.5. EnrichR: All cells ## retrieve logFC original_gene_list <- all$avg_log2FC ## assign logFC to gene names(original_gene_list) <- all$X ## omit any NA values gene_list<-na.omit(original_gene_list) ## sort the list in decreasing order gene_list = sort(gene_list, decreasing = TRUE) ## perform gseGO gse_all<- gseGO(geneList=gene_list, ont =\"BP\", keyType = \"SYMBOL\", nPerm = 1000, minGSSize = 3, maxGSSize = 800, pvalueCutoff = 1.00, verbose = TRUE, OrgDb = organism, pAdjustMethod = \"none\") ## count the gene number gene_count<- gse_all@result %>% group_by(ID) %>% summarise(count = sum(str_count(core_enrichment, \"/\")) + 1) ## merge with the original dataframe dot_df<- left_join(gse_all@result, gene_count, by = \"ID\") %>% mutate(GeneRatio = count/setSize) ## Take 5 most significantly enriched terms dot_df <- dot_df[order(dot_df$pvalue),] all_terms <- dot_df$Description[c(1:5)] dot_df_all <- dot_df dot_df_all$Celltype <- \"all\" 2.6. Plot GSE result for cell-based DEG ## bind cell type dataframes namesX <- unlist(names) df <- bind_rows(mget(namesX)) ## bind celltype dataframe with all cells df_total <- rbind(df, dot_df_all) ## subset to only inlclude top GSE terms from all cells df_total <- subset(df_total, Description %in% all_terms) length(unique(df_total$Description)) ## [1] 5 ## rename cell type names df_total$Celltype[df_total$Celltype == \"all\"] <- \"All cells\" df_total$Celltype[df_total$Celltype == \"Oligodendrocytes\"] <- \"Oligoden.\" ## plot gse_CellBased<- ggplot(df_total, aes(x = GeneRatio, y=Description)) + geom_point(aes(size = count, color = pvalue)) + theme_bw() + theme(strip.background = element_rect(colour=NA, fill=NA), strip.text = element_text(size = 12), plot.title = element_text(hjust = 0.5, face = \"bold\"), axis.title.x = element_text(size = 12, face = \"bold\"), axis.text.y = element_text(size = 10), axis.text.x = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 12)) + scale_colour_gradient( low=\"red\", limits=c(0.0,1)) + facet_wrap(~Celltype, ncol=12) + ylab(NULL) + ggtitle(\"Cell-based: MAST\")+ scale_x_continuous(limits=c(0.1,1), labels = c(\"0.0\",\"\", \"0.5\",\"\", \"1.0\")) gse_CellBased Figure 4. Cell-based DGE: Enrichment of the top 5 GO terms for GO-Biological Processes calculated for all cell types together across cell types. DEGs with p-values < 0.05 and log 2 fold-change < -1 and > 1 were used as the input for gene set enrichment analysis. The gene ratio, gene count, and p-value of the five terms in each cell type are shown. 3. Sample-based DGE enrichment analysis 3.1. load sample-based all cells DEG file ## load DEG csv file all_sample <- read.delim(\"/Users/mfiorini/Desktop/scRNA_pipeline/Manuscript/Manuscript_Figures/Smajic3/Step5/pseudo_bulk_all_cells/PDvControl/DGE_AllCellsMainContrast HC vs PD.csv\", header = T, sep = \",\") 3.2. load sample-based cell type groups DEG files ## list of cell types used for DEG contrasts sample_based_cell_types <- c('astro', 'DaN', 'endo', 'ependymal', 'excit', 'GABA', 'inhib', 'mg', 'Olig', 'opc', 'peri') ## create empty list object list <- list() ## load DEG csv files for(i in unique(sample_based_cell_types)){ list[paste0(i,\"_sample\")] <- list(read.delim(paste0(\"/Users/mfiorini/Desktop/scRNA_pipeline/Manuscript/Manuscript_Figures/Smajic3/Step5/pseudo_bulk_celltype_groups/PDvControlbulk/info/DGE_\",i,\"MainContrast HC vs PD.csv\"), header = T, sep = \",\")) } ## create data frame for each cell type list2env(list,envir=.GlobalEnv) 3.3. Clean up sample-based DEG files ## make list of cell type dataframe CellType_df <- list(astro_sample, DaN_sample, endo_sample, ependymal_sample, excit_sample, GABA_sample, inhib_sample, mg_sample, Olig_sample, opc_sample, peri_sample, all_sample) ## set names of list as cepp types names(CellType_df) <- c('astro_sample', 'DaN_sample', 'endo_sample', 'ependymal_sample', 'excit_sample', 'GABA_sample', 'inhib_sample', 'mg_sample', 'Olig_sample', 'opc_sample', 'peri_sample', \"all_sample\") ## list of columns that we want to keep cols_keep <- c(\"X\",\"pvalue\",\"log2FoldChange\",\"padj\") ## process each dataframe to only keep DEGs with a p-value < 0.05 log2FC > 1 list_SampleBased <- list() for (i in unique(names(CellType_df))){ j <- data.frame(CellType_df[i]) colnames(j) <- c('X', 'baseMean', 'log2FoldChange', 'lfcSE' ,'stat', 'pvalue', 'padj') j <- j[,colnames(j) %in% cols_keep] j <- subset(j, pvalue <= 0.05) j <- subset(j, log2FoldChange >= 1 | log2FoldChange <= -1) if (nrow(j > 0)){ j$cell_type <- paste0(i) j$method <- \"sample_based\" list_SampleBased[i] <- list(j) }else{ print(paste0(\"did not find any DEGs for \", i)) } list_SampleBased[i] } ## create data frame for each cell type list2env(list_SampleBased,envir=.GlobalEnv) ## <environment: R_GlobalEnv> 3.4. EnrichR: Cell type groups ## do not run enrichr for all cell types test <- data.frame(names(list_SampleBased)) test <- test %>% filter(!grepl('all', list_SampleBased)) cell_type_num <- as.numeric(rownames(test)) ## create empty list SampleBased_gse_list <- list() ## GSE loop for (i in cell_type_num){ ## create cell type specific dataframe j <- data.frame(list_SampleBased[i]) colnames(j) <- c('X', 'log2FoldChange', 'pvalue', 'padj', 'cell_type', 'method') ## we want the log2 fold change gene_list <- j$log2FoldChange ## assign gene to log2fc names(gene_list) <- j$X ## omit any NA values gene_list<-na.omit(gene_list) ## sort the list in decreasing order gene_list = sort(gene_list, decreasing = TRUE) ## perform gseGO gse_bulk<- gseGO(geneList=gene_list, ont =\"BP\", keyType = \"SYMBOL\", nPerm = 1000, minGSSize = 3, maxGSSize = 800, pvalueCutoff = 1.00, verbose = TRUE, OrgDb = organism, pAdjustMethod = \"none\") ## organize results if (nrow(gse_bulk@result) > 0){ ## count the gene number gene_count<- gse_bulk@result %>% group_by(ID) %>% summarise(count = sum(str_count(core_enrichment, \"/\")) + 1) ## merge with the original dataframe dot_df<- left_join(gse_bulk@result, gene_count, by = \"ID\") %>% mutate(GeneRatio = count/setSize) dot_df <- dot_df[order(dot_df$pvalue),] dot_df$Celltype <- names(list_SampleBased[i]) ## store in list SampleBased_gse_list[i] <- list(dot_df) }else{ print(paste0('no term enriched under specific pvalueCutoff for ',names(list_SampleBased[i]))) } } ## remove NULL (cell types with no enrichment results) SampleBased_gse_list <- SampleBased_gse_list[!sapply(SampleBased_gse_list,is.null)] ## set names of list element to cell types names <- list() for (i in 1:length(SampleBased_gse_list)){ j <- data.frame(SampleBased_gse_list[i]) names[i] <- unique(j$Celltype) } names(SampleBased_gse_list) <- names ## set to dataframe list2env(SampleBased_gse_list,envir=.GlobalEnv) ## <environment: R_GlobalEnv> 3.5. EnrichR: All cells ## retrieve logFC original_gene_list <- all_sample$log2FoldChange ## assign logFC to gene names(original_gene_list) <- all_sample$X ## omit any NA values gene_list<-na.omit(original_gene_list) ## sort the list in decreasing order gene_list = sort(gene_list, decreasing = TRUE) ## perform gseGO gse_all<- gseGO(geneList=gene_list, ont =\"BP\", keyType = \"SYMBOL\", nPerm = 1000, minGSSize = 3, maxGSSize = 800, pvalueCutoff = 1.00, verbose = TRUE, OrgDb = organism, pAdjustMethod = \"none\") ## count the gene number gene_count<- gse_all@result %>% group_by(ID) %>% summarise(count = sum(str_count(core_enrichment, \"/\")) + 1) ## merge with the original dataframe dot_df<- left_join(gse_all@result, gene_count, by = \"ID\") %>% mutate(GeneRatio = count/setSize) ## Take 5 most significantly enriched terms dot_df <- dot_df[order(dot_df$pvalue),] all_terms <- dot_df$Description[c(1:5)] dot_df_all <- dot_df dot_df_all$Celltype <- \"all\" 3.6. Plot GSE result for cell-based DEG ## bind cell type dataframes namesX <- unlist(names) df <- bind_rows(mget(namesX)) ## bind celltype dataframe with all cells df_total <- rbind(df, dot_df_all) ## subset to only inlclude top GSE terms from all cells df_total <- subset(df_total, Description %in% all_terms) length(unique(df_total$Description)) ## rename cell type names df_total$Celltype[df_total$Celltype == \"all\"] <- \"All cells\" df_total$Celltype[df_total$Celltype == \"DaN_sample\"] <- \"DaN\" df_total$Celltype[df_total$Celltype == \"endo_sample\"] <- \"Endothelial\" df_total$Celltype[df_total$Celltype == \"ependymal_sample\"] <- \"Ependymal\" df_total$Celltype[df_total$Celltype == \"excit_sample\"] <- \"Excitatory\" df_total$Celltype[df_total$Celltype == \"GABA_sample\"] <- \"GABA\" df_total$Celltype[df_total$Celltype == \"inhib_sample\"] <- \"Inhibitory\" df_total$Celltype[df_total$Celltype == \"mg_sample\"] <- \"Microglia\" df_total$Celltype[df_total$Celltype == \"Olig_sample\"] <- \"Oligoden.\" df_total$Celltype[df_total$Celltype == \"opc_sample\"] <- \"OPC\" df_total$Celltype[df_total$Celltype == \"peri_sample\"] <- \"Pericytes\" df_total$Celltype[df_total$Celltype == \"astro_sample\"] <- \"Astrocyte\" ## plot gse_CellBased<- ggplot(df_total, aes(x = GeneRatio, y=Description)) + geom_point(aes(size = count, color = pvalue)) + theme_bw() + theme(strip.background = element_rect(colour=NA, fill=NA), strip.text = element_text(size = 12), plot.title = element_text(hjust = 0.5, face = \"bold\"), axis.title.x = element_text(size = 12, face = \"bold\"), axis.text.y = element_text(size = 10), axis.text.x = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 12)) + scale_colour_gradient( low=\"red\", limits=c(0.0,1)) + facet_wrap(~Celltype, ncol=12) + ylab(NULL) + ggtitle(\"Sample-based: DESeq2\")+ scale_x_continuous(limits=c(0.1,1), labels = c(\"0.0\",\"\", \"0.5\",\"\", \"1.0\")) gse_CellBased Figure 5. Sample-based DGE: Enrichment of the top 5 GO terms for GO-Biological Processes calculated for all cell types together across cell types. DEGs with p-values < 0.05 and log 2 fold-change < -1 and > 1 were used as the input for gene set enrichment analysis. The gene ratio, gene count, and p-value of the five terms in each cell type are shown.","title":"Analysis of DGE outputs"},{"location":"DEG/#analysis-of-dge-outputs","text":"This tutorial provides the code used for producing Figure 5 of our pre-print manuscript ; downstream analyses of the differential gene expression (DGE) results for the midbrain dataset ( Smajic et al. 2022 ). The tutorial can be broken down into three sections: DEG summary Cell-based DGE enrichment analysis Sample-based DGE enrichment analysis . The outputs from Step 8 of the scRNAbox analuysis of the midbrain dataset tutorial are used as input.","title":"Analysis of DGE outputs"},{"location":"DEG/#set-up","text":"Set seed set.seed(1234) Load libraries library(ggrepel) library(ggplot2) library(stringr) BiocManager::install(\"clusterProfiler\") BiocManager::install(\"pathview\") BiocManager::install(\"enrichplot\") library(clusterProfiler) library(enrichplot) organism = \"org.Hs.eg.db\" BiocManager::install(organism, character.only = TRUE) library(organism, character.only = TRUE) require(DOSE) library(stringr) library(dplyr)","title":"Set up"},{"location":"DEG/#1-deg-summary","text":"","title":"1. DEG summary"},{"location":"DEG/#11-load-cell-based-all-cells-deg-file","text":"## load DEG csv file all <- read.delim(\"/Users/mfiorini/Desktop/scRNA_pipeline/Manuscript/Manuscript_Figures/Smajic3/Step5/wilcoxon_all_cells/HCvPD/HCvPD_DEG.csv\", header = T, sep = \",\")","title":"1.1. load cell-based all cells DEG file"},{"location":"DEG/#12-load-cell-based-cell-type-groups-deg-files","text":"## list of cell types used for DEG contrasts cell_based_cell_types <- c('Astrocytes', 'DaN', 'Endothelial', 'Ependymal', 'Excitatory', 'GABA', 'Inhibitory', 'Microglia', 'Oligocendrocytes', 'OPC', 'Pericytes') ## create empty list object list <- list() ## load DEG csv files for(i in unique(cell_based_cell_types)){ list[i] <- list(read.delim(paste0(\"/Users/mfiorini/Desktop/scRNA_pipeline/Manuscript/Manuscript_Figures/Smajic3/Step5/wilcoxon_celltype_groups/\", i,\"PDvHC/\",i,\"PDvHC_DEG.csv\"), header = T, sep = \",\")) } ## create data frame for each cell type list2env(list,envir=.GlobalEnv)","title":"1.2. load cell-based cell type groups DEG files"},{"location":"DEG/#13-load-sample-based-all-cells-deg-file","text":"## load DEG csv file all_sample <- read.delim(\"/Users/mfiorini/Desktop/scRNA_pipeline/Manuscript/Manuscript_Figures/Smajic3/Step5/pseudo_bulk_all_cells/PDvControl/DGE_AllCellsMainContrast HC vs PD.csv\", header = T, sep = \",\")","title":"1.3. load sample-based all cells DEG file"},{"location":"DEG/#14-load-sample-based-cell-type-groups-deg-files","text":"## list of cell types used for DEG contrasts sample_based_cell_types <- c('astro', 'DaN', 'endo', 'ependymal', 'excit', 'GABA', 'inhib', 'mg', 'Olig', 'opc', 'peri') ## create empty list object list <- list() ## load DEG csv files for(i in unique(sample_based_cell_types)){ list[paste0(i,\"_sample\")] <- list(read.delim(paste0(\"/Users/mfiorini/Desktop/scRNA_pipeline/Manuscript/Manuscript_Figures/Smajic3/Step5/pseudo_bulk_celltype_groups/PDvControlbulk/info/DGE_\",i,\"MainContrast HC vs PD.csv\"), header = T, sep = \",\")) } ## create data frame for each cell type list2env(list,envir=.GlobalEnv)","title":"1.4. load sample-based cell type groups DEG files"},{"location":"DEG/#15-clean-up-cell-based-deg-files","text":"## make list of cell type dataframes CellType_df <- list(Astrocytes, DaN, Endothelial, Ependymal, Excitatory, GABA, Inhibitory, Microglia, Oligocendrocytes, OPC, Pericytes, all) ## set names of list as cell types names(CellType_df) <- c('Astrocytes', 'DaN', 'Endothelial', 'Ependymal', 'Excitatory', 'GABA', 'Inhibitory', 'Microglia', 'Oligocendrocytes', 'OPC', 'Pericytes', \"all\") ## list of columns that we want to keep cols_keep <- c(\"X\",\"p_val\",\"avg_log2FC\",\"p_val_adj\") ## process each dataframe to only keep DEGs with a p-value < 0.05 and log2FC > 1 or < -1 list <- list() for (i in unique(names(CellType_df))){ j <- data.frame(CellType_df[i]) colnames(j) <- c(\"X\", \"p_val\", \"avg_log2FC\", \"pct.1\", \"pct.2\", \"p_val_adj\") j <- j[,colnames(j) %in% cols_keep] j <- subset(j, p_val <= 0.05) j <- subset(j, avg_log2FC >= 1 | avg_log2FC <= -1) if (nrow(j > 0)){ j$cell_type <- paste0(i) j$method <- \"cell_based\" list[i] <- list(j) }else{ print(paste0(\"did not find any DEGs for \", i)) } list[i] } ## create data frame for each cell type list2env(list,envir=.GlobalEnv)","title":"1.5. Clean up cell-based DEG files"},{"location":"DEG/#16-clean-up-sample-based-deg-files","text":"## make list of cell type dataframes CellType_df <- list(astro_sample, DaN_sample, endo_sample, ependymal_sample, excit_sample, GABA_sample, inhib_sample, mg_sample, Olig_sample, opc_sample, peri_sample, all_sample) ## set names of list as cell types names(CellType_df) <- c('astro_sample', 'DaN_sample', 'endo_sample', 'ependymal_sample', 'excit_sample', 'GABA_sample', 'inhib_sample', 'mg_sample', 'Olig_sample', 'opc_sample', 'peri_sample', \"all_sample\") ## list of columns that we want to keep cols_keep <- c(\"X\",\"pvalue\",\"log2FoldChange\",\"padj\") ## process each dataframe to only keep DEGs with a p-value and log2FC > 1 or < -1 list <- list() for (i in unique(names(CellType_df))){ j <- data.frame(CellType_df[i]) colnames(j) <- c('X', 'baseMean', 'log2FoldChange', 'lfcSE' ,'stat', 'pvalue', 'padj') j <- j[,colnames(j) %in% cols_keep] j <- subset(j, pvalue <= 0.05) j <- subset(j, log2FoldChange >= 1 | log2FoldChange <= -1) if (nrow(j > 0)){ j$cell_type <- paste0(i) j$method <- \"sample_based\" list[i] <- list(j) }else{ print(paste0(\"did not find any DEGs for \", i)) } list[i] } ## create data frame for each cell type list2env(list,envir=.GlobalEnv)","title":"1.6. Clean up sample-based DEG files"},{"location":"DEG/#17-compute-number-of-degs-identified-for-each-type-using-cell-based-dge-analysis","text":"## bind dataframes # do not include any cell types that identified 0 DEGS (e.g. OPC) bind_cell_based <- rbind(Astrocytes, DaN, Endothelial, Ependymal, Excitatory, GABA, Inhibitory, Microglia, Oligocendrocytes,Pericytes, all) ## define colours bind_cell_based$col[bind_cell_based$avg_log2FC > 0] <- \"indianred3\" bind_cell_based$col[bind_cell_based$avg_log2FC < 0] <- \"dodgerblue2\" bind_cell_based$col[bind_cell_based$avg_log2FC > 0 & bind_cell_based$p_val_adj < 0.05] <- \"red4\" bind_cell_based$col[bind_cell_based$avg_log2FC < 0 & bind_cell_based$p_val_adj < 0.05] <- \"navy\" bind_cell_based$direction[bind_cell_based$avg_log2FC > 0] <- \"up\" bind_cell_based$direction[bind_cell_based$avg_log2FC < 0] <- \"down\" ## plot cell_based_DEG_counts <- ggplot(bind_cell_based, aes(x = direction, fill = col)) + geom_bar() + theme_classic() + theme(axis.text.x = element_blank(), axis.text.y = element_text(size = 12), axis.ticks.x = element_blank(), strip.background = element_rect(colour=NA, fill=NA), strip.text = element_text(size = 12), legend.position = \"none\", axis.title.y = element_text(face=\"bold\", size = 12), axis.title.x = element_text(face=\"bold\", size = 12), plot.title = element_text(hjust = 0.5, face = \"bold\", size = 12)) + scale_fill_manual(values = c(\"dodgerblue2\", \"indianred3\", \"navy\",\"red4\")) + facet_wrap(~cell_type, ncol=12, strip.position = \"bottom\") + ylab(\"Number of DEGs\") + xlab(\"Cell type\") + scale_y_continuous(limits = c(0, 60)) + ggtitle (\"Cell-based: MAST\") cell_based_DEG_counts Figure 1. Number of DEGs identified by cell-based DGE analysis for each cell type. DEGs were calculated using cells as replicates and the MAST framework. Bar chart showing the number of DEGs identified with a log 2 fold-change < -1 (blue) and > 1 (red) and p-values < 0.05. Bonferroni adjusted p-values < 0.05 are indicated by the darker shade.","title":"1.7. Compute number of DEGs identified for each type using cell-based DGE analysis"},{"location":"DEG/#18-compute-number-of-degs-identified-for-each-cell-type-using-sample-based-dge-analysis","text":"## bind dataframes bind_sample_based <- rbind(astro_sample, DaN_sample, endo_sample, ependymal_sample, excit_sample, GABA_sample, inhib_sample, mg_sample, Olig_sample, opc_sample, peri_sample, all_sample) ## define colours bind_sample_based$col[bind_sample_based$log2FoldChange > 0] <- \"indianred3\" bind_sample_based$col[bind_sample_based$log2FoldChange < 0] <- \"dodgerblue2\" bind_sample_based$col[bind_sample_based$log2FoldChange > 0 & bind_sample_based$padj < 0.05] <- \"red4\" bind_sample_based$col[bind_sample_based$log2FoldChange < 0 & bind_sample_based$padj < 0.05] <- \"navy\" bind_sample_based$direction[bind_sample_based$log2FoldChange > 0] <- \"up\" bind_sample_based$direction[bind_sample_based$log2FoldChange < 0] <- \"down\" ## rename cell types bind_sample_based$cell_type[bind_sample_based$cell_type == \"astro_sample\"] <- \"Astrocyte\" bind_sample_based$cell_type[bind_sample_based$cell_type == \"DaN_sample\"] <- \"DaN\" bind_sample_based$cell_type[bind_sample_based$cell_type == \"endo_sample\"] <- \"Endothelial\" bind_sample_based$cell_type[bind_sample_based$cell_type == \"ependymal_sample\"] <- \"Ependymal\" bind_sample_based$cell_type[bind_sample_based$cell_type == \"excit_sample\"] <- \"Excitatory\" bind_sample_based$cell_type[bind_sample_based$cell_type == \"GABA_sample\"] <- \"GABA\" bind_sample_based$cell_type[bind_sample_based$cell_type == \"inhib_sample\"] <- \"Inhibitory\" bind_sample_based$cell_type[bind_sample_based$cell_type == \"mg_sample\"] <- \"Microglia\" bind_sample_based$cell_type[bind_sample_based$cell_type == \"Olig_sample\"] <- \"Oligoden.\" bind_sample_based$cell_type[bind_sample_based$cell_type == \"opc_sample\"] <- \"OPC\" bind_sample_based$cell_type[bind_sample_based$cell_type == \"peri_sample\"] <- \"Pericyte\" bind_sample_based$cell_type[bind_sample_based$cell_type == \"all_sample\"] <- \"All Cells\" ## plot sample_based_DEG_counts <- ggplot(bind_sample_based, aes(x = direction, fill = col)) + geom_bar() + theme_classic() + theme(axis.text.x = element_blank(), axis.text.y = element_text(size = 12), axis.ticks.x = element_blank(), strip.background = element_rect(colour=NA, fill=NA), strip.text = element_text(size = 12), legend.position = \"none\", axis.title.y = element_text(face=\"bold\", size = 12), axis.title.x = element_text(face=\"bold\", size = 12), plot.title = element_text(hjust = 0.5, face = \"bold\", size = 12)) + scale_fill_manual(values = c(\"dodgerblue2\", \"indianred3\", \"navy\",\"red4\")) + facet_wrap(~cell_type, ncol=12, strip.position = \"bottom\") + ylab(\"Number of DEGs\") + xlab(\"Cell type\") + ggtitle (\"Sample-based: DESeq2\") sample_based_DEG_counts Figure 2. Number of DEGs identified by sample-based DGE analysis for each cell type. . DEGs were calculated using samples as replicates and the DESeq2 framework. Bar chart showing the number of DEGs identified with a log 2 fold-change < -1 (blue) and > 1 (red) and p-values < 0.05. Bonferroni adjusted p-values < 0.05 are indicated by the darker shade.","title":"1.8. Compute number of DEGs identified for each cell type using sample-based DGE analysis"},{"location":"DEG/#19-deg-overlap-analysis","text":"## list of cell-based dataframes cell_based_dfs <- list(Astrocytes, DaN, Endothelial, Ependymal, Excitatory, GABA, Inhibitory, Microglia, Oligocendrocytes, OPC, Pericytes, all) ## set names of named list names(cell_based_dfs) <- c('Astrocytes_CellBased', 'DaN_CellBased', 'Endothelial_CellBased', 'Ependymal_CellBased', 'Excitatory_CellBased', 'GABA_CellBased', 'Inhibitory_CellBased', 'Microglia_CellBased', 'Oligocendrocytes_CellBased', 'OPC_CellBased', 'Pericytes_CellBased', 'all_CellBased') ## list of sample-based dataframes sample_based_dfs <- list(astro_sample, DaN_sample, endo_sample, ependymal_sample, excit_sample, GABA_sample, inhib_sample, mg_sample, Olig_sample, opc_sample, peri_sample, all_sample) ## set names of named list names(sample_based_dfs) <- c('Astrocytes_SampleBased', 'DaN_SampleBased', 'Endothelial_SampleBased', 'Ependymal_SampleBased', 'Excitatory_SampleBased', 'GABA_SampleBased', 'Inhibitory_SampleBased', 'Microglia_SampleBased', 'Oligocendrocytes_SampleBased', 'OPC_SampleBased', 'Pericytes_SampleBased', 'all_SampleBased') ## combine the list combined_list <- append(cell_based_dfs,sample_based_dfs ) ## list of unique cell types cell_types <- unique(str_extract(names(combined_list), \"[^_]+\")) ## compute overlap list <- list() for (i in unique(cell_types)){ df <- data.frame(names(combined_list)) df$num <- rownames(df) df_lim <- df[grep(i, df$names.combined_list.), ] cell_num <- as.numeric(df_lim$num[grep(\"CellBased\", df_lim$names.combined_list.)]) sample_num <- as.numeric(df_lim$num[grep(\"SampleBased\", df_lim$names.combined_list.)]) cell <- data.frame(combined_list[as.numeric(cell_num)]) colnames(cell) <- c('X', 'p_val', 'avg_log2FC', 'p_val_adj', 'cell_type', 'method') sample <- data.frame(combined_list[as.numeric(sample_num)]) colnames(sample) <- c(\"X\", \"log2FoldChange\", \"pvalue\", \"padj\", \"cell_type\", \"method\" ) # both padjusted cell_temp <- cell$X[cell$p_val_adj <= 0.05] cell_temp <- cell_temp[!is.na(cell_temp)] sample_temp <- sample$X[sample$padj <= 0.05] sample_temp <- sample_temp[!is.na(sample_temp)] length_adj <- length(intersect(sample_temp, cell_temp)) # both pvalue cell_temp <- cell$X[cell$p_val <= 0.05] cell_temp <- cell_temp[!is.na(cell_temp)] sample_temp <- sample$X[sample$pvalue <= 0.05] sample_temp <- sample_temp[!is.na(sample_temp)] length_p <- length(intersect(sample_temp, cell_temp)) ## cell-based pvalue cell_temp <- cell$X cell_temp <- cell_temp[!is.na(cell_temp)] length_cell_base <- length(cell_temp) ## sample-based pvalue sample_temp <- sample$X sample_temp <- sample_temp[!is.na(sample_temp)] length_sample_base <- length(sample_temp) ## cell-based padjust cell_temp <- cell$X[cell$p_val_adj <= 0.05] cell_temp <- cell_temp[!is.na(cell_temp)] length_cell_adj <- length(cell_temp) ## sample-based padjust sample_temp <- sample$X[sample$padj <= 0.05] sample_temp <- sample_temp[!is.na(sample_temp)] length_sample_adj <- length(sample_temp) ## dataframe class <- c('AdjustedP_Overlap', 'P_Overlap', 'P_CellBased', 'P_SampleBased', 'AdjustedP_CellBased', 'AdjustedP_SampleBased') val <- c(length_adj,length_p,length_cell_base,length_sample_base, length_cell_adj,length_sample_adj) temp_df <- data.frame(class, val) temp_df$celltype <- i list[i] <- list(temp_df) } ## set list elements to dataframe list2env(list,envir=.GlobalEnv) ## bind dataframe df <- bind_rows(mget(cell_types)) ## set fator level df$class <- factor(df$class, levels = c(\"P_CellBased\", \"P_SampleBased\", \"P_Overlap\", \"AdjustedP_CellBased\", \"AdjustedP_SampleBased\", \"AdjustedP_Overlap\")) ## plot ggplot(df, aes(x = celltype, y = class, fill = val)) +geom_tile(col = \"black\", fill = \"white\") + theme_bw()+ geom_text(aes(label = val))+ theme( axis.text = element_text(size = 12), axis.title = element_text(size = 12, face = \"bold\"), legend.title = element_text(face = \"bold\"), axis.text.x = element_text(angle = 45, hjust = 1, colour = \"black\"), axis.text.y = element_text(colour = \"black\"))+ scale_colour_manual(values = c(\"black\", \"black\"), legend) + scale_y_discrete(expand = c(0,0)) + #labels = c(\"Pseudo-bulk: p-value < 0.05\", scale_x_discrete(expand = c(0,0)) + xlab(\"Cell Type\") + ylab(\"\") + guides(colour = \"none\") Figure 3. Number of DEG identified by cell-based DGE-MAST, sample-based DGE-DESeq2, or both frameworks across all cell types . Only DEGs with olg 2 fold-change < -1 and > 1 are included.","title":"1.9. DEG overlap analysis"},{"location":"DEG/#2-cell-based-dge-enrichment-analysis","text":"","title":"2. Cell-based DGE enrichment analysis"},{"location":"DEG/#21-load-cell-based-all-cells-deg-file","text":"## load DEG csv file all <- read.delim(\"/Users/mfiorini/Desktop/scRNA_pipeline/Manuscript/Manuscript_Figures/Smajic3/Step5/wilcoxon_all_cells/HCvPD/HCvPD_DEG.csv\", header = T, sep = \",\")","title":"2.1. load cell-based all cells DEG file"},{"location":"DEG/#22-load-cell-based-cell-type-groups-deg-files","text":"## list of cell types used for DEG contrasts cell_based_cell_types <- c('Astrocytes', 'DaN', 'Endothelial', 'Ependymal', 'Excitatory', 'GABA', 'Inhibitory', 'Microglia', 'Oligocendrocytes', 'OPC', 'Pericytes') ## create empty list object list <- list() ## load DEG csv files for(i in unique(cell_based_cell_types)){ list[i] <- list(read.delim(paste0(\"/Users/mfiorini/Desktop/scRNA_pipeline/Manuscript/Manuscript_Figures/Smajic3/Step5/wilcoxon_celltype_groups/\", i,\"PDvHC/\",i,\"PDvHC_DEG.csv\"), header = T, sep = \",\")) } ## create data frame for each cell type list2env(list,envir=.GlobalEnv)","title":"2.2. load cell-based cell type groups DEG files"},{"location":"DEG/#23-clean-up-cell-based-deg-files","text":"## make list of cell type dataframe CellType_df <- list(Astrocytes, DaN, Endothelial, Ependymal, Excitatory, GABA, Inhibitory, Microglia, Oligocendrocytes, OPC, Pericytes, all) ## set names of list as cepp types names(CellType_df) <- c('Astrocytes', 'DaN', 'Endothelial', 'Ependymal', 'Excitatory', 'GABA', 'Inhibitory', 'Microglia', 'Oligocendrocytes', 'OPC', 'Pericytes', \"all\") ## list of columns that we want to keep cols_keep <- c(\"X\",\"p_val\",\"avg_log2FC\",\"p_val_adj\") ## process each dataframe to only keep DEGs with a p-value < 0.05 and log2FC > 1 list_CellBased <- list() for (i in unique(names(CellType_df))){ j <- data.frame(CellType_df[i]) colnames(j) <- c(\"X\", \"p_val\", \"avg_log2FC\", \"pct.1\", \"pct.2\", \"p_val_adj\") j <- j[,colnames(j) %in% cols_keep] j <- subset(j, p_val <= 0.05) j <- subset(j, avg_log2FC >= 1 | avg_log2FC <= -1) if (nrow(j > 0)){ j$cell_type <- paste0(i) j$method <- \"cell_based\" list_CellBased[i] <- list(j) }else{ print(paste0(\"did not find any DEGs for \", i)) } list_CellBased[i] } ## create data frame for each cell type list2env(list_CellBased,envir=.GlobalEnv)","title":"2.3. Clean up cell-based DEG files"},{"location":"DEG/#24-enrichr-cell-type-groups","text":"## do not run enrichr for all cell types test <- data.frame(names(list_CellBased)) test <- test %>% filter(!grepl('all', names.list_CellBased.)) cell_type_num <- as.numeric(rownames(test)) ## create empty list CellBased_gse_list <- list() ## GSE loop for (i in cell_type_num){ ## create cell type specific dataframe j <- data.frame(list_CellBased[i]) colnames(j) <- c('X', 'p_val', 'avg_log2FC', 'p_val_adj', 'cell_type', 'method') ## we want the log2 fold change gene_list <- j$avg_log2FC ## assign gene to log2fc names(gene_list) <- j$X ## omit any NA values gene_list<-na.omit(gene_list) ## sort the list in decreasing order gene_list = sort(gene_list, decreasing = TRUE) ## perform gseGO gse_bulk<- gseGO(geneList=gene_list, ont =\"BP\", keyType = \"SYMBOL\", nPerm = 1000, minGSSize = 3, maxGSSize = 800, pvalueCutoff = 1.00, verbose = TRUE, OrgDb = organism, pAdjustMethod = \"none\") ## organize results if (nrow(gse_bulk@result) > 0){ ## count the gene number gene_count<- gse_bulk@result %>% group_by(ID) %>% summarise(count = sum(str_count(core_enrichment, \"/\")) + 1) ## merge with the original dataframe dot_df<- left_join(gse_bulk@result, gene_count, by = \"ID\") %>% mutate(GeneRatio = count/setSize) dot_df <- dot_df[order(dot_df$pvalue),] dot_df$Celltype <- names(list_CellBased[i]) ## store in list CellBased_gse_list[i] <- list(dot_df) }else{ print(paste0('no term enriched under specific pvalueCutoff for ',names(list_CellBased[i]))) } } ## remove NULL (cell types with no enrichment results) CellBased_gse_list <- CellBased_gse_list[!sapply(CellBased_gse_list,is.null)] ## set names of list element to cell types names <- list() for (i in 1:length(CellBased_gse_list)){ j <- data.frame(CellBased_gse_list[i]) names[i] <- unique(j$Celltype) } names(CellBased_gse_list) <- names ## set to dataframe list2env(CellBased_gse_list,envir=.GlobalEnv)","title":"2.4. EnrichR: Cell type groups"},{"location":"DEG/#25-enrichr-all-cells","text":"## retrieve logFC original_gene_list <- all$avg_log2FC ## assign logFC to gene names(original_gene_list) <- all$X ## omit any NA values gene_list<-na.omit(original_gene_list) ## sort the list in decreasing order gene_list = sort(gene_list, decreasing = TRUE) ## perform gseGO gse_all<- gseGO(geneList=gene_list, ont =\"BP\", keyType = \"SYMBOL\", nPerm = 1000, minGSSize = 3, maxGSSize = 800, pvalueCutoff = 1.00, verbose = TRUE, OrgDb = organism, pAdjustMethod = \"none\") ## count the gene number gene_count<- gse_all@result %>% group_by(ID) %>% summarise(count = sum(str_count(core_enrichment, \"/\")) + 1) ## merge with the original dataframe dot_df<- left_join(gse_all@result, gene_count, by = \"ID\") %>% mutate(GeneRatio = count/setSize) ## Take 5 most significantly enriched terms dot_df <- dot_df[order(dot_df$pvalue),] all_terms <- dot_df$Description[c(1:5)] dot_df_all <- dot_df dot_df_all$Celltype <- \"all\"","title":"2.5. EnrichR: All cells"},{"location":"DEG/#26-plot-gse-result-for-cell-based-deg","text":"## bind cell type dataframes namesX <- unlist(names) df <- bind_rows(mget(namesX)) ## bind celltype dataframe with all cells df_total <- rbind(df, dot_df_all) ## subset to only inlclude top GSE terms from all cells df_total <- subset(df_total, Description %in% all_terms) length(unique(df_total$Description)) ## [1] 5 ## rename cell type names df_total$Celltype[df_total$Celltype == \"all\"] <- \"All cells\" df_total$Celltype[df_total$Celltype == \"Oligodendrocytes\"] <- \"Oligoden.\" ## plot gse_CellBased<- ggplot(df_total, aes(x = GeneRatio, y=Description)) + geom_point(aes(size = count, color = pvalue)) + theme_bw() + theme(strip.background = element_rect(colour=NA, fill=NA), strip.text = element_text(size = 12), plot.title = element_text(hjust = 0.5, face = \"bold\"), axis.title.x = element_text(size = 12, face = \"bold\"), axis.text.y = element_text(size = 10), axis.text.x = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 12)) + scale_colour_gradient( low=\"red\", limits=c(0.0,1)) + facet_wrap(~Celltype, ncol=12) + ylab(NULL) + ggtitle(\"Cell-based: MAST\")+ scale_x_continuous(limits=c(0.1,1), labels = c(\"0.0\",\"\", \"0.5\",\"\", \"1.0\")) gse_CellBased Figure 4. Cell-based DGE: Enrichment of the top 5 GO terms for GO-Biological Processes calculated for all cell types together across cell types. DEGs with p-values < 0.05 and log 2 fold-change < -1 and > 1 were used as the input for gene set enrichment analysis. The gene ratio, gene count, and p-value of the five terms in each cell type are shown.","title":"2.6. Plot GSE result for cell-based DEG"},{"location":"DEG/#3-sample-based-dge-enrichment-analysis","text":"","title":"3. Sample-based DGE enrichment analysis"},{"location":"DEG/#31-load-sample-based-all-cells-deg-file","text":"## load DEG csv file all_sample <- read.delim(\"/Users/mfiorini/Desktop/scRNA_pipeline/Manuscript/Manuscript_Figures/Smajic3/Step5/pseudo_bulk_all_cells/PDvControl/DGE_AllCellsMainContrast HC vs PD.csv\", header = T, sep = \",\")","title":"3.1. load sample-based all cells DEG file"},{"location":"DEG/#32-load-sample-based-cell-type-groups-deg-files","text":"## list of cell types used for DEG contrasts sample_based_cell_types <- c('astro', 'DaN', 'endo', 'ependymal', 'excit', 'GABA', 'inhib', 'mg', 'Olig', 'opc', 'peri') ## create empty list object list <- list() ## load DEG csv files for(i in unique(sample_based_cell_types)){ list[paste0(i,\"_sample\")] <- list(read.delim(paste0(\"/Users/mfiorini/Desktop/scRNA_pipeline/Manuscript/Manuscript_Figures/Smajic3/Step5/pseudo_bulk_celltype_groups/PDvControlbulk/info/DGE_\",i,\"MainContrast HC vs PD.csv\"), header = T, sep = \",\")) } ## create data frame for each cell type list2env(list,envir=.GlobalEnv)","title":"3.2. load sample-based cell type groups DEG files"},{"location":"DEG/#33-clean-up-sample-based-deg-files","text":"## make list of cell type dataframe CellType_df <- list(astro_sample, DaN_sample, endo_sample, ependymal_sample, excit_sample, GABA_sample, inhib_sample, mg_sample, Olig_sample, opc_sample, peri_sample, all_sample) ## set names of list as cepp types names(CellType_df) <- c('astro_sample', 'DaN_sample', 'endo_sample', 'ependymal_sample', 'excit_sample', 'GABA_sample', 'inhib_sample', 'mg_sample', 'Olig_sample', 'opc_sample', 'peri_sample', \"all_sample\") ## list of columns that we want to keep cols_keep <- c(\"X\",\"pvalue\",\"log2FoldChange\",\"padj\") ## process each dataframe to only keep DEGs with a p-value < 0.05 log2FC > 1 list_SampleBased <- list() for (i in unique(names(CellType_df))){ j <- data.frame(CellType_df[i]) colnames(j) <- c('X', 'baseMean', 'log2FoldChange', 'lfcSE' ,'stat', 'pvalue', 'padj') j <- j[,colnames(j) %in% cols_keep] j <- subset(j, pvalue <= 0.05) j <- subset(j, log2FoldChange >= 1 | log2FoldChange <= -1) if (nrow(j > 0)){ j$cell_type <- paste0(i) j$method <- \"sample_based\" list_SampleBased[i] <- list(j) }else{ print(paste0(\"did not find any DEGs for \", i)) } list_SampleBased[i] } ## create data frame for each cell type list2env(list_SampleBased,envir=.GlobalEnv) ## <environment: R_GlobalEnv>","title":"3.3. Clean up sample-based DEG files"},{"location":"DEG/#34-enrichr-cell-type-groups","text":"## do not run enrichr for all cell types test <- data.frame(names(list_SampleBased)) test <- test %>% filter(!grepl('all', list_SampleBased)) cell_type_num <- as.numeric(rownames(test)) ## create empty list SampleBased_gse_list <- list() ## GSE loop for (i in cell_type_num){ ## create cell type specific dataframe j <- data.frame(list_SampleBased[i]) colnames(j) <- c('X', 'log2FoldChange', 'pvalue', 'padj', 'cell_type', 'method') ## we want the log2 fold change gene_list <- j$log2FoldChange ## assign gene to log2fc names(gene_list) <- j$X ## omit any NA values gene_list<-na.omit(gene_list) ## sort the list in decreasing order gene_list = sort(gene_list, decreasing = TRUE) ## perform gseGO gse_bulk<- gseGO(geneList=gene_list, ont =\"BP\", keyType = \"SYMBOL\", nPerm = 1000, minGSSize = 3, maxGSSize = 800, pvalueCutoff = 1.00, verbose = TRUE, OrgDb = organism, pAdjustMethod = \"none\") ## organize results if (nrow(gse_bulk@result) > 0){ ## count the gene number gene_count<- gse_bulk@result %>% group_by(ID) %>% summarise(count = sum(str_count(core_enrichment, \"/\")) + 1) ## merge with the original dataframe dot_df<- left_join(gse_bulk@result, gene_count, by = \"ID\") %>% mutate(GeneRatio = count/setSize) dot_df <- dot_df[order(dot_df$pvalue),] dot_df$Celltype <- names(list_SampleBased[i]) ## store in list SampleBased_gse_list[i] <- list(dot_df) }else{ print(paste0('no term enriched under specific pvalueCutoff for ',names(list_SampleBased[i]))) } } ## remove NULL (cell types with no enrichment results) SampleBased_gse_list <- SampleBased_gse_list[!sapply(SampleBased_gse_list,is.null)] ## set names of list element to cell types names <- list() for (i in 1:length(SampleBased_gse_list)){ j <- data.frame(SampleBased_gse_list[i]) names[i] <- unique(j$Celltype) } names(SampleBased_gse_list) <- names ## set to dataframe list2env(SampleBased_gse_list,envir=.GlobalEnv) ## <environment: R_GlobalEnv>","title":"3.4. EnrichR: Cell type groups"},{"location":"DEG/#35-enrichr-all-cells","text":"## retrieve logFC original_gene_list <- all_sample$log2FoldChange ## assign logFC to gene names(original_gene_list) <- all_sample$X ## omit any NA values gene_list<-na.omit(original_gene_list) ## sort the list in decreasing order gene_list = sort(gene_list, decreasing = TRUE) ## perform gseGO gse_all<- gseGO(geneList=gene_list, ont =\"BP\", keyType = \"SYMBOL\", nPerm = 1000, minGSSize = 3, maxGSSize = 800, pvalueCutoff = 1.00, verbose = TRUE, OrgDb = organism, pAdjustMethod = \"none\") ## count the gene number gene_count<- gse_all@result %>% group_by(ID) %>% summarise(count = sum(str_count(core_enrichment, \"/\")) + 1) ## merge with the original dataframe dot_df<- left_join(gse_all@result, gene_count, by = \"ID\") %>% mutate(GeneRatio = count/setSize) ## Take 5 most significantly enriched terms dot_df <- dot_df[order(dot_df$pvalue),] all_terms <- dot_df$Description[c(1:5)] dot_df_all <- dot_df dot_df_all$Celltype <- \"all\"","title":"3.5. EnrichR: All cells"},{"location":"DEG/#36-plot-gse-result-for-cell-based-deg","text":"## bind cell type dataframes namesX <- unlist(names) df <- bind_rows(mget(namesX)) ## bind celltype dataframe with all cells df_total <- rbind(df, dot_df_all) ## subset to only inlclude top GSE terms from all cells df_total <- subset(df_total, Description %in% all_terms) length(unique(df_total$Description)) ## rename cell type names df_total$Celltype[df_total$Celltype == \"all\"] <- \"All cells\" df_total$Celltype[df_total$Celltype == \"DaN_sample\"] <- \"DaN\" df_total$Celltype[df_total$Celltype == \"endo_sample\"] <- \"Endothelial\" df_total$Celltype[df_total$Celltype == \"ependymal_sample\"] <- \"Ependymal\" df_total$Celltype[df_total$Celltype == \"excit_sample\"] <- \"Excitatory\" df_total$Celltype[df_total$Celltype == \"GABA_sample\"] <- \"GABA\" df_total$Celltype[df_total$Celltype == \"inhib_sample\"] <- \"Inhibitory\" df_total$Celltype[df_total$Celltype == \"mg_sample\"] <- \"Microglia\" df_total$Celltype[df_total$Celltype == \"Olig_sample\"] <- \"Oligoden.\" df_total$Celltype[df_total$Celltype == \"opc_sample\"] <- \"OPC\" df_total$Celltype[df_total$Celltype == \"peri_sample\"] <- \"Pericytes\" df_total$Celltype[df_total$Celltype == \"astro_sample\"] <- \"Astrocyte\" ## plot gse_CellBased<- ggplot(df_total, aes(x = GeneRatio, y=Description)) + geom_point(aes(size = count, color = pvalue)) + theme_bw() + theme(strip.background = element_rect(colour=NA, fill=NA), strip.text = element_text(size = 12), plot.title = element_text(hjust = 0.5, face = \"bold\"), axis.title.x = element_text(size = 12, face = \"bold\"), axis.text.y = element_text(size = 10), axis.text.x = element_text(size = 12), legend.text = element_text(size = 12), legend.title = element_text(size = 12)) + scale_colour_gradient( low=\"red\", limits=c(0.0,1)) + facet_wrap(~Celltype, ncol=12) + ylab(NULL) + ggtitle(\"Sample-based: DESeq2\")+ scale_x_continuous(limits=c(0.1,1), labels = c(\"0.0\",\"\", \"0.5\",\"\", \"1.0\")) gse_CellBased Figure 5. Sample-based DGE: Enrichment of the top 5 GO terms for GO-Biological Processes calculated for all cell types together across cell types. DEGs with p-values < 0.05 and log 2 fold-change < -1 and > 1 were used as the input for gene set enrichment analysis. The gene ratio, gene count, and p-value of the five terms in each cell type are shown.","title":"3.6. Plot GSE result for cell-based DEG"},{"location":"Dataset1/","text":"Standard analysis track: Midbrain dataset Contents Introduction Downloading the midbrain dataset Installation scrnabox.slurm installation CellRanger installation R library preparation and R package installation scRNAbox: Standard Analysis Track Step 0: Set up Step 1: FASTQ to gene expression matrix Step 2: Create Seurat object and remove ambient RNA Step 3: Quality control and filtering Step 4: Doublet removal Step 5: Integration Step 6: Clustering Step 7: Cluster annotation Tool 1: Cluster marker GSEA Tool 2: Expression profiling of known marker genes Tool 3: Reference-based annotation Annotate Step 8: Differential gene expression Add metadata Cell-based DGE using all cells Cell-based DGE using cell type groups Sample-based DGE using all cells Sample-based DGE using cell type groups Analysis of differential gene expression outputs Publication-ready figures Job Configurations Introduction This guide illustrates the steps taken to analyze the midbrain dataset ( Smajic et al. 2022 ) that was presented in our pre-print manuscript . This dataset describes single-nuclei transcriptomes from the post-mortem midbrains of five individuals with Parkinson\u2019s disease (PD) and six controls sequenced separately. Downlaoding the midbrain dataset In you want to use the midbrain dataset to test the scRNAbox pipeline, please see here for detialed instructions on how to download the publicly available data. Installation scrnabox.slurm installation To download the latest version of scrnabox.slurm (v0.1.52) run the following command: wget https://github.com/neurobioinfo/scrnabox/releases/download/v0.1.52/scrnabox.slurm.zip unzip scrnabox.slurm.zip For a description of the options for running scrnabox.slurm run the following command: bash /pathway/to/scrnabox.slurm/launch_scrnabox.sh -h If the scrnabox.slurm has been installed properly, the above command should return the folllowing: scrnabox pipeline version 0.1.52 ------------------- mandatory arguments: -d (--dir) = Working directory (where all the outputs will be printed) (give full path) --steps = Specify what steps, e.g., 2 to run just step 2, 2-4, run steps 2 through 4) optional arguments: -h (--help) = See helps regarding the pipeline arguments. --method = Select your preferred method: HTO and SCRNA for hashtag, and Standard scRNA, respectively. --msd = You can get the hashtag labels by running the following code (HTO Step 4). --markergsea = Identify marker genes for each cluster and run marker gene set enrichment analysis (GSEA) using EnrichR libraries (Step 7). --knownmarkers = Profile the individual or aggregated expression of known marker genes. --referenceannotation = Generate annotation predictions based on the annotations of a reference Seurat object (Step 7). --annotate = Add clustering annotations to Seurat object metadata (Step 7). --addmeta = Add metadata columns to the Seurat object (Step 8). --rundge = Perform differential gene expression contrasts (Step 8). --seulist = You can directly call the list of Seurat objects to the pipeline. --rcheck = You can identify which libraries are not installed. ------------------- For a comprehensive help, visit https://neurobioinfo.github.io/scrnabox/site/ for documentation. CellRanger installation For information regarding the installation of CellRanger, please visit the 10X Genomics documentation . If CellRanger is already installed on your HPC system, you may skip the CellRanger installation procedures. For our analysis of the midbrain dataset we used the 10XGenomics GRCh38-3.0.0 reference genome and CellRanger v5.0.1. For more information regarding how to prepare reference genomes for the CellRanger counts pipeline, please see the 10X Genomics documentation . R library preparation and R package installation We must prepapre a common R library where we will load all of the required R packages. If the required R packages are already installed on your HPC system in a common R library, you may skip the following procedures. We will first install R . The analyses presented in our pre-print manuscript were conducted using v4.2.1. # install R module load r/4.2.1 Then, we will run the installation code, which creates a directory where the R packages will be loaded and will install the required R packages: # Folder for R packages R_PATH=~/path/to/R/library mkdir -p $R_PATH # Install package Rscript ./scrnabox.slurm/soft/R/install_packages_scrnabox.R $R_PATH scRNAbox pipeline Step 0: Set up Now that scrnabox.slurm , CellRanger , R , and the required R packages have been installed, we can proceed to our analysis with the scRNAbox pipeline. We will create a pipeline folder designated for the analysis and run Step 0, selecting the standard analysis track ( --method SCRNA ), using the following code: mkdir pipeline cd pipeline export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 0 \\ --method SCRNA Next, we will navigate to the scrnabox_config.ini file in ~/pipeline/job_info/configs to define the HPC account holder ( ACCOUNT ), the path to the environmental module ( MODULEUSE ), the path to CellRanger from the environmental module directory ( CELLRANGER ), CellRanger version ( CELLRANGER_VERSION ), R version ( R_VERSION ), and the path to the R library ( R_LIB_PATH ): cd ~/pipeline/job_info/configs nano scrnabox_config.ini ACCOUNT=account-name MODULEUSE=/path/to/environmental/module CELLRANGER=/path/to/cellranger/from/module/directory CELLRANGER_VERSION=5.0.1 R_VERSION=4.2.1 R_LIB_PATH=/path/to/R/library Next, we can check to see if all of the required R packages have been properly installed using the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 0 \\ --rcheck Step 1: FASTQ to gene expression matrix In Step 1, we will run the CellRanger counts pipeline to generate feature-barcode expression matrices from the FASTQ files. While it is possible to manually prepare the library.csv files for each of the 11 samples in the experiment prior to running Step 1, we are going to opt for automated library preparation. For more information regarding the manual prepartion of library.csv files, please see the the CellRanger library preparation tutorial. For our analysis of the midbrain dataset we set the following execution parameters for Step 1 ( ~/pipeline/job_info/parameters/step1_par.txt ): Parameter Value par_automated_library_prep Yes par_fastq_directory /path/to/directory/containing/fastqs par_sample_names PD1, PD2, PD3, PD4, PD5, CTRL1, CTRL2, CTRL3, CTRL4, CTRL5, CTRL6 par_rename_samples Yes par_new_sample_names Parkinson1, Parkinson2, Parkinson3, Parkinson4, Parkinson5, Control1, Control2, Control3, Control4, Control5, Control6 par_paired_end_seq TRUE par_ref_dir_grch ~/genome/10xGenomics/refdata-cellranger-GRCh38-3.0.0 par_r1_length NULL (commented out) par_r2_length NULL (commented out) par_mempercode 30 par_include_introns Yes par_no_target_umi_filter NULL (commented out) par_expect_cells NULL (commented out) par_force_cells NULL (commented out) par_no_bam NULL (commented out) Note: The parameters file for each step is located in ~/pipeline/job_info/parameters . For a comprehensive description of the execution parameters for each step see here . Given that CellRanger runs a user interface and is not submitted as a job, it is recommended to run Step 1 in a 'screen' , which will allow the the task to keep running if the connection is broken. To run Step 1, use the following command: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline screen -S run_Midbrain_application_case bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 1 The outputs of the CellRanger counts pipeline are deposited into ~/pipeline/step1 . Step 2: Create Seurat object and remove ambient RNA In Step 2, we are going to use the CellRanger-generated feature-barcode matrices to produce unique Seurat objects for each of the 11 samples. In this step, we have the option to correct the expression matrices for ambient RNA contamination; however, because Smajic et al. did not perform this analytical procedure we will skip it. In addition, we will perform cell cycle scoring. Prior to performing cell cycle scoring, we must normalize and scale the counts matrix. For our analysis of the midbrain dataset we set the following execution parameters for Step 2 ( ~/pipeline/job_info/parameters/step2_par.txt ): Parameter Value par_save_RNA Yes par_save_metadata Yes par_ambient_RNA No par_min.cells_L 1 par_normalization.method LogNormalize par_scale.factor 10000 par_selection.method vst par_nfeatures 2500 We can run Step 2 using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 2 Step 2 produces the following outputs for each sample. As an example we show the outputs for sample Control1 : step2 \u251c\u2500\u2500 figs2 \u2502 \u251c\u2500\u2500 ambient_RNA_estimation_Control1.pdf \u2502 \u251c\u2500\u2500 ambient_RNA_markers_Control1.pdf \u2502 \u251c\u2500\u2500 cell_cyle_dim_plot_Control1.pdf \u2502 \u251c\u2500\u2500 vioplot_Control1.pdf \u2502 \u2514\u2500\u2500 zoomed_in_vioplot_Control1.pdf \u251c\u2500\u2500 info2 \u2502 \u251c\u2500\u2500 estimated_ambient_RNA_Control1.txt \u2502 \u251c\u2500\u2500 MetaData_Control1.txt \u2502 \u251c\u2500\u2500 meta_info_Control1.txt \u2502 \u251c\u2500\u2500 Control1_ambient_rna_summary.rds \u2502 \u251c\u2500\u2500 Control1_RNA.txt \u2502 \u251c\u2500\u2500 sessionInfo.txt \u2502 \u2514\u2500\u2500 summary_Control1.txt \u2514\u2500\u2500 objs2 \u2514\u2500\u2500 Control1.rds Note: For a comprehensive description of the outputs for each analytical step, please see the Outputs section of the scRNAbox documentation. Figure 1. Figures produced by Step 2 of the scRNAbox pipeline. The figures for the Control1 sample are shown as an example. A) Estimated ambient RNA contamination rate (Rho) by SoupX. Estimates of the RNA contamination rate using various estimators are visualized via a frequency distribution; the true contamination rate is assigned as the most frequent estimate (red line; 5.1%). B) Log10 ratios of observed counts to expected counts for marker genes from each cluster. Clusters are defined by the CellRanger counts pipeline. The red line displays the estimated RNA contamination rate if the estimation was based entirely on the corresponding gene. C) Principal component analysis (PCA) of Seurat S and G2M cell cycle reference genes. D) Violin plots showing the distribution of cells according to quality control metrics calculated in Step 2. E) Zoomed in violin plots, from the minimum to the mean, showing the distribution of cells according to quality control metrics calculated in Step 2. Step 3: Quality control and filtering In Step 3, we are going to perform quality control procedures and filter out low quality cells. We are going to filter out cells with < 1000 unique RNA transcripts, < 1500 total RNA transcripts, and > 10% mitochondria and ribosomal RNA. In addition, we are going to remove mitochondrial-encoded and ribosomal genes. For our analysis of the midbrain dataset we set the following execution parameters for Step 3 ( ~/pipeline/job_info/parameters/step2_par.txt ): Parameter Value par_save_RNA Yes par_save_metadata Yes par_seurat_object NULL par_nFeature_RNA_L 1000 par_nFeature_RNA_U NULL par_nCount_RNA_L 1500 par_nCount_RNA_U NULL par_mitochondria_percent_L 0 par_mitochondria_percent_U 10 par_ribosomal_percent_L 0 par_ribosomal_percent_U 10 par_remove_mitochondrial_genes Yes par_remove_ribosomal_genes Yes par_remove_genes NULL par_regress_cell_cycle_genes No par_regress_custom_genes No par_regress_genes NULL par_normalization.method LogNormalize par_scale.factor 10000 par_selection.method vst par_nfeatures 2500 par_top 10 par_npcs_pca 30 We can run Step 3 using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 3 Step 3 produces the following outputs for each sample. As an example we show the outputs for sample Control1 : step3 \u251c\u2500\u2500 figs3 \u2502 \u251c\u2500\u2500 dimplot_pca_Control1.pdf \u2502 \u251c\u2500\u2500 elbowplot_Control1.pdf \u2502 \u251c\u2500\u2500 filtered_QC_vioplot_Control1.pdf \u2502 \u2514\u2500\u2500 VariableFeaturePlot_Control1.pdf \u251c\u2500\u2500 info3 \u2502 \u251c\u2500\u2500 MetaData_Control1.txt \u2502 \u251c\u2500\u2500 meta_info_Control1.txt \u2502 \u251c\u2500\u2500 most_variable_genes_Control1.txt \u2502 \u251c\u2500\u2500 Control1_RNA.txt \u2502 \u251c\u2500\u2500 sessionInfo.txt \u2502 \u2514\u2500\u2500 summary_Control1.txt \u2514\u2500\u2500 objs3 \u2514\u2500\u2500 Control1.rds Figure 2. Figures produced by Step 3 of the scRNAbox pipeline. The figures for the Control1 sample are shown as an example. A) Violin plots showing the distribution of cells according to quality control metrics after filtering by user-defined thresholds. B) Scatter plot showing the top 2500 most variable features; the top 10 most variable features are labelled. C) Principal component analysis (PCA) visualizing the first two principal component (PC). D) Elbow plot to visualize the percentage of variance explained by each PC. Step 4: Doublet removal In this Step, we are going to identify doublets (erroneous barcodes produced by two or more cells) and remove them from downstream analyses using the DoubletFinder tool (McGinnis et al. 2019). For optimal performance, DoubletFinder requires the user to define the following parameters: The number of statistically significant PCs (par_PCs) The number of artificial doublets to generate (par_pN) The expected doublet rate for each sample (par_expected_doublet_rate) The number of statistically significant PCs can be informed by the elbow plots produced in Step 3; in this case the top 25 PCs should maintain a robust compression of the data across samples. DoubletFinder is largely invariant to the number of artifical doublets generated , therefore we will maintain the default parameter of 0.25. The expected doublet rate can be informed by the number of recovered cells (~8% for ~10,000 cells recovered). The number of recovered cells can be informed by the barcodes.tsv.gz file produced by the CellRanger counts pipeline, which is located in ~/pipeline/step1/<sample>/output_folder/outs/filtered_feature_bc_matrix . The expected doublet rates are approximations obtained from the 10X Genomics Next GEM Single Cell 3' v3.1 documentation , which was used by Smajic et al. for library preparation. For our analysis of the midbrain dataset we set the following execution parameters for Step 4 ( ~/pipeline/job_info/parameters/step4_par.txt ): Parameter Value par_save_RNA Yes par_save_metadata Yes par_seurat_object NULL par_RunUMAP_dims 25 par_RunUMAP_n.neighbors 65 par_dropDN Yes par_PCs 25 par_pN 0.25 par_sct FALSE par_sample_names Control1, Control2, Control3, Control4, Control5, Control6, Parkinson1, Parkinson2, Parkinson3, Parkinson4, Parkinson5 par_expected_doublet_rate 0.042, 0.042, 0.023, 0.04, 0.027, 0.053, 0.023, 0.053, 0.034, 0.023, 0.05 We can run Step 4 using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 4 Step 4 produces the following outputs for each sample. As an example we show the outputs for sample Control1 : step4 \u251c\u2500\u2500 figs4 \u2502 \u251c\u2500\u2500 Control1_DF.classifications.pdf \u2502 \u2514\u2500\u2500 Control1_doublet_summary.pdf \u251c\u2500\u2500 info4 \u2502 \u251c\u2500\u2500 MetaData_Control1.txt \u2502 \u251c\u2500\u2500 meta_info_Control1.txt \u2502 \u251c\u2500\u2500 n_predicted_doublets_Control1.txt \u2502 \u251c\u2500\u2500 Control1_RNA.txt \u2502 \u2514\u2500\u2500 sessionInfo.txt \u2514\u2500\u2500 objs4 \u2514\u2500\u2500 Control1.rds Figure 3. Figures produced by Step 4 of the scRNAbox pipeline standard track. The figures for the Control1 sample are shown as an example. A) Results of doublet detection analysis with DoubletFinder. Left: violin plot displaying the distribution of the proportion of artificial nearest neighbours (pANN) across singlets and doublets. Right: a bar plot of the number of predicted singlets and doublets. B) Uniform Manifold Approximation Projection (UMAP) plots coloured by droplet assignments (singlet or doublet). Step 5: Integration In Step 5, we are going to integrate the individual Seurat objects to enable joint analyses across all 11 samples. We will then perform normalization, scaling and linear dimensional reduction on the integrated assay. The outputs from Step 5 will inform the optimal clustering parameters for Step 6. For our analysis of the midbrain dataset we set the following execution parameters for Step 5: Parameter Value par_save_RNA Yes par_save_metadata Yes par_seurat_object NULL par_one_seurat No par_integrate_seurat Yes par_merge_seurat No par_DefaultAssay RNA par_normalization.method LogNormalize par_scale.factor 10000 par_selection.method vst par_nfeatures 4000 par_FindIntegrationAnchors_dim 25 par_RunPCA_npcs 30 par_RunUMAP_dims 25 par_RunUMAP_n.neighbors 65 par_compute_jackstraw yes We can run Step 5 using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 5 Step 5 produces the following outputs: step5 \u251c\u2500\u2500 figs5 \u2502 \u251c\u2500\u2500 integrated_DimPlot_pca.pdf \u2502 \u251c\u2500\u2500 integrated_DimPlot_umap.pdf \u2502 \u251c\u2500\u2500 integrated_elbow.pdf \u2502 \u2514\u2500\u2500 integrated_Jackstraw_plot.pdf \u251c\u2500\u2500 info5 \u2502 \u251c\u2500\u2500 int_meta_info_seu_step5.csv \u2502 \u251c\u2500\u2500 sessionInfo.txt \u2502 \u251c\u2500\u2500 seu_int_RNA.txt \u2502 \u2514\u2500\u2500 seu_int_MetaData.txt \u2514\u2500\u2500 objs5 \u2514\u2500\u2500 seu_step5.rds Figure 4. Figures produced by Step 5 of the scRNAbox pipeline standard track. A) Principal component analysis (PCA) visualizing the first two principal components (PC) of the integrated assay, colour coded by sample. B) Uniform Manifold Approximation and Projections (UMAP) plot of the integrated assay, colour coded by sample. C) Elbow plot to visualize the percentage of variance explained by each PC. D) Jackstraw plot to visualize the distribution of p-values for each PC. Step 6: Clustering In Step 6, we will cluster the cells to indentify groups with similar expression profiles. Based on the Elbow and Jackstraw plots produced in Step 5, we are going to use the first 25 PCs as input. We will cluster the cells at clustering resolutions ranging from 0.0 to 2.0. To determine the stability of clusters at each clustering resolution, we will run the Louvain clustering algorithm 25 times for each resolution, while shuffling the order of the nodes in the graph for each iteration. We will then compute the Adjusted Rand Index (ARI) between pairs of clusters at a given clustering resolution. For our analysis of the midbrain dataset we set the following execution parameters for Step 6: Parameter Value par_save_RNA Yes par_save_metadata Yes par_seurat_object NULL par_skip_integration No par_FindNeighbors_dims 25 par_RunUMAP_dims 25 par_FindNeighbors_k.param 30 par_FindNeighbors_prune.SNN 1/15 par_FindClusters_resolution 0, 0.05, 0.2, 0.6, 0.8, 1.0, 1.2, 1.4, 1.5, 1.6, 1.8, 2.0 par_compute_ARI Yes par_RI_reps 25 We can run Step 6 using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 6 Step 6 produces the following outputs: step6 \u251c\u2500\u2500 ARI \u2502 \u251c\u2500\u2500 ARI.pdf \u2502 \u2514\u2500\u2500 clustering_ARI.xlsx \u251c\u2500\u2500 figs6 \u2502 \u251c\u2500\u2500 clustree_int.pdf \u2502 \u251c\u2500\u2500 integrated_snn_res.0.05.pdf \u2502 \u251c\u2500\u2500 integrated_snn_res.0.2.pdf \u2502 \u251c\u2500\u2500 integrated_snn_res.0.6.pdf \u2502 \u251c\u2500\u2500 integrated_snn_res.0.8.pdf \u2502 \u251c\u2500\u2500 integrated_snn_res.0.pdf \u2502 \u251c\u2500\u2500 integrated_snn_res.1.2.pdf \u2502 \u251c\u2500\u2500 integrated_snn_res.1.4.pdf \u2502 \u251c\u2500\u2500 integrated_snn_res.1.5.pdf \u2502 \u251c\u2500\u2500 integrated_snn_res.1.6.pdf \u2502 \u251c\u2500\u2500 integrated_snn_res.1.8.pdf \u2502 \u251c\u2500\u2500 integrated_snn_res.1.pdf \u2502 \u2514\u2500\u2500 integrated_snn_res.2.pdf \u251c\u2500\u2500 info6 \u2502 \u251c\u2500\u2500 meta_info.csv \u2502 \u251c\u2500\u2500 sessionInfo.txt \u2502 \u251c\u2500\u2500 seu_MetaData.txt \u2502 \u2514\u2500\u2500 seu_RNA.txt \u2514\u2500\u2500 objs6 \u2514\u2500\u2500 seu_step6.rds Figure 5. Figures produced by Step 6 of the scRNAbox pipeline. A) Uniform Manifold Approximation and Projections (UMAP) plot, coloured according to the clusters identified at a resolution of 1.5. UMAP plots are produced for each user-defined clustering resolution. B) Mean (top panel) and standard deviation (sd; middle panel) of the Adjusted RNA Index (ARI) between clustering pairs at each user-defined clustering resolution. The bottom panel shows the number of clusters at each user-defined clustering resolution. C) ClustTree plot to visualize inter-cluster dynamics at varying cluster resolutions. Step 7: Cluster annotation In Step 7, we are going to annotate the clusters identified in Step 6 to identify the cell types comprising the midbrain dataset. scRNAbox provides three distinct tools for cluster annotations: Tool 1: Cluster marker and gene set enrichment analysis (GSEA) Tool 2: Expression profiling of known marker genes Tool 3: Reference-based annotation Additionally, users can add cluster annotations to the Seurat object. For comprehensive description of each cluster annotation tool, please see the Step 7:Cluster annotation section of the scRNAbox documentation or our pre-print manuscript . Tool 1: Cluster marker GSEA Using Tool 1, we are first going to identify differentially expressed marker genes for each cluster. We must define the number of marker genes for each cluster that we want scRNAbox to report and select a clustering resolution that we want to annotate. In this case we will report the top two marker genes for each cluster at a clustering resolution of 1.5. To identify the marker genes for each cluster, we set the following execution parameters for Step 7 ( step7_par.txt ): Annotation tool Parameter Value General par_save_RNA No General par_save_metadata No General par_seurat_object NULL General par_level_cluster integrated_snn_res.1.5 Tool 1 par_run_find_marker Yes Tool 1 par_run_enrichR No Tool 1 par_top_sel 2 Tool 1 par_db NULL We can identify the marker genes for each cluster using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --markergsea T The above code produces the following outputs: step7 \u251c\u2500\u2500 figs7 \u2502 \u2514\u2500\u2500 marker \u2502 \u2514\u2500\u2500 heatmap.pdf \u251c\u2500\u2500 info7 \u2502 \u251c\u2500\u2500 marker \u2502 \u2502 \u251c\u2500\u2500 cluster_just_genes.xlsx \u2502 \u2502 \u251c\u2500\u2500 ClusterMarkers.csv \u2502 \u2502 \u251c\u2500\u2500 ClusterMarkers.rds \u2502 \u2502 \u251c\u2500\u2500 cluster_whole.xlsx \u2502 \u2502 \u2514\u2500\u2500 top_sel.csv \u2502 \u2514\u2500\u2500 sessionInfo_find_marker.txt \u2514\u2500\u2500 objs7 \u2514\u2500\u2500 seu_step7.rds Figure 6. Figure produced by Tool 1 (marker gene gene set enrichment analysis) of scRNAbox's cluster annotation module (Step 7). A heatmap is produced to visualize the expression of the top markers genes at the cell level, stratified by cluster. The top marker genes for each cluster identified at a clustering resolution of 1.5 is shown. Now that we have identified the marker genes for each cluster, we will perform a gene set enrichment analysis (GSEA) ; we will test the differentially expressed genes (DEG) in the positive direction (Log2 fold-change > 0.00) for enrichment across gene set libraries that define cell types using the EnrichR tool. For this analysis, we will use the following libraries: Descartes_Cell_Types_and_Tissue_2021; CellMarker_Augmented_2021; Azimuth_Cell_Types_2021 cell type libraries. To perform GSEA, we set the following execution parameters for Step 7 ( step7_par.txt ): Annotation tool Parameter Value General par_save_RNA No General par_save_metadata No General par_seurat_object NULL General par_level_cluster integrated_snn_res.1.5 Tool 1 par_run_find_marker No Tool 1 par_run_enrichR Yes Tool 1 par_top_sel 2 Tool 1 par_db NULL If your HPC allows access to the internet , we can perform GSEA using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --markergsea T Note: If your HPC does not allow access to the internet , you will have to run GSEA locally. For more information, please see the Step 7:Cluster annotation section of the scRNAbox documentation. The above code produces the following outputs. As an example, we are only showing the outputs for cluster 0: step7 \u2514\u2500\u2500 annot_enrich \u2514\u2500\u2500 cluster0 \u251c\u2500\u2500 Er_genes_clust_0_Azimuth_Cell_Types_2021.csv \u251c\u2500\u2500 Er_genes_clust_0_CellMarker_Augmented_2021.csv \u251c\u2500\u2500 Er_genes_clust_0_Descartes_Cell_Types_and_Tissue_2021.csv \u251c\u2500\u2500 plotenrich_clust_0_1.pdf \u251c\u2500\u2500 plotenrich_clust_0_2.pdf \u2514\u2500\u2500 plotenrich_clust_0_3.pdf Figure 7. Figures produced by Tool 1 (marker gene gene set enrichment analysis) of scRNAbox's cluster annotation module (Step 7). Upon identifying the top marker genes for each cluster at the user-defined clustering resolution, users can perfrom a gene set enrichment analysis (GSEA) using the EnrichR tool for all marker genes in the positive direction (Log2 fold-change > 0.00). Bar plots are produced to visualize the most enriched terms for each cluster. As an example, the top enrichment results across A) Azimuth Cell Types 2021, B) Descartes Cell Types and Tissue 2021, and C) CellMarker Augmented 2021 cell type libraries for cluster 5 are shown. Note: It is possible to identify cluster-specific marker genes and perform GSEA at the same time by setting both par_run_find_marker= \"Yes\" and par_run_enrichR= \"Yes . Tool 2: Expression profiling of known marker genes Using Tool 2, we are going to profile the midbrain dataset for known cell type marker genes. First, we are going to visualize the expression of the marker genes used by Smajic et al. to define their clusters: Cell type Gene Oligodendrocytes MOBP OPC VCAN Astrocytes AQP4 Ependymal FOXJ1 Microglia CD74 Endothelial CLDN5 Pericytes PDGFRB Excitatory neurons SLC17A6 Inhibitory neurons GAD2 GABAergic neurons GAD2 , GRIK1 Dopaminergic neurons (DaN) TH Degenerating DaN CADPS2 To visualize these features, we set the following execution parameters for Step 7 ( step7_par.txt ): Annotation tool Parameter Value General par_save_RNA No General par_save_metadata No General par_seurat_object NULL General par_level_cluster integrated_snn_res.1.5 Tool 2 par_run_module_score No Tool 2 par_run_visualize_markers Yes Tool 2 par_module_score NULL Tool 2 par_select_features_list MOBP, VCAN, AQP4, FOXJ1, CD74, CLDN5, GFRB, SLC17A6, GAD2, GRIK1, TH, CADPS2 Tool 2 par_select_features_csv NULL We can visualize the expression of these features using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --knownmarkers T The above code produces the following outputs: step7 \u251c\u2500\u2500 figs7 \u2514\u2500\u2500 visualize_features \u251c\u2500\u2500 list_dot_plot.pdf \u251c\u2500\u2500 list_feature_plot.pdf \u2514\u2500\u2500 list_violin_plot.pdf Figure 8. Figures produced by Tool 2 (profiling the expression of known marker genes) of scRNAbox's cluster annotation module (Step 7). ScRNAbox allows users to visualize the individual and aggregated expression of known marker genes. For the midbrain dataset, we visualized the individual expression of the marker genes used by Smajic et al. to define their clusters. Feature plots visualizing the expression of each individual gene at the cell level are shown. Additionally, violin plots and dot plots are produced to visualize the expression of individual genes at the cluster level. Next, we are going to use a csv file to defineline multiple lists of cell type marker genes: da_neurons NPC_orStemLike mature_neurons excitatory_neurons inhbitory_neurons astrocytes oligodendrocytes radial_glia epithelial microglia TH DCX RBFOX3 GRIA2 GAD1 GFAP MBP PTPRC HES1 IBA1 SLC6A3 NEUROD1 SYP GRIA1 GAD2 S100B MOG AIF1 HES5 P2RY12 SLC18A2 TBR1 VAMP1 GRIA4 GAT1 AQP4 OLIG1 ADGRE1 SOX2 P2RY13 SOX6 PCNA VAMP2 GRIN1 PVALB APOE OLIG2 VIM SOX10 TREM119 NDNF MKI67 TUBB3 GRIN2B GABR2 SOX9 SOX10 TNC NES GPR34 SNCG SOX2 SYT1 GRIN2A GABR1 SLC1A3 PTPRZ1 CDH1 SIGLECH ALDH1A1 NES BSN GRIN3A GBRR1 FAM107A NOTCH1 TREM2 CALB1 PAX6 HOMER1 GRIN3 GABRB2 HOPX CX3CR1 TACR2 SLC17A6 GRIP1 GABRB1 LIFR FCRLS SLC17A6 CAMK2A GABRB3 ITGB5 OLFML3 SLC32A1 GABRA6 IL6ST HEXB OTX2 GABRA1 SLC1A3 TGFBR1 GRP GABRA4 SALL1 LPL TRAK2 MERTK CCK PROS1 VIP Note : This is csv file is available here . We will use this csv file to visualize the individual expression of each gene and calculate the module score, which will allow us to visualize the aggregated expression of each gene set. To visualize the unique and aggregated expression of these features, we set the following execution parameters for Step 7 ( step7_par.txt ): Annotation tool Parameter Value General par_save_RNA No General par_save_metadata No General par_seurat_object NULL General par_level_cluster integrated_snn_res.1.5 Tool 2 par_run_module_score Yes Tool 2 par_run_visualize_markers Yes Tool 2 par_module_score ~/scrnabox/tutorial/Midbrain_dataset_example_files/module_score.csv Tool 2 par_select_features_list NULL Tool 2 par_select_features_csv ~/scrnabox/tutorial/Midbrain_dataset_example_files/module_score.csv We can visualize the individual and aggregated expression of these features using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --knownmarkers T The above code produces the following outputs: step7 \u251c\u2500\u2500 figs7 \u2502 \u251c\u2500\u2500 module_score \u2502 \u2502 \u251c\u2500\u2500 module_score_astrocytes.pdf \u2502 \u2502 \u251c\u2500\u2500 module_score_da_neurons.pdf \u2502 \u2502 \u251c\u2500\u2500 module_score_epithelial.pdf \u2502 \u2502 \u251c\u2500\u2500 module_score_excitatory_neurons.pdf \u2502 \u2502 \u251c\u2500\u2500 module_score_inhbitory_neurons.pdf \u2502 \u2502 \u251c\u2500\u2500 module_score_mature_neurons.pdf \u2502 \u2502 \u251c\u2500\u2500 module_score_microglia.pdf \u2502 \u2502 \u251c\u2500\u2500 module_score_NPC_orStemLike.pdf \u2502 \u2502 \u251c\u2500\u2500 module_score_oligodendrocytes.pdf \u2502 \u2502 \u2514\u2500\u2500 module_score_radial_glia.pdf \u2502 \u2514\u2500\u2500 visualize_features \u2502 \u251c\u2500\u2500 astrocytes_dot_plot.pdf \u2502 \u251c\u2500\u2500 astrocytes_feature_plot.pdf \u2502 \u251c\u2500\u2500 astrocytes_violin_plot.pdf \u2502 \u251c\u2500\u2500 da_neurons_dot_plot.pdf \u2502 \u251c\u2500\u2500 da_neurons_feature_plot.pdf \u2502 \u251c\u2500\u2500 da_neurons_violin_plot.pdf \u2502 \u251c\u2500\u2500 epithelial_dot_plot.pdf \u2502 \u251c\u2500\u2500 epithelial_feature_plot.pdf \u2502 \u251c\u2500\u2500 epithelial_violin_plot.pdf \u2502 \u251c\u2500\u2500 excitatory_neurons_dot_plot.pdf \u2502 \u251c\u2500\u2500 excitatory_neurons_feature_plot.pdf \u2502 \u251c\u2500\u2500 excitatory_neurons_violin_plot.pdf \u2502 \u251c\u2500\u2500 inhbitory_neurons_dot_plot.pdf \u2502 \u251c\u2500\u2500 inhbitory_neurons_feature_plot.pdf \u2502 \u251c\u2500\u2500 inhbitory_neurons_violin_plot.pdf \u2502 \u251c\u2500\u2500 mature_neurons_dot_plot.pdf \u2502 \u251c\u2500\u2500 mature_neurons_feature_plot.pdf \u2502 \u251c\u2500\u2500 mature_neurons_violin_plot.pdf \u2502 \u251c\u2500\u2500 microglia_dot_plot.pdf \u2502 \u251c\u2500\u2500 microglia_feature_plot.pdf \u2502 \u251c\u2500\u2500 microglia_violin_plot.pdf \u2502 \u251c\u2500\u2500 NPC_orStemLike_dot_plot.pdf \u2502 \u251c\u2500\u2500 NPC_orStemLike_feature_plot.pdf \u2502 \u251c\u2500\u2500 NPC_orStemLike_violin_plot.pdf \u2502 \u251c\u2500\u2500 oligodendrocytes_dot_plot.pdf \u2502 \u251c\u2500\u2500 oligodendrocytes_feature_plot.pdf \u2502 \u251c\u2500\u2500 oligodendrocytes_violin_plot.pdf \u2502 \u251c\u2500\u2500 radial_glia_dot_plot.pdf \u2502 \u251c\u2500\u2500 radial_glia_feature_plot.pdf \u2502 \u2514\u2500\u2500 radial_glia_violin_plot.pdf \u2514\u2500\u2500 info7 \u2514\u2500\u2500 module_score \u2514\u2500\u2500 geneset_by_cluster.csv Figure 9. Figures produced by Tool 2 (profiling the expression of known marker genes) of scRNAbox's cluster annotation module (Step 7). ScRNAbox allows users to visualize the individual and aggregated expression of known marker genes. For the midbrain dataset, we used gene sets of well known marker genes for cell types in the human midbrain. The microglia gene set is shown as an example. A) Dot plot visualizing the individual expression of marker genes in the microglia gene set. B) Uniform manifold approximation and projection (UMAP) plot visualizing the module score of the microglia gene set at the cell level. The module score allows for profiling the aggregated expression of multiple genes. Tool 3: Reference-based annotation Using Method 3, we are going to leverage the cell-type annotations from a reference Seurat object and generate annotation predictions for the query dataset. For reference-based annotation we must define the path to a our reference Seurat object and the column of the reference Seurat object's metadata that contains the cell type annotations. For the midbrain dataset, we are going to use a reference Seurat object from Kamath et al. . The reference Seurat object was obtain from the Broad Institute Single Cell Portal To perform reference-based annotations, we set the following execution parameters for Step 7 ( step7_par.txt ): Annotation tool Parameter Value General par_save_RNA Yes General par_save_metadata Yes General par_seurat_object NULL General par_level_cluster integrated_snn_res.1.5 Tool 3 par_reference /path/to/Kamath/reference/seurat/object Tool 3 par_reference_name Kamath Tool 3 par_level_celltype Cell_Type Tool 3 par_FindTransferAnchors_dim 10 Tool 3 par_futureglobalsmaxSize 60000 * 1024^2 We can perform reference-based annotations using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --referenceannotation T The above code produces the following outputs: step7 \u251c\u2500\u2500 figs7 \u2502 \u2514\u2500\u2500 reference_based_annotation \u2502 \u2514\u2500\u2500 Kammath_UMAP_transferred_labels.pdf \u251c\u2500\u2500 info7 \u2502 \u251c\u2500\u2500 reference_based_annotation \u2502 \u2502 \u2514\u2500\u2500 Kammath_prediction_summary.xlsx \u2502 \u251c\u2500\u2500 sessionInfo_annotate.txt \u2502 \u251c\u2500\u2500 seu_MetaData.txt \u2502 \u2514\u2500\u2500 seu_RNA.txt \u2514\u2500\u2500 objs7 \u2514\u2500\u2500 seu_step7.rds Figure 10. Figure produced by Tool 3 (reference-based annotation) of scRNAbox's cluster annotation module (Step 7). ScRNAbox allows users to predict cell type annotations of their query dataset based on the predictions of a reference dataset. Left: Uniform Manifold Approximation and Projections (UMAP) plot of clustered and annotated reference Seurat object; single-nucleus RNA sequencing (scRRNAseq) of midbrain tissue produced by Kamath et al. , coloured by cell type. Right: UMAP of the label transfer predictions for the midbrain dataset, coloured by predicted cell type. Abbreviations: astro, astrocytes; da, dopaminergic neurons; endo, endothelial cells; nonda, non-dopaminergic neurons; mg, microglia; olig, oligodendrocytes; opc, oligodendrocyte precursor cells. Annotate Now that we have used the three cluster annotation tools available in the scRNAbox pipeline, we are going to manually curate the results and add cluster annotations to the midbrain dataset. To add annotations, we set the following execution parameters for Step 7 ( step7_par.txt ): Annotation tool Parameter Value General par_save_RNA Yes General par_save_metadata Yes General par_seurat_object NULL General par_level_cluster integrated_snn_res.1.5 Annotate par_annotate_resolution integrated_snn_res.1.5 Annotate par_name_metadata clustering_annotation Annotate par_annotate_labels Oligodendrocyte, Oligodendrocyte, Excitatory, Oligodendrocyte, Oligodendrocyte, Microglia, OPC, Oligodendrocyte, Oligodendrocyte , Inhibitory, Atrocyte, Endothlial, Oligodendrocyte, Microglia, Oligodendrocyte, Astrocyte, Oligodendrocyte, Oligodendrocyte, Atrocyte, Oligodendrocyte, Pericyte, Ependymal, OPC, Pericyte, GABA, Inhibitory, Oligodendrocyte, Microglia, Astrocyte, Endothelial, DaN, CADPS2, Microglia We can add our annotations using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --annotate T The above code produces the following outputs: step7 \u251c\u2500\u2500 figs7 \u2502 \u2514\u2500\u2500 annotate \u2502 \u251c\u2500\u2500 clustering_annotation_cluster_annotation.pdf \u2502 \u2514\u2500\u2500 clustering_annotation_split_cluster_annotation.pdf \u251c\u2500\u2500 info7 \u2502 \u251c\u2500\u2500 meta_info_seu_step7.txt \u2502 \u251c\u2500\u2500 sessionInfo_annotate.txt \u2502 \u251c\u2500\u2500 seu_MetaData.txt \u2502 \u2514\u2500\u2500 seu_RNA.txt \u2514\u2500\u2500 objs7 \u2514\u2500\u2500 seu_step7.rds Figure 11. Annotated Seurat object produced in Step 7 of the scRNAbox pipeline. Uniform Manifold Approximation and Projections (UMAP) plots showing the final cluster annotations for the midbrain dataset. Abbreviations: astro, astrocytes; DaN, dopaminergic neurons; endo, endothelial cells; excit, excitatory neurons; GABA, GABAergic neurons; inhib, inhibitory neurons; mg, microglia; olig, oligodendrocytes; opc, oligodendrocyte precursor cells; peri, pericytes. Step 8: Differential gene expression analysis In Step 8, we are going to perform differential gene expression (DGE) analysis between PD and controls. Prior to computing DGE, we are going to add additional metadata to the Seurat object. Add metadata We are going to add metadata to the Seurat object using a csv file containing the additional metadata: Sample_ID DiseaseStatus Parkinson1 PD Parkinson2 PD Parkinson3 PD Parkinson4 PD Parkinson5 PD Control1 HC Control2 HC Control3 HC Control4 HC Control5 HC Control6 HC Note: This is csv file is available here . To add metadata, we set the following execution parameters for Step 8 ( step8_par.txt ): DGE method Parameter Value General par_save_RNA Yes General par_save_metadata Yes General par_seurat_object NULL Add metadata par_merge_meta Sample_ID Add metadata par_metadata ~/scrnabox/tutorial/Midbrain_dataset_example_files/metadata.csv We can add metadata to the Seurat object using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --addmeta T The above code produces the following outputs: step8 \u251c\u2500\u2500 info8 \u2502 \u251c\u2500\u2500 sessionInfo_add_metadata.txt \u2502 \u251c\u2500\u2500 seu_MetaData.txt \u2502 \u2514\u2500\u2500 seu_RNA.txt \u2514\u2500\u2500 objs8 \u2514\u2500\u2500 seu_step8.rds Next, we can perform DGE analysis. ScRNAbox can compute DGE between two condition conditions (in our case PD vs control) using all cells or cell type groups . Furthermore, scRNAbox provides two frameworks for computing DGE: 1) Cell-based DGE Cells are used as replicates and DGE is computed using the Seurat FindMarkers ( Macosko et al. 2015 ). While FindMarkers supports several statistical frameworks to compute DGE, we set the default method in our implementation to MAST, which is tailored for scRNAseq data ( Finak et al. 2015 ) 2) Sample-based DGE Samples are used as replicates by applying a pseudo-bulk analysis. The Seurat AggregateExpression function is used to compute the sum of RNA counts for each gene across all cells from a particular sample ( Cao et al. 2022 ). The DESq2 statistical framework is then used to compute DGE between conditions using the aggregated counts. ( Love et al. 2014 ) Cell-based DGE using all cells To perform cell-based DGE using all cells we must begin by preparing the contrast matrix ( step8_contrast_cell_based_all_cells.txt ): contrast_name meta_data_variable group1 group2 HCvPD DiseaseStatus HC PD To perform cell-based DGE using all cells , we set the following execution parameters for Step 8 ( step8_par.txt ): DGE method Parameter Value General par_save_RNA No General par_save_metadata No General par_seurat_object NULL Cell-based DGE with all cells par_run_cell_based_all_cells Yes Cell-based DGE par_statistical_method MAST We can perform cell-based DGE using all cells using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --rundge T The above code produces the following outputs: step8 \u2514\u2500\u2500 Cell_based_all_cells \u2514\u2500\u2500 HCvPD \u251c\u2500\u2500 HCvPD_DEG.csv \u2514\u2500\u2500 HCvPD_volcano_plot.pdf Cell-based DGE using cell type groups To perform cell-based DGE using cell type groups we must begin by preparing the contrast matrix ( step8_contrast_sample_based_celltype_groups.txt ): contrast_name meta_data_celltype cell_type meta_data_variable group1 group2 OligocendrocytesPDvHC clustering_annotation Oligodendrocyte DiseaseStatus HC PD MicrogliaPDvHC clustering_annotation Microglia DiseaseStatus HC PD ExcitatoryPDvHC clustering_annotation Excitatory DiseaseStatus HC PD InhibitoryPDvHC clustering_annotation Inhibitory DiseaseStatus HC PD GABAPDvHC clustering_annotation GABA DiseaseStatus HC PD OPCPDvHC clustering_annotation OPC DiseaseStatus HC PD AstrocytesPDvHC clustering_annotation Atrocyte DiseaseStatus HC PD EndothelialPDvHC clustering_annotation Endothelial DiseaseStatus HC PD PericytesPDvHC clustering_annotation Pericyte DiseaseStatus HC PD EpendymalPDvHC clustering_annotation Ependymal DiseaseStatus HC PD DaNPDvHC clustering_annotation DaN DiseaseStatus HC PD To perform cell-based DGE using all cells , we set the following execution parameters for Step 8 ( step8_par.txt ): DGE method Parameter Value General par_save_RNA No General par_save_metadata No General par_seurat_object NULL Cell-based DGE with cell type groups par_run_cell_based_cell_type_groups Yes Cell-based DGE par_statistical_method MAST We can perform cell-based DGE using all cells using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --rundge T The above code produces the following outputs: step8 \u2514\u2500\u2500 Cell_based_celltype_groups \u251c\u2500\u2500 AstrocytesPDvHC \u2502 \u251c\u2500\u2500 AstrocytesPDvHC_DEG.csv \u2502 \u2514\u2500\u2500 AstrocytesPDvHC_volcano_plot.pdf \u251c\u2500\u2500 DaNPDvHC \u2502 \u251c\u2500\u2500 DaNPDvHC_DEG.csv \u2502 \u2514\u2500\u2500 DaNPDvHC_volcano_plot.pdf \u251c\u2500\u2500 EndothelialPDvHC \u2502 \u251c\u2500\u2500 EndothelialPDvHC_DEG.csv \u2502 \u2514\u2500\u2500 EndothelialPDvHC_volcano_plot.pdf \u251c\u2500\u2500 EpendymalPDvHC \u2502 \u251c\u2500\u2500 EpendymalPDvHC_DEG.csv \u2502 \u2514\u2500\u2500 EpendymalPDvHC_volcano_plot.pdf \u251c\u2500\u2500 ExcitatoryPDvHC \u2502 \u251c\u2500\u2500 ExcitatoryPDvHC_DEG.csv \u2502 \u2514\u2500\u2500 ExcitatoryPDvHC_volcano_plot.pdf \u251c\u2500\u2500 GABAPDvHC \u2502 \u251c\u2500\u2500 GABAPDvHC_DEG.csv \u2502 \u2514\u2500\u2500 GABAPDvHC_volcano_plot.pdf \u251c\u2500\u2500 InhibitoryPDvHC \u2502 \u251c\u2500\u2500 InhibitoryPDvHC_DEG.csv \u2502 \u2514\u2500\u2500 InhibitoryPDvHC_volcano_plot.pdf \u251c\u2500\u2500 MicrogliaPDvHC \u2502 \u251c\u2500\u2500 MicrogliaPDvHC_DEG.csv \u2502 \u2514\u2500\u2500 MicrogliaPDvHC_volcano_plot.pdf \u251c\u2500\u2500 OligocendrocytesPDvHC \u2502 \u251c\u2500\u2500 OligocendrocytesPDvHC_DEG.csv \u2502 \u2514\u2500\u2500 OligocendrocytesPDvHC_volcano_plot.pdf \u251c\u2500\u2500 OPCPDvHC \u2502 \u251c\u2500\u2500 OPCPDvHC_DEG.csv \u2502 \u2514\u2500\u2500 OPCPDvHC_volcano_plot.pdf \u2514\u2500\u2500 PericytesPDvHC \u251c\u2500\u2500 PericytesPDvHC_DEG.csv \u2514\u2500\u2500 PericytesPDvHC_volcano_plot.pdf Sample-based DGE using all cells To perform sample-based DGE using all cells we must begin by preparing the contrast matrix ( step8_contrast_sample_based_all_cells.txt ): ContrastName MainContrast SampleID PDvControl DiseaseStatus Sample_ID To perform sample-based DGE using all cells , we set the following execution parameters for Step 8 ( step8_par.txt ): DGE method Parameter Value General par_save_RNA No General par_save_metadata No General par_seurat_object NULL Sample-based DGE with all cells par_run_sample_based_all_cells Yes We can perform sample-based DGE using all cells using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --rundge T The above code produces the following outputs: step8 \u2514\u2500\u2500 Sample_based_all_cells \u2514\u2500\u2500 PDvControl \u251c\u2500\u2500 Aggregated_expression_summary.csv \u251c\u2500\u2500 DGE_AllCellsMainContrast HC vs PD.csv \u251c\u2500\u2500 DGE_AllCellsMainContrast HC vs PD.pdf \u2514\u2500\u2500 SampleBased_DGEsummarytable.csv Sample-based DGE using cell type groups To perform sample-based DGE using cell type groups we must begin by preparing the contrast matrix ( step8_contrast_sample_based_celltype_groups.txt ): ContrastName CellType MainContrast SampleID PDvControlbulk clustering_annotation DiseaseStatus Sample_ID To perform sample-based DGE using cell type groups , we set the following execution parameters for Step 8 ( step8_par.txt ): DGE method Parameter Value General par_save_RNA No General par_save_metadata No General par_seurat_object NULL Sample-based DGE with cell type groups par_run_sample_based_cell_type_groups Yes We can perform sample-based DGE using cell type groups using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --rundge T The above code produces the following outputs: step8 \u2514\u2500\u2500 sample_based_celltype_groups \u2514\u2500\u2500 PDvControlbulk \u251c\u2500\u2500 Aggregated_expression_summary.csv \u251c\u2500\u2500 figs \u2502 \u251c\u2500\u2500 DGE_AstrocytesMainContrast HC vs PD.pdf \u2502 \u251c\u2500\u2500 DGE_DaNMainContrast HC vs PD.pdf \u2502 \u251c\u2500\u2500 DGE_EndothelialMainContrast HC vs PD.pdf \u2502 \u251c\u2500\u2500 DGE_EpendymalMainContrast HC vs PD.pdf \u2502 \u251c\u2500\u2500 DGE_ExcitatoryMainContrast HC vs PD.pdf \u2502 \u251c\u2500\u2500 DGE_GABAMainContrast HC vs PD.pdf \u2502 \u251c\u2500\u2500 DGE_InhibitoryMainContrast HC vs PD.pdf \u2502 \u251c\u2500\u2500 DGE_MicrogliaMainContrast HC vs PD.pdf \u2502 \u251c\u2500\u2500 DGE_OligodendrocytesMainContrast HC vs PD.pdf \u2502 \u251c\u2500\u2500 DGE_OPCMainContrast HC vs PD.pdf \u2502 \u2514\u2500\u2500 DGE_PericytesMainContrast HC vs PD.pdf \u251c\u2500\u2500 info \u2502 \u251c\u2500\u2500 DGE_AstrocytesMainContrast HC vs PD.csv \u2502 \u251c\u2500\u2500 DGE_DaNMainContrast HC vs PD.csv \u2502 \u251c\u2500\u2500 DGE_EndothelialMainContrast HC vs PD.csv \u2502 \u251c\u2500\u2500 DGE_EpendymalMainContrast HC vs PD.csv \u2502 \u251c\u2500\u2500 DGE_ExcitatoryMainContrast HC vs PD.csv \u2502 \u251c\u2500\u2500 DGE_GABAMainContrast HC vs PD.csv \u2502 \u251c\u2500\u2500 DGE_InhibitoryMainContrast HC vs PD.csv \u2502 \u251c\u2500\u2500 DGE_MicrogliaMainContrast HC vs PD.csv \u2502 \u251c\u2500\u2500 DGE_OligodendrocytesMainContrast HC vs PD.csv \u2502 \u251c\u2500\u2500 DGE_OPCMainContrast HC vs PD.csv \u2502 \u2514\u2500\u2500 DGE_PericytesMainContrast HC vs PD.csv \u2514\u2500\u2500 SampleBased_DGEsummarytable.csv Figure 12. Figures produced by Step 8 of the scRNAbox pipeline. Step 8 of the scRNAbox pipeline allows users to compute DGE between groups by two methods: 1) using cells as replicates with MAST (cell-based) and 2) using samples as replicates with DESeq2 (sample-based). Volcano plots are produced for each user-defined DGE contrast. For the midbrain dataset, we leveraged both methods to compute DGE between Parkinson's disease (PD) subjects and controls across A) all cells, B) astrocytes, C) dopaminergic neurons (DaN), D) endothelial cells, E) Ependymal cells, F) excitatory neurons, G) GABAergic neurons, H) Inhibitory neurons, I) microglia, J) oligodendrocytes, K) oligodendrocyte precursor cells (OPC), and H) Pericytes. Analysis of differential gene expression outputs For the code used to perform downstream analysis of the differentially expressed genes presented in our pre-print manuscript see here . Publication-ready figures The code used to produce the publication-ready figures used in our pre-print manuscript is avaliable here here . Job Configurations The following job configurations were used for our analysis of the midbrain dataset. Job Configurations can be modified for each analytical step in the scrnabox_config.ini file in ~/pipeline/job_info/configs Step THREADS_ARRAY MEM_ARRAY WALLTIME_ARRAY Step2 4 40g 00-05:00 Step3 4 40g 00-05:00 Step4 4 40g 00-05:00 Step5 4 100g 00-05:00 Step6 4 100g 00-05:00 Step7 MarkerGSEA 4 40g 00-05:00 Step7 KnownMarkers 4 40g 00-02:00 Step7 ReferenceAnnotation 4 200g 00-12:00 Step7 Annotate 4 40g 00-01:00 Step8 AddMeta 4 40g 00-02:00 Step8 RunDGE 4 40g 00-12:00","title":"Standard analysis track: Midbrain dataset"},{"location":"Dataset1/#standard-analysis-track-midbrain-dataset","text":"","title":"Standard analysis track: Midbrain dataset"},{"location":"Dataset1/#contents","text":"Introduction Downloading the midbrain dataset Installation scrnabox.slurm installation CellRanger installation R library preparation and R package installation scRNAbox: Standard Analysis Track Step 0: Set up Step 1: FASTQ to gene expression matrix Step 2: Create Seurat object and remove ambient RNA Step 3: Quality control and filtering Step 4: Doublet removal Step 5: Integration Step 6: Clustering Step 7: Cluster annotation Tool 1: Cluster marker GSEA Tool 2: Expression profiling of known marker genes Tool 3: Reference-based annotation Annotate Step 8: Differential gene expression Add metadata Cell-based DGE using all cells Cell-based DGE using cell type groups Sample-based DGE using all cells Sample-based DGE using cell type groups Analysis of differential gene expression outputs Publication-ready figures Job Configurations","title":"Contents"},{"location":"Dataset1/#introduction","text":"This guide illustrates the steps taken to analyze the midbrain dataset ( Smajic et al. 2022 ) that was presented in our pre-print manuscript . This dataset describes single-nuclei transcriptomes from the post-mortem midbrains of five individuals with Parkinson\u2019s disease (PD) and six controls sequenced separately.","title":"Introduction"},{"location":"Dataset1/#downlaoding-the-midbrain-dataset","text":"In you want to use the midbrain dataset to test the scRNAbox pipeline, please see here for detialed instructions on how to download the publicly available data.","title":"Downlaoding the midbrain dataset"},{"location":"Dataset1/#installation","text":"","title":"Installation"},{"location":"Dataset1/#scrnaboxslurm-installation","text":"To download the latest version of scrnabox.slurm (v0.1.52) run the following command: wget https://github.com/neurobioinfo/scrnabox/releases/download/v0.1.52/scrnabox.slurm.zip unzip scrnabox.slurm.zip For a description of the options for running scrnabox.slurm run the following command: bash /pathway/to/scrnabox.slurm/launch_scrnabox.sh -h If the scrnabox.slurm has been installed properly, the above command should return the folllowing: scrnabox pipeline version 0.1.52 ------------------- mandatory arguments: -d (--dir) = Working directory (where all the outputs will be printed) (give full path) --steps = Specify what steps, e.g., 2 to run just step 2, 2-4, run steps 2 through 4) optional arguments: -h (--help) = See helps regarding the pipeline arguments. --method = Select your preferred method: HTO and SCRNA for hashtag, and Standard scRNA, respectively. --msd = You can get the hashtag labels by running the following code (HTO Step 4). --markergsea = Identify marker genes for each cluster and run marker gene set enrichment analysis (GSEA) using EnrichR libraries (Step 7). --knownmarkers = Profile the individual or aggregated expression of known marker genes. --referenceannotation = Generate annotation predictions based on the annotations of a reference Seurat object (Step 7). --annotate = Add clustering annotations to Seurat object metadata (Step 7). --addmeta = Add metadata columns to the Seurat object (Step 8). --rundge = Perform differential gene expression contrasts (Step 8). --seulist = You can directly call the list of Seurat objects to the pipeline. --rcheck = You can identify which libraries are not installed. ------------------- For a comprehensive help, visit https://neurobioinfo.github.io/scrnabox/site/ for documentation.","title":"scrnabox.slurm installation"},{"location":"Dataset1/#cellranger-installation","text":"For information regarding the installation of CellRanger, please visit the 10X Genomics documentation . If CellRanger is already installed on your HPC system, you may skip the CellRanger installation procedures. For our analysis of the midbrain dataset we used the 10XGenomics GRCh38-3.0.0 reference genome and CellRanger v5.0.1. For more information regarding how to prepare reference genomes for the CellRanger counts pipeline, please see the 10X Genomics documentation .","title":"CellRanger installation"},{"location":"Dataset1/#r-library-preparation-and-r-package-installation","text":"We must prepapre a common R library where we will load all of the required R packages. If the required R packages are already installed on your HPC system in a common R library, you may skip the following procedures. We will first install R . The analyses presented in our pre-print manuscript were conducted using v4.2.1. # install R module load r/4.2.1 Then, we will run the installation code, which creates a directory where the R packages will be loaded and will install the required R packages: # Folder for R packages R_PATH=~/path/to/R/library mkdir -p $R_PATH # Install package Rscript ./scrnabox.slurm/soft/R/install_packages_scrnabox.R $R_PATH","title":"R library preparation and R package installation"},{"location":"Dataset1/#scrnabox-pipeline","text":"","title":"scRNAbox pipeline"},{"location":"Dataset1/#step-0-set-up","text":"Now that scrnabox.slurm , CellRanger , R , and the required R packages have been installed, we can proceed to our analysis with the scRNAbox pipeline. We will create a pipeline folder designated for the analysis and run Step 0, selecting the standard analysis track ( --method SCRNA ), using the following code: mkdir pipeline cd pipeline export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 0 \\ --method SCRNA Next, we will navigate to the scrnabox_config.ini file in ~/pipeline/job_info/configs to define the HPC account holder ( ACCOUNT ), the path to the environmental module ( MODULEUSE ), the path to CellRanger from the environmental module directory ( CELLRANGER ), CellRanger version ( CELLRANGER_VERSION ), R version ( R_VERSION ), and the path to the R library ( R_LIB_PATH ): cd ~/pipeline/job_info/configs nano scrnabox_config.ini ACCOUNT=account-name MODULEUSE=/path/to/environmental/module CELLRANGER=/path/to/cellranger/from/module/directory CELLRANGER_VERSION=5.0.1 R_VERSION=4.2.1 R_LIB_PATH=/path/to/R/library Next, we can check to see if all of the required R packages have been properly installed using the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 0 \\ --rcheck","title":"Step 0: Set up"},{"location":"Dataset1/#step-1-fastq-to-gene-expression-matrix","text":"In Step 1, we will run the CellRanger counts pipeline to generate feature-barcode expression matrices from the FASTQ files. While it is possible to manually prepare the library.csv files for each of the 11 samples in the experiment prior to running Step 1, we are going to opt for automated library preparation. For more information regarding the manual prepartion of library.csv files, please see the the CellRanger library preparation tutorial. For our analysis of the midbrain dataset we set the following execution parameters for Step 1 ( ~/pipeline/job_info/parameters/step1_par.txt ): Parameter Value par_automated_library_prep Yes par_fastq_directory /path/to/directory/containing/fastqs par_sample_names PD1, PD2, PD3, PD4, PD5, CTRL1, CTRL2, CTRL3, CTRL4, CTRL5, CTRL6 par_rename_samples Yes par_new_sample_names Parkinson1, Parkinson2, Parkinson3, Parkinson4, Parkinson5, Control1, Control2, Control3, Control4, Control5, Control6 par_paired_end_seq TRUE par_ref_dir_grch ~/genome/10xGenomics/refdata-cellranger-GRCh38-3.0.0 par_r1_length NULL (commented out) par_r2_length NULL (commented out) par_mempercode 30 par_include_introns Yes par_no_target_umi_filter NULL (commented out) par_expect_cells NULL (commented out) par_force_cells NULL (commented out) par_no_bam NULL (commented out) Note: The parameters file for each step is located in ~/pipeline/job_info/parameters . For a comprehensive description of the execution parameters for each step see here . Given that CellRanger runs a user interface and is not submitted as a job, it is recommended to run Step 1 in a 'screen' , which will allow the the task to keep running if the connection is broken. To run Step 1, use the following command: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline screen -S run_Midbrain_application_case bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 1 The outputs of the CellRanger counts pipeline are deposited into ~/pipeline/step1 .","title":"Step 1: FASTQ to gene expression matrix"},{"location":"Dataset1/#step-2-create-seurat-object-and-remove-ambient-rna","text":"In Step 2, we are going to use the CellRanger-generated feature-barcode matrices to produce unique Seurat objects for each of the 11 samples. In this step, we have the option to correct the expression matrices for ambient RNA contamination; however, because Smajic et al. did not perform this analytical procedure we will skip it. In addition, we will perform cell cycle scoring. Prior to performing cell cycle scoring, we must normalize and scale the counts matrix. For our analysis of the midbrain dataset we set the following execution parameters for Step 2 ( ~/pipeline/job_info/parameters/step2_par.txt ): Parameter Value par_save_RNA Yes par_save_metadata Yes par_ambient_RNA No par_min.cells_L 1 par_normalization.method LogNormalize par_scale.factor 10000 par_selection.method vst par_nfeatures 2500 We can run Step 2 using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 2 Step 2 produces the following outputs for each sample. As an example we show the outputs for sample Control1 : step2 \u251c\u2500\u2500 figs2 \u2502 \u251c\u2500\u2500 ambient_RNA_estimation_Control1.pdf \u2502 \u251c\u2500\u2500 ambient_RNA_markers_Control1.pdf \u2502 \u251c\u2500\u2500 cell_cyle_dim_plot_Control1.pdf \u2502 \u251c\u2500\u2500 vioplot_Control1.pdf \u2502 \u2514\u2500\u2500 zoomed_in_vioplot_Control1.pdf \u251c\u2500\u2500 info2 \u2502 \u251c\u2500\u2500 estimated_ambient_RNA_Control1.txt \u2502 \u251c\u2500\u2500 MetaData_Control1.txt \u2502 \u251c\u2500\u2500 meta_info_Control1.txt \u2502 \u251c\u2500\u2500 Control1_ambient_rna_summary.rds \u2502 \u251c\u2500\u2500 Control1_RNA.txt \u2502 \u251c\u2500\u2500 sessionInfo.txt \u2502 \u2514\u2500\u2500 summary_Control1.txt \u2514\u2500\u2500 objs2 \u2514\u2500\u2500 Control1.rds Note: For a comprehensive description of the outputs for each analytical step, please see the Outputs section of the scRNAbox documentation. Figure 1. Figures produced by Step 2 of the scRNAbox pipeline. The figures for the Control1 sample are shown as an example. A) Estimated ambient RNA contamination rate (Rho) by SoupX. Estimates of the RNA contamination rate using various estimators are visualized via a frequency distribution; the true contamination rate is assigned as the most frequent estimate (red line; 5.1%). B) Log10 ratios of observed counts to expected counts for marker genes from each cluster. Clusters are defined by the CellRanger counts pipeline. The red line displays the estimated RNA contamination rate if the estimation was based entirely on the corresponding gene. C) Principal component analysis (PCA) of Seurat S and G2M cell cycle reference genes. D) Violin plots showing the distribution of cells according to quality control metrics calculated in Step 2. E) Zoomed in violin plots, from the minimum to the mean, showing the distribution of cells according to quality control metrics calculated in Step 2.","title":"Step 2: Create Seurat object and remove ambient RNA"},{"location":"Dataset1/#step-3-quality-control-and-filtering","text":"In Step 3, we are going to perform quality control procedures and filter out low quality cells. We are going to filter out cells with < 1000 unique RNA transcripts, < 1500 total RNA transcripts, and > 10% mitochondria and ribosomal RNA. In addition, we are going to remove mitochondrial-encoded and ribosomal genes. For our analysis of the midbrain dataset we set the following execution parameters for Step 3 ( ~/pipeline/job_info/parameters/step2_par.txt ): Parameter Value par_save_RNA Yes par_save_metadata Yes par_seurat_object NULL par_nFeature_RNA_L 1000 par_nFeature_RNA_U NULL par_nCount_RNA_L 1500 par_nCount_RNA_U NULL par_mitochondria_percent_L 0 par_mitochondria_percent_U 10 par_ribosomal_percent_L 0 par_ribosomal_percent_U 10 par_remove_mitochondrial_genes Yes par_remove_ribosomal_genes Yes par_remove_genes NULL par_regress_cell_cycle_genes No par_regress_custom_genes No par_regress_genes NULL par_normalization.method LogNormalize par_scale.factor 10000 par_selection.method vst par_nfeatures 2500 par_top 10 par_npcs_pca 30 We can run Step 3 using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 3 Step 3 produces the following outputs for each sample. As an example we show the outputs for sample Control1 : step3 \u251c\u2500\u2500 figs3 \u2502 \u251c\u2500\u2500 dimplot_pca_Control1.pdf \u2502 \u251c\u2500\u2500 elbowplot_Control1.pdf \u2502 \u251c\u2500\u2500 filtered_QC_vioplot_Control1.pdf \u2502 \u2514\u2500\u2500 VariableFeaturePlot_Control1.pdf \u251c\u2500\u2500 info3 \u2502 \u251c\u2500\u2500 MetaData_Control1.txt \u2502 \u251c\u2500\u2500 meta_info_Control1.txt \u2502 \u251c\u2500\u2500 most_variable_genes_Control1.txt \u2502 \u251c\u2500\u2500 Control1_RNA.txt \u2502 \u251c\u2500\u2500 sessionInfo.txt \u2502 \u2514\u2500\u2500 summary_Control1.txt \u2514\u2500\u2500 objs3 \u2514\u2500\u2500 Control1.rds Figure 2. Figures produced by Step 3 of the scRNAbox pipeline. The figures for the Control1 sample are shown as an example. A) Violin plots showing the distribution of cells according to quality control metrics after filtering by user-defined thresholds. B) Scatter plot showing the top 2500 most variable features; the top 10 most variable features are labelled. C) Principal component analysis (PCA) visualizing the first two principal component (PC). D) Elbow plot to visualize the percentage of variance explained by each PC.","title":"Step 3: Quality control and filtering"},{"location":"Dataset1/#step-4-doublet-removal","text":"In this Step, we are going to identify doublets (erroneous barcodes produced by two or more cells) and remove them from downstream analyses using the DoubletFinder tool (McGinnis et al. 2019). For optimal performance, DoubletFinder requires the user to define the following parameters: The number of statistically significant PCs (par_PCs) The number of artificial doublets to generate (par_pN) The expected doublet rate for each sample (par_expected_doublet_rate) The number of statistically significant PCs can be informed by the elbow plots produced in Step 3; in this case the top 25 PCs should maintain a robust compression of the data across samples. DoubletFinder is largely invariant to the number of artifical doublets generated , therefore we will maintain the default parameter of 0.25. The expected doublet rate can be informed by the number of recovered cells (~8% for ~10,000 cells recovered). The number of recovered cells can be informed by the barcodes.tsv.gz file produced by the CellRanger counts pipeline, which is located in ~/pipeline/step1/<sample>/output_folder/outs/filtered_feature_bc_matrix . The expected doublet rates are approximations obtained from the 10X Genomics Next GEM Single Cell 3' v3.1 documentation , which was used by Smajic et al. for library preparation. For our analysis of the midbrain dataset we set the following execution parameters for Step 4 ( ~/pipeline/job_info/parameters/step4_par.txt ): Parameter Value par_save_RNA Yes par_save_metadata Yes par_seurat_object NULL par_RunUMAP_dims 25 par_RunUMAP_n.neighbors 65 par_dropDN Yes par_PCs 25 par_pN 0.25 par_sct FALSE par_sample_names Control1, Control2, Control3, Control4, Control5, Control6, Parkinson1, Parkinson2, Parkinson3, Parkinson4, Parkinson5 par_expected_doublet_rate 0.042, 0.042, 0.023, 0.04, 0.027, 0.053, 0.023, 0.053, 0.034, 0.023, 0.05 We can run Step 4 using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 4 Step 4 produces the following outputs for each sample. As an example we show the outputs for sample Control1 : step4 \u251c\u2500\u2500 figs4 \u2502 \u251c\u2500\u2500 Control1_DF.classifications.pdf \u2502 \u2514\u2500\u2500 Control1_doublet_summary.pdf \u251c\u2500\u2500 info4 \u2502 \u251c\u2500\u2500 MetaData_Control1.txt \u2502 \u251c\u2500\u2500 meta_info_Control1.txt \u2502 \u251c\u2500\u2500 n_predicted_doublets_Control1.txt \u2502 \u251c\u2500\u2500 Control1_RNA.txt \u2502 \u2514\u2500\u2500 sessionInfo.txt \u2514\u2500\u2500 objs4 \u2514\u2500\u2500 Control1.rds Figure 3. Figures produced by Step 4 of the scRNAbox pipeline standard track. The figures for the Control1 sample are shown as an example. A) Results of doublet detection analysis with DoubletFinder. Left: violin plot displaying the distribution of the proportion of artificial nearest neighbours (pANN) across singlets and doublets. Right: a bar plot of the number of predicted singlets and doublets. B) Uniform Manifold Approximation Projection (UMAP) plots coloured by droplet assignments (singlet or doublet).","title":"Step 4: Doublet removal"},{"location":"Dataset1/#step-5-integration","text":"In Step 5, we are going to integrate the individual Seurat objects to enable joint analyses across all 11 samples. We will then perform normalization, scaling and linear dimensional reduction on the integrated assay. The outputs from Step 5 will inform the optimal clustering parameters for Step 6. For our analysis of the midbrain dataset we set the following execution parameters for Step 5: Parameter Value par_save_RNA Yes par_save_metadata Yes par_seurat_object NULL par_one_seurat No par_integrate_seurat Yes par_merge_seurat No par_DefaultAssay RNA par_normalization.method LogNormalize par_scale.factor 10000 par_selection.method vst par_nfeatures 4000 par_FindIntegrationAnchors_dim 25 par_RunPCA_npcs 30 par_RunUMAP_dims 25 par_RunUMAP_n.neighbors 65 par_compute_jackstraw yes We can run Step 5 using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 5 Step 5 produces the following outputs: step5 \u251c\u2500\u2500 figs5 \u2502 \u251c\u2500\u2500 integrated_DimPlot_pca.pdf \u2502 \u251c\u2500\u2500 integrated_DimPlot_umap.pdf \u2502 \u251c\u2500\u2500 integrated_elbow.pdf \u2502 \u2514\u2500\u2500 integrated_Jackstraw_plot.pdf \u251c\u2500\u2500 info5 \u2502 \u251c\u2500\u2500 int_meta_info_seu_step5.csv \u2502 \u251c\u2500\u2500 sessionInfo.txt \u2502 \u251c\u2500\u2500 seu_int_RNA.txt \u2502 \u2514\u2500\u2500 seu_int_MetaData.txt \u2514\u2500\u2500 objs5 \u2514\u2500\u2500 seu_step5.rds Figure 4. Figures produced by Step 5 of the scRNAbox pipeline standard track. A) Principal component analysis (PCA) visualizing the first two principal components (PC) of the integrated assay, colour coded by sample. B) Uniform Manifold Approximation and Projections (UMAP) plot of the integrated assay, colour coded by sample. C) Elbow plot to visualize the percentage of variance explained by each PC. D) Jackstraw plot to visualize the distribution of p-values for each PC.","title":"Step 5: Integration"},{"location":"Dataset1/#step-6-clustering","text":"In Step 6, we will cluster the cells to indentify groups with similar expression profiles. Based on the Elbow and Jackstraw plots produced in Step 5, we are going to use the first 25 PCs as input. We will cluster the cells at clustering resolutions ranging from 0.0 to 2.0. To determine the stability of clusters at each clustering resolution, we will run the Louvain clustering algorithm 25 times for each resolution, while shuffling the order of the nodes in the graph for each iteration. We will then compute the Adjusted Rand Index (ARI) between pairs of clusters at a given clustering resolution. For our analysis of the midbrain dataset we set the following execution parameters for Step 6: Parameter Value par_save_RNA Yes par_save_metadata Yes par_seurat_object NULL par_skip_integration No par_FindNeighbors_dims 25 par_RunUMAP_dims 25 par_FindNeighbors_k.param 30 par_FindNeighbors_prune.SNN 1/15 par_FindClusters_resolution 0, 0.05, 0.2, 0.6, 0.8, 1.0, 1.2, 1.4, 1.5, 1.6, 1.8, 2.0 par_compute_ARI Yes par_RI_reps 25 We can run Step 6 using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 6 Step 6 produces the following outputs: step6 \u251c\u2500\u2500 ARI \u2502 \u251c\u2500\u2500 ARI.pdf \u2502 \u2514\u2500\u2500 clustering_ARI.xlsx \u251c\u2500\u2500 figs6 \u2502 \u251c\u2500\u2500 clustree_int.pdf \u2502 \u251c\u2500\u2500 integrated_snn_res.0.05.pdf \u2502 \u251c\u2500\u2500 integrated_snn_res.0.2.pdf \u2502 \u251c\u2500\u2500 integrated_snn_res.0.6.pdf \u2502 \u251c\u2500\u2500 integrated_snn_res.0.8.pdf \u2502 \u251c\u2500\u2500 integrated_snn_res.0.pdf \u2502 \u251c\u2500\u2500 integrated_snn_res.1.2.pdf \u2502 \u251c\u2500\u2500 integrated_snn_res.1.4.pdf \u2502 \u251c\u2500\u2500 integrated_snn_res.1.5.pdf \u2502 \u251c\u2500\u2500 integrated_snn_res.1.6.pdf \u2502 \u251c\u2500\u2500 integrated_snn_res.1.8.pdf \u2502 \u251c\u2500\u2500 integrated_snn_res.1.pdf \u2502 \u2514\u2500\u2500 integrated_snn_res.2.pdf \u251c\u2500\u2500 info6 \u2502 \u251c\u2500\u2500 meta_info.csv \u2502 \u251c\u2500\u2500 sessionInfo.txt \u2502 \u251c\u2500\u2500 seu_MetaData.txt \u2502 \u2514\u2500\u2500 seu_RNA.txt \u2514\u2500\u2500 objs6 \u2514\u2500\u2500 seu_step6.rds Figure 5. Figures produced by Step 6 of the scRNAbox pipeline. A) Uniform Manifold Approximation and Projections (UMAP) plot, coloured according to the clusters identified at a resolution of 1.5. UMAP plots are produced for each user-defined clustering resolution. B) Mean (top panel) and standard deviation (sd; middle panel) of the Adjusted RNA Index (ARI) between clustering pairs at each user-defined clustering resolution. The bottom panel shows the number of clusters at each user-defined clustering resolution. C) ClustTree plot to visualize inter-cluster dynamics at varying cluster resolutions.","title":"Step 6: Clustering"},{"location":"Dataset1/#step-7-cluster-annotation","text":"In Step 7, we are going to annotate the clusters identified in Step 6 to identify the cell types comprising the midbrain dataset. scRNAbox provides three distinct tools for cluster annotations: Tool 1: Cluster marker and gene set enrichment analysis (GSEA) Tool 2: Expression profiling of known marker genes Tool 3: Reference-based annotation Additionally, users can add cluster annotations to the Seurat object. For comprehensive description of each cluster annotation tool, please see the Step 7:Cluster annotation section of the scRNAbox documentation or our pre-print manuscript .","title":"Step 7: Cluster annotation"},{"location":"Dataset1/#tool-1-cluster-marker-gsea","text":"Using Tool 1, we are first going to identify differentially expressed marker genes for each cluster. We must define the number of marker genes for each cluster that we want scRNAbox to report and select a clustering resolution that we want to annotate. In this case we will report the top two marker genes for each cluster at a clustering resolution of 1.5. To identify the marker genes for each cluster, we set the following execution parameters for Step 7 ( step7_par.txt ): Annotation tool Parameter Value General par_save_RNA No General par_save_metadata No General par_seurat_object NULL General par_level_cluster integrated_snn_res.1.5 Tool 1 par_run_find_marker Yes Tool 1 par_run_enrichR No Tool 1 par_top_sel 2 Tool 1 par_db NULL We can identify the marker genes for each cluster using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --markergsea T The above code produces the following outputs: step7 \u251c\u2500\u2500 figs7 \u2502 \u2514\u2500\u2500 marker \u2502 \u2514\u2500\u2500 heatmap.pdf \u251c\u2500\u2500 info7 \u2502 \u251c\u2500\u2500 marker \u2502 \u2502 \u251c\u2500\u2500 cluster_just_genes.xlsx \u2502 \u2502 \u251c\u2500\u2500 ClusterMarkers.csv \u2502 \u2502 \u251c\u2500\u2500 ClusterMarkers.rds \u2502 \u2502 \u251c\u2500\u2500 cluster_whole.xlsx \u2502 \u2502 \u2514\u2500\u2500 top_sel.csv \u2502 \u2514\u2500\u2500 sessionInfo_find_marker.txt \u2514\u2500\u2500 objs7 \u2514\u2500\u2500 seu_step7.rds Figure 6. Figure produced by Tool 1 (marker gene gene set enrichment analysis) of scRNAbox's cluster annotation module (Step 7). A heatmap is produced to visualize the expression of the top markers genes at the cell level, stratified by cluster. The top marker genes for each cluster identified at a clustering resolution of 1.5 is shown. Now that we have identified the marker genes for each cluster, we will perform a gene set enrichment analysis (GSEA) ; we will test the differentially expressed genes (DEG) in the positive direction (Log2 fold-change > 0.00) for enrichment across gene set libraries that define cell types using the EnrichR tool. For this analysis, we will use the following libraries: Descartes_Cell_Types_and_Tissue_2021; CellMarker_Augmented_2021; Azimuth_Cell_Types_2021 cell type libraries. To perform GSEA, we set the following execution parameters for Step 7 ( step7_par.txt ): Annotation tool Parameter Value General par_save_RNA No General par_save_metadata No General par_seurat_object NULL General par_level_cluster integrated_snn_res.1.5 Tool 1 par_run_find_marker No Tool 1 par_run_enrichR Yes Tool 1 par_top_sel 2 Tool 1 par_db NULL If your HPC allows access to the internet , we can perform GSEA using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --markergsea T Note: If your HPC does not allow access to the internet , you will have to run GSEA locally. For more information, please see the Step 7:Cluster annotation section of the scRNAbox documentation. The above code produces the following outputs. As an example, we are only showing the outputs for cluster 0: step7 \u2514\u2500\u2500 annot_enrich \u2514\u2500\u2500 cluster0 \u251c\u2500\u2500 Er_genes_clust_0_Azimuth_Cell_Types_2021.csv \u251c\u2500\u2500 Er_genes_clust_0_CellMarker_Augmented_2021.csv \u251c\u2500\u2500 Er_genes_clust_0_Descartes_Cell_Types_and_Tissue_2021.csv \u251c\u2500\u2500 plotenrich_clust_0_1.pdf \u251c\u2500\u2500 plotenrich_clust_0_2.pdf \u2514\u2500\u2500 plotenrich_clust_0_3.pdf Figure 7. Figures produced by Tool 1 (marker gene gene set enrichment analysis) of scRNAbox's cluster annotation module (Step 7). Upon identifying the top marker genes for each cluster at the user-defined clustering resolution, users can perfrom a gene set enrichment analysis (GSEA) using the EnrichR tool for all marker genes in the positive direction (Log2 fold-change > 0.00). Bar plots are produced to visualize the most enriched terms for each cluster. As an example, the top enrichment results across A) Azimuth Cell Types 2021, B) Descartes Cell Types and Tissue 2021, and C) CellMarker Augmented 2021 cell type libraries for cluster 5 are shown. Note: It is possible to identify cluster-specific marker genes and perform GSEA at the same time by setting both par_run_find_marker= \"Yes\" and par_run_enrichR= \"Yes .","title":"Tool 1: Cluster marker GSEA"},{"location":"Dataset1/#tool-2-expression-profiling-of-known-marker-genes","text":"Using Tool 2, we are going to profile the midbrain dataset for known cell type marker genes. First, we are going to visualize the expression of the marker genes used by Smajic et al. to define their clusters: Cell type Gene Oligodendrocytes MOBP OPC VCAN Astrocytes AQP4 Ependymal FOXJ1 Microglia CD74 Endothelial CLDN5 Pericytes PDGFRB Excitatory neurons SLC17A6 Inhibitory neurons GAD2 GABAergic neurons GAD2 , GRIK1 Dopaminergic neurons (DaN) TH Degenerating DaN CADPS2 To visualize these features, we set the following execution parameters for Step 7 ( step7_par.txt ): Annotation tool Parameter Value General par_save_RNA No General par_save_metadata No General par_seurat_object NULL General par_level_cluster integrated_snn_res.1.5 Tool 2 par_run_module_score No Tool 2 par_run_visualize_markers Yes Tool 2 par_module_score NULL Tool 2 par_select_features_list MOBP, VCAN, AQP4, FOXJ1, CD74, CLDN5, GFRB, SLC17A6, GAD2, GRIK1, TH, CADPS2 Tool 2 par_select_features_csv NULL We can visualize the expression of these features using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --knownmarkers T The above code produces the following outputs: step7 \u251c\u2500\u2500 figs7 \u2514\u2500\u2500 visualize_features \u251c\u2500\u2500 list_dot_plot.pdf \u251c\u2500\u2500 list_feature_plot.pdf \u2514\u2500\u2500 list_violin_plot.pdf Figure 8. Figures produced by Tool 2 (profiling the expression of known marker genes) of scRNAbox's cluster annotation module (Step 7). ScRNAbox allows users to visualize the individual and aggregated expression of known marker genes. For the midbrain dataset, we visualized the individual expression of the marker genes used by Smajic et al. to define their clusters. Feature plots visualizing the expression of each individual gene at the cell level are shown. Additionally, violin plots and dot plots are produced to visualize the expression of individual genes at the cluster level. Next, we are going to use a csv file to defineline multiple lists of cell type marker genes: da_neurons NPC_orStemLike mature_neurons excitatory_neurons inhbitory_neurons astrocytes oligodendrocytes radial_glia epithelial microglia TH DCX RBFOX3 GRIA2 GAD1 GFAP MBP PTPRC HES1 IBA1 SLC6A3 NEUROD1 SYP GRIA1 GAD2 S100B MOG AIF1 HES5 P2RY12 SLC18A2 TBR1 VAMP1 GRIA4 GAT1 AQP4 OLIG1 ADGRE1 SOX2 P2RY13 SOX6 PCNA VAMP2 GRIN1 PVALB APOE OLIG2 VIM SOX10 TREM119 NDNF MKI67 TUBB3 GRIN2B GABR2 SOX9 SOX10 TNC NES GPR34 SNCG SOX2 SYT1 GRIN2A GABR1 SLC1A3 PTPRZ1 CDH1 SIGLECH ALDH1A1 NES BSN GRIN3A GBRR1 FAM107A NOTCH1 TREM2 CALB1 PAX6 HOMER1 GRIN3 GABRB2 HOPX CX3CR1 TACR2 SLC17A6 GRIP1 GABRB1 LIFR FCRLS SLC17A6 CAMK2A GABRB3 ITGB5 OLFML3 SLC32A1 GABRA6 IL6ST HEXB OTX2 GABRA1 SLC1A3 TGFBR1 GRP GABRA4 SALL1 LPL TRAK2 MERTK CCK PROS1 VIP Note : This is csv file is available here . We will use this csv file to visualize the individual expression of each gene and calculate the module score, which will allow us to visualize the aggregated expression of each gene set. To visualize the unique and aggregated expression of these features, we set the following execution parameters for Step 7 ( step7_par.txt ): Annotation tool Parameter Value General par_save_RNA No General par_save_metadata No General par_seurat_object NULL General par_level_cluster integrated_snn_res.1.5 Tool 2 par_run_module_score Yes Tool 2 par_run_visualize_markers Yes Tool 2 par_module_score ~/scrnabox/tutorial/Midbrain_dataset_example_files/module_score.csv Tool 2 par_select_features_list NULL Tool 2 par_select_features_csv ~/scrnabox/tutorial/Midbrain_dataset_example_files/module_score.csv We can visualize the individual and aggregated expression of these features using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --knownmarkers T The above code produces the following outputs: step7 \u251c\u2500\u2500 figs7 \u2502 \u251c\u2500\u2500 module_score \u2502 \u2502 \u251c\u2500\u2500 module_score_astrocytes.pdf \u2502 \u2502 \u251c\u2500\u2500 module_score_da_neurons.pdf \u2502 \u2502 \u251c\u2500\u2500 module_score_epithelial.pdf \u2502 \u2502 \u251c\u2500\u2500 module_score_excitatory_neurons.pdf \u2502 \u2502 \u251c\u2500\u2500 module_score_inhbitory_neurons.pdf \u2502 \u2502 \u251c\u2500\u2500 module_score_mature_neurons.pdf \u2502 \u2502 \u251c\u2500\u2500 module_score_microglia.pdf \u2502 \u2502 \u251c\u2500\u2500 module_score_NPC_orStemLike.pdf \u2502 \u2502 \u251c\u2500\u2500 module_score_oligodendrocytes.pdf \u2502 \u2502 \u2514\u2500\u2500 module_score_radial_glia.pdf \u2502 \u2514\u2500\u2500 visualize_features \u2502 \u251c\u2500\u2500 astrocytes_dot_plot.pdf \u2502 \u251c\u2500\u2500 astrocytes_feature_plot.pdf \u2502 \u251c\u2500\u2500 astrocytes_violin_plot.pdf \u2502 \u251c\u2500\u2500 da_neurons_dot_plot.pdf \u2502 \u251c\u2500\u2500 da_neurons_feature_plot.pdf \u2502 \u251c\u2500\u2500 da_neurons_violin_plot.pdf \u2502 \u251c\u2500\u2500 epithelial_dot_plot.pdf \u2502 \u251c\u2500\u2500 epithelial_feature_plot.pdf \u2502 \u251c\u2500\u2500 epithelial_violin_plot.pdf \u2502 \u251c\u2500\u2500 excitatory_neurons_dot_plot.pdf \u2502 \u251c\u2500\u2500 excitatory_neurons_feature_plot.pdf \u2502 \u251c\u2500\u2500 excitatory_neurons_violin_plot.pdf \u2502 \u251c\u2500\u2500 inhbitory_neurons_dot_plot.pdf \u2502 \u251c\u2500\u2500 inhbitory_neurons_feature_plot.pdf \u2502 \u251c\u2500\u2500 inhbitory_neurons_violin_plot.pdf \u2502 \u251c\u2500\u2500 mature_neurons_dot_plot.pdf \u2502 \u251c\u2500\u2500 mature_neurons_feature_plot.pdf \u2502 \u251c\u2500\u2500 mature_neurons_violin_plot.pdf \u2502 \u251c\u2500\u2500 microglia_dot_plot.pdf \u2502 \u251c\u2500\u2500 microglia_feature_plot.pdf \u2502 \u251c\u2500\u2500 microglia_violin_plot.pdf \u2502 \u251c\u2500\u2500 NPC_orStemLike_dot_plot.pdf \u2502 \u251c\u2500\u2500 NPC_orStemLike_feature_plot.pdf \u2502 \u251c\u2500\u2500 NPC_orStemLike_violin_plot.pdf \u2502 \u251c\u2500\u2500 oligodendrocytes_dot_plot.pdf \u2502 \u251c\u2500\u2500 oligodendrocytes_feature_plot.pdf \u2502 \u251c\u2500\u2500 oligodendrocytes_violin_plot.pdf \u2502 \u251c\u2500\u2500 radial_glia_dot_plot.pdf \u2502 \u251c\u2500\u2500 radial_glia_feature_plot.pdf \u2502 \u2514\u2500\u2500 radial_glia_violin_plot.pdf \u2514\u2500\u2500 info7 \u2514\u2500\u2500 module_score \u2514\u2500\u2500 geneset_by_cluster.csv Figure 9. Figures produced by Tool 2 (profiling the expression of known marker genes) of scRNAbox's cluster annotation module (Step 7). ScRNAbox allows users to visualize the individual and aggregated expression of known marker genes. For the midbrain dataset, we used gene sets of well known marker genes for cell types in the human midbrain. The microglia gene set is shown as an example. A) Dot plot visualizing the individual expression of marker genes in the microglia gene set. B) Uniform manifold approximation and projection (UMAP) plot visualizing the module score of the microglia gene set at the cell level. The module score allows for profiling the aggregated expression of multiple genes.","title":"Tool 2: Expression profiling of known marker genes"},{"location":"Dataset1/#tool-3-reference-based-annotation","text":"Using Method 3, we are going to leverage the cell-type annotations from a reference Seurat object and generate annotation predictions for the query dataset. For reference-based annotation we must define the path to a our reference Seurat object and the column of the reference Seurat object's metadata that contains the cell type annotations. For the midbrain dataset, we are going to use a reference Seurat object from Kamath et al. . The reference Seurat object was obtain from the Broad Institute Single Cell Portal To perform reference-based annotations, we set the following execution parameters for Step 7 ( step7_par.txt ): Annotation tool Parameter Value General par_save_RNA Yes General par_save_metadata Yes General par_seurat_object NULL General par_level_cluster integrated_snn_res.1.5 Tool 3 par_reference /path/to/Kamath/reference/seurat/object Tool 3 par_reference_name Kamath Tool 3 par_level_celltype Cell_Type Tool 3 par_FindTransferAnchors_dim 10 Tool 3 par_futureglobalsmaxSize 60000 * 1024^2 We can perform reference-based annotations using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --referenceannotation T The above code produces the following outputs: step7 \u251c\u2500\u2500 figs7 \u2502 \u2514\u2500\u2500 reference_based_annotation \u2502 \u2514\u2500\u2500 Kammath_UMAP_transferred_labels.pdf \u251c\u2500\u2500 info7 \u2502 \u251c\u2500\u2500 reference_based_annotation \u2502 \u2502 \u2514\u2500\u2500 Kammath_prediction_summary.xlsx \u2502 \u251c\u2500\u2500 sessionInfo_annotate.txt \u2502 \u251c\u2500\u2500 seu_MetaData.txt \u2502 \u2514\u2500\u2500 seu_RNA.txt \u2514\u2500\u2500 objs7 \u2514\u2500\u2500 seu_step7.rds Figure 10. Figure produced by Tool 3 (reference-based annotation) of scRNAbox's cluster annotation module (Step 7). ScRNAbox allows users to predict cell type annotations of their query dataset based on the predictions of a reference dataset. Left: Uniform Manifold Approximation and Projections (UMAP) plot of clustered and annotated reference Seurat object; single-nucleus RNA sequencing (scRRNAseq) of midbrain tissue produced by Kamath et al. , coloured by cell type. Right: UMAP of the label transfer predictions for the midbrain dataset, coloured by predicted cell type. Abbreviations: astro, astrocytes; da, dopaminergic neurons; endo, endothelial cells; nonda, non-dopaminergic neurons; mg, microglia; olig, oligodendrocytes; opc, oligodendrocyte precursor cells.","title":"Tool 3: Reference-based annotation"},{"location":"Dataset1/#annotate","text":"Now that we have used the three cluster annotation tools available in the scRNAbox pipeline, we are going to manually curate the results and add cluster annotations to the midbrain dataset. To add annotations, we set the following execution parameters for Step 7 ( step7_par.txt ): Annotation tool Parameter Value General par_save_RNA Yes General par_save_metadata Yes General par_seurat_object NULL General par_level_cluster integrated_snn_res.1.5 Annotate par_annotate_resolution integrated_snn_res.1.5 Annotate par_name_metadata clustering_annotation Annotate par_annotate_labels Oligodendrocyte, Oligodendrocyte, Excitatory, Oligodendrocyte, Oligodendrocyte, Microglia, OPC, Oligodendrocyte, Oligodendrocyte , Inhibitory, Atrocyte, Endothlial, Oligodendrocyte, Microglia, Oligodendrocyte, Astrocyte, Oligodendrocyte, Oligodendrocyte, Atrocyte, Oligodendrocyte, Pericyte, Ependymal, OPC, Pericyte, GABA, Inhibitory, Oligodendrocyte, Microglia, Astrocyte, Endothelial, DaN, CADPS2, Microglia We can add our annotations using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --annotate T The above code produces the following outputs: step7 \u251c\u2500\u2500 figs7 \u2502 \u2514\u2500\u2500 annotate \u2502 \u251c\u2500\u2500 clustering_annotation_cluster_annotation.pdf \u2502 \u2514\u2500\u2500 clustering_annotation_split_cluster_annotation.pdf \u251c\u2500\u2500 info7 \u2502 \u251c\u2500\u2500 meta_info_seu_step7.txt \u2502 \u251c\u2500\u2500 sessionInfo_annotate.txt \u2502 \u251c\u2500\u2500 seu_MetaData.txt \u2502 \u2514\u2500\u2500 seu_RNA.txt \u2514\u2500\u2500 objs7 \u2514\u2500\u2500 seu_step7.rds Figure 11. Annotated Seurat object produced in Step 7 of the scRNAbox pipeline. Uniform Manifold Approximation and Projections (UMAP) plots showing the final cluster annotations for the midbrain dataset. Abbreviations: astro, astrocytes; DaN, dopaminergic neurons; endo, endothelial cells; excit, excitatory neurons; GABA, GABAergic neurons; inhib, inhibitory neurons; mg, microglia; olig, oligodendrocytes; opc, oligodendrocyte precursor cells; peri, pericytes.","title":"Annotate"},{"location":"Dataset1/#step-8-differential-gene-expression-analysis","text":"In Step 8, we are going to perform differential gene expression (DGE) analysis between PD and controls. Prior to computing DGE, we are going to add additional metadata to the Seurat object.","title":"Step 8: Differential gene expression  analysis"},{"location":"Dataset1/#add-metadata","text":"We are going to add metadata to the Seurat object using a csv file containing the additional metadata: Sample_ID DiseaseStatus Parkinson1 PD Parkinson2 PD Parkinson3 PD Parkinson4 PD Parkinson5 PD Control1 HC Control2 HC Control3 HC Control4 HC Control5 HC Control6 HC Note: This is csv file is available here . To add metadata, we set the following execution parameters for Step 8 ( step8_par.txt ): DGE method Parameter Value General par_save_RNA Yes General par_save_metadata Yes General par_seurat_object NULL Add metadata par_merge_meta Sample_ID Add metadata par_metadata ~/scrnabox/tutorial/Midbrain_dataset_example_files/metadata.csv We can add metadata to the Seurat object using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --addmeta T The above code produces the following outputs: step8 \u251c\u2500\u2500 info8 \u2502 \u251c\u2500\u2500 sessionInfo_add_metadata.txt \u2502 \u251c\u2500\u2500 seu_MetaData.txt \u2502 \u2514\u2500\u2500 seu_RNA.txt \u2514\u2500\u2500 objs8 \u2514\u2500\u2500 seu_step8.rds Next, we can perform DGE analysis. ScRNAbox can compute DGE between two condition conditions (in our case PD vs control) using all cells or cell type groups . Furthermore, scRNAbox provides two frameworks for computing DGE: 1) Cell-based DGE Cells are used as replicates and DGE is computed using the Seurat FindMarkers ( Macosko et al. 2015 ). While FindMarkers supports several statistical frameworks to compute DGE, we set the default method in our implementation to MAST, which is tailored for scRNAseq data ( Finak et al. 2015 ) 2) Sample-based DGE Samples are used as replicates by applying a pseudo-bulk analysis. The Seurat AggregateExpression function is used to compute the sum of RNA counts for each gene across all cells from a particular sample ( Cao et al. 2022 ). The DESq2 statistical framework is then used to compute DGE between conditions using the aggregated counts. ( Love et al. 2014 )","title":"Add metadata"},{"location":"Dataset1/#cell-based-dge-using-all-cells","text":"To perform cell-based DGE using all cells we must begin by preparing the contrast matrix ( step8_contrast_cell_based_all_cells.txt ): contrast_name meta_data_variable group1 group2 HCvPD DiseaseStatus HC PD To perform cell-based DGE using all cells , we set the following execution parameters for Step 8 ( step8_par.txt ): DGE method Parameter Value General par_save_RNA No General par_save_metadata No General par_seurat_object NULL Cell-based DGE with all cells par_run_cell_based_all_cells Yes Cell-based DGE par_statistical_method MAST We can perform cell-based DGE using all cells using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --rundge T The above code produces the following outputs: step8 \u2514\u2500\u2500 Cell_based_all_cells \u2514\u2500\u2500 HCvPD \u251c\u2500\u2500 HCvPD_DEG.csv \u2514\u2500\u2500 HCvPD_volcano_plot.pdf","title":"Cell-based DGE using all cells"},{"location":"Dataset1/#cell-based-dge-using-cell-type-groups","text":"To perform cell-based DGE using cell type groups we must begin by preparing the contrast matrix ( step8_contrast_sample_based_celltype_groups.txt ): contrast_name meta_data_celltype cell_type meta_data_variable group1 group2 OligocendrocytesPDvHC clustering_annotation Oligodendrocyte DiseaseStatus HC PD MicrogliaPDvHC clustering_annotation Microglia DiseaseStatus HC PD ExcitatoryPDvHC clustering_annotation Excitatory DiseaseStatus HC PD InhibitoryPDvHC clustering_annotation Inhibitory DiseaseStatus HC PD GABAPDvHC clustering_annotation GABA DiseaseStatus HC PD OPCPDvHC clustering_annotation OPC DiseaseStatus HC PD AstrocytesPDvHC clustering_annotation Atrocyte DiseaseStatus HC PD EndothelialPDvHC clustering_annotation Endothelial DiseaseStatus HC PD PericytesPDvHC clustering_annotation Pericyte DiseaseStatus HC PD EpendymalPDvHC clustering_annotation Ependymal DiseaseStatus HC PD DaNPDvHC clustering_annotation DaN DiseaseStatus HC PD To perform cell-based DGE using all cells , we set the following execution parameters for Step 8 ( step8_par.txt ): DGE method Parameter Value General par_save_RNA No General par_save_metadata No General par_seurat_object NULL Cell-based DGE with cell type groups par_run_cell_based_cell_type_groups Yes Cell-based DGE par_statistical_method MAST We can perform cell-based DGE using all cells using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --rundge T The above code produces the following outputs: step8 \u2514\u2500\u2500 Cell_based_celltype_groups \u251c\u2500\u2500 AstrocytesPDvHC \u2502 \u251c\u2500\u2500 AstrocytesPDvHC_DEG.csv \u2502 \u2514\u2500\u2500 AstrocytesPDvHC_volcano_plot.pdf \u251c\u2500\u2500 DaNPDvHC \u2502 \u251c\u2500\u2500 DaNPDvHC_DEG.csv \u2502 \u2514\u2500\u2500 DaNPDvHC_volcano_plot.pdf \u251c\u2500\u2500 EndothelialPDvHC \u2502 \u251c\u2500\u2500 EndothelialPDvHC_DEG.csv \u2502 \u2514\u2500\u2500 EndothelialPDvHC_volcano_plot.pdf \u251c\u2500\u2500 EpendymalPDvHC \u2502 \u251c\u2500\u2500 EpendymalPDvHC_DEG.csv \u2502 \u2514\u2500\u2500 EpendymalPDvHC_volcano_plot.pdf \u251c\u2500\u2500 ExcitatoryPDvHC \u2502 \u251c\u2500\u2500 ExcitatoryPDvHC_DEG.csv \u2502 \u2514\u2500\u2500 ExcitatoryPDvHC_volcano_plot.pdf \u251c\u2500\u2500 GABAPDvHC \u2502 \u251c\u2500\u2500 GABAPDvHC_DEG.csv \u2502 \u2514\u2500\u2500 GABAPDvHC_volcano_plot.pdf \u251c\u2500\u2500 InhibitoryPDvHC \u2502 \u251c\u2500\u2500 InhibitoryPDvHC_DEG.csv \u2502 \u2514\u2500\u2500 InhibitoryPDvHC_volcano_plot.pdf \u251c\u2500\u2500 MicrogliaPDvHC \u2502 \u251c\u2500\u2500 MicrogliaPDvHC_DEG.csv \u2502 \u2514\u2500\u2500 MicrogliaPDvHC_volcano_plot.pdf \u251c\u2500\u2500 OligocendrocytesPDvHC \u2502 \u251c\u2500\u2500 OligocendrocytesPDvHC_DEG.csv \u2502 \u2514\u2500\u2500 OligocendrocytesPDvHC_volcano_plot.pdf \u251c\u2500\u2500 OPCPDvHC \u2502 \u251c\u2500\u2500 OPCPDvHC_DEG.csv \u2502 \u2514\u2500\u2500 OPCPDvHC_volcano_plot.pdf \u2514\u2500\u2500 PericytesPDvHC \u251c\u2500\u2500 PericytesPDvHC_DEG.csv \u2514\u2500\u2500 PericytesPDvHC_volcano_plot.pdf","title":"Cell-based DGE using cell type groups"},{"location":"Dataset1/#sample-based-dge-using-all-cells","text":"To perform sample-based DGE using all cells we must begin by preparing the contrast matrix ( step8_contrast_sample_based_all_cells.txt ): ContrastName MainContrast SampleID PDvControl DiseaseStatus Sample_ID To perform sample-based DGE using all cells , we set the following execution parameters for Step 8 ( step8_par.txt ): DGE method Parameter Value General par_save_RNA No General par_save_metadata No General par_seurat_object NULL Sample-based DGE with all cells par_run_sample_based_all_cells Yes We can perform sample-based DGE using all cells using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --rundge T The above code produces the following outputs: step8 \u2514\u2500\u2500 Sample_based_all_cells \u2514\u2500\u2500 PDvControl \u251c\u2500\u2500 Aggregated_expression_summary.csv \u251c\u2500\u2500 DGE_AllCellsMainContrast HC vs PD.csv \u251c\u2500\u2500 DGE_AllCellsMainContrast HC vs PD.pdf \u2514\u2500\u2500 SampleBased_DGEsummarytable.csv","title":"Sample-based DGE using all cells"},{"location":"Dataset1/#sample-based-dge-using-cell-type-groups","text":"To perform sample-based DGE using cell type groups we must begin by preparing the contrast matrix ( step8_contrast_sample_based_celltype_groups.txt ): ContrastName CellType MainContrast SampleID PDvControlbulk clustering_annotation DiseaseStatus Sample_ID To perform sample-based DGE using cell type groups , we set the following execution parameters for Step 8 ( step8_par.txt ): DGE method Parameter Value General par_save_RNA No General par_save_metadata No General par_seurat_object NULL Sample-based DGE with cell type groups par_run_sample_based_cell_type_groups Yes We can perform sample-based DGE using cell type groups using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --rundge T The above code produces the following outputs: step8 \u2514\u2500\u2500 sample_based_celltype_groups \u2514\u2500\u2500 PDvControlbulk \u251c\u2500\u2500 Aggregated_expression_summary.csv \u251c\u2500\u2500 figs \u2502 \u251c\u2500\u2500 DGE_AstrocytesMainContrast HC vs PD.pdf \u2502 \u251c\u2500\u2500 DGE_DaNMainContrast HC vs PD.pdf \u2502 \u251c\u2500\u2500 DGE_EndothelialMainContrast HC vs PD.pdf \u2502 \u251c\u2500\u2500 DGE_EpendymalMainContrast HC vs PD.pdf \u2502 \u251c\u2500\u2500 DGE_ExcitatoryMainContrast HC vs PD.pdf \u2502 \u251c\u2500\u2500 DGE_GABAMainContrast HC vs PD.pdf \u2502 \u251c\u2500\u2500 DGE_InhibitoryMainContrast HC vs PD.pdf \u2502 \u251c\u2500\u2500 DGE_MicrogliaMainContrast HC vs PD.pdf \u2502 \u251c\u2500\u2500 DGE_OligodendrocytesMainContrast HC vs PD.pdf \u2502 \u251c\u2500\u2500 DGE_OPCMainContrast HC vs PD.pdf \u2502 \u2514\u2500\u2500 DGE_PericytesMainContrast HC vs PD.pdf \u251c\u2500\u2500 info \u2502 \u251c\u2500\u2500 DGE_AstrocytesMainContrast HC vs PD.csv \u2502 \u251c\u2500\u2500 DGE_DaNMainContrast HC vs PD.csv \u2502 \u251c\u2500\u2500 DGE_EndothelialMainContrast HC vs PD.csv \u2502 \u251c\u2500\u2500 DGE_EpendymalMainContrast HC vs PD.csv \u2502 \u251c\u2500\u2500 DGE_ExcitatoryMainContrast HC vs PD.csv \u2502 \u251c\u2500\u2500 DGE_GABAMainContrast HC vs PD.csv \u2502 \u251c\u2500\u2500 DGE_InhibitoryMainContrast HC vs PD.csv \u2502 \u251c\u2500\u2500 DGE_MicrogliaMainContrast HC vs PD.csv \u2502 \u251c\u2500\u2500 DGE_OligodendrocytesMainContrast HC vs PD.csv \u2502 \u251c\u2500\u2500 DGE_OPCMainContrast HC vs PD.csv \u2502 \u2514\u2500\u2500 DGE_PericytesMainContrast HC vs PD.csv \u2514\u2500\u2500 SampleBased_DGEsummarytable.csv Figure 12. Figures produced by Step 8 of the scRNAbox pipeline. Step 8 of the scRNAbox pipeline allows users to compute DGE between groups by two methods: 1) using cells as replicates with MAST (cell-based) and 2) using samples as replicates with DESeq2 (sample-based). Volcano plots are produced for each user-defined DGE contrast. For the midbrain dataset, we leveraged both methods to compute DGE between Parkinson's disease (PD) subjects and controls across A) all cells, B) astrocytes, C) dopaminergic neurons (DaN), D) endothelial cells, E) Ependymal cells, F) excitatory neurons, G) GABAergic neurons, H) Inhibitory neurons, I) microglia, J) oligodendrocytes, K) oligodendrocyte precursor cells (OPC), and H) Pericytes.","title":"Sample-based DGE using cell type groups"},{"location":"Dataset1/#analysis-of-differential-gene-expression-outputs","text":"For the code used to perform downstream analysis of the differentially expressed genes presented in our pre-print manuscript see here .","title":"Analysis of differential gene expression outputs"},{"location":"Dataset1/#publication-ready-figures","text":"The code used to produce the publication-ready figures used in our pre-print manuscript is avaliable here here .","title":"Publication-ready figures"},{"location":"Dataset1/#job-configurations","text":"The following job configurations were used for our analysis of the midbrain dataset. Job Configurations can be modified for each analytical step in the scrnabox_config.ini file in ~/pipeline/job_info/configs Step THREADS_ARRAY MEM_ARRAY WALLTIME_ARRAY Step2 4 40g 00-05:00 Step3 4 40g 00-05:00 Step4 4 40g 00-05:00 Step5 4 100g 00-05:00 Step6 4 100g 00-05:00 Step7 MarkerGSEA 4 40g 00-05:00 Step7 KnownMarkers 4 40g 00-02:00 Step7 ReferenceAnnotation 4 200g 00-12:00 Step7 Annotate 4 40g 00-01:00 Step8 AddMeta 4 40g 00-02:00 Step8 RunDGE 4 40g 00-12:00","title":"Job Configurations"},{"location":"Dataset2/","text":"HTO analysis track: PBMC dataset Contents Introduction Downloading the pbmc dataset Installation scrnabox.slurm installation CellRanger installation R library preparation and R package installation scRNAbox: HTO Analysis Track Step 0: Set up Step 1: FASTQ to gene expression matrix Step 2: Create Seurat object and remove ambient RNA Step 3: Quality control and filtering Step 4: Demultiplexing and doublet detection Publication-ready figures Job Configurations Introduction This guide illustrates the steps taken for our analysis of the PBMC dataset in our pre-print manuscript . Here, we are using the HTO analysis track of scRNAbox to analyze a publicly available scRNAseq dataset produced by Stoeckius et al. . This data set describes peripheral blood mononuclear cells (PBMC) from eight human donors, which were tagged with sample-specific barcodes, pooled, and sequenced together in a single run. Downloading the PBMC dataset In you want to use the PBMC dataset to test the scRNAbox pipeline, please see here for detialed instructions on how to download the publicly available data. Installation scrnabox.slurm installation To download the latest version of scrnabox.slurm (v0.1.52) run the following command: wget https://github.com/neurobioinfo/scrnabox/releases/download/v0.1.52/scrnabox.slurm.zip unzip scrnabox.slurm.zip For a description of the options for running scrnabox.slurm run the following command: bash /pathway/to/scrnabox.slurm/launch_scrnabox.sh -h If the scrnabox.slurm has been installed properly, the above command should return the folllowing: scrnabox pipeline version 0.1.52 ------------------- mandatory arguments: -d (--dir) = Working directory (where all the outputs will be printed) (give full path) --steps = Specify what steps, e.g., 2 to run just step 2, 2-4, run steps 2 through 4) optional arguments: -h (--help) = See helps regarding the pipeline arguments. --method = Select your preferred method: HTO and SCRNA for hashtag, and Standard scRNA, respectively. --msd = You can get the hashtag labels by running the following code (HTO Step 4). --markergsea = Identify marker genes for each cluster and run marker gene set enrichment analysis (GSEA) using EnrichR libraries (Step 7). --knownmarkers = Profile the individual or aggregated expression of known marker genes. --referenceannotation = Generate annotation predictions based on the annotations of a reference Seurat object (Step 7). --annotate = Add clustering annotations to Seurat object metadata (Step 7). --addmeta = Add metadata columns to the Seurat object (Step 8). --rundge = Perform differential gene expression contrasts (Step 8). --seulist = You can directly call the list of Seurat objects to the pipeline. --rcheck = You can identify which libraries are not installed. ------------------- For a comprehensive help, visit https://neurobioinfo.github.io/scrnabox/site/ for documentation. CellRanger installation For information regarding the installation of CellRanger, please visit the 10X Genomics documentation . If CellRanger is already installed on your HPC system, you may skip the CellRanger installation procedures. For our analysis of the midbrain dataset we used the 10XGenomics GRCh38-3.0.0 reference genome and CellRanger v5.0.1. For more information regarding how to prepare reference genomes for the CellRanger counts pipeline, please see the 10X Genomics documentation . R library preparation and R package installation We must prepapre a common R library where we will load all of the required R packages. If the required R packages are already installed on your HPC system in a common R library, you may skip the following procedures. We will first install R . The analyses presented in our pre-print manuscript were conducted using v4.2.1. # install R module load r/4.2.1 Then, we will run the installation code, which creates a directory where the R packages will be loaded and will install the required R packages: # Folder for R packages R_PATH=~/path/to/R/library mkdir -p $R_PATH # Install package Rscript ./scrnabox.slurm/soft/R/install_packages_scrnabox.R $R_PATH scRNAbox pipeline Step 0: Set up Now that scrnabox.slurm , CellRanger , R , and the required R packages have been installed, we can proceed to our analysis with the scRNAbox pipeline. We will create a pipeline folder designated for the analysis and run Step 0, selecting the HTO analysis track ( --method HTO ), using the following code: mkdir pipeline cd pipeline export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 0 \\ --method HTO Next, we will navigate to the scrnabox_config.ini file in ~/pipeline/job_info/configs to define the HPC account holder ( ACCOUNT ), the path to the environmental module ( MODULEUSE ), the path to CellRanger from the environmental module directory ( CELLRANGER ), CellRanger version ( CELLRANGER_VERSION ), R version ( R_VERSION ), and the path to the R library ( R_LIB_PATH ): cd ~/pipeline/job_info/configs nano scrnabox_config.ini ACCOUNT=account-name MODULEUSE=/path/to/environmental/module CELLRANGER=/path/to/cellranger/from/module/directory CELLRANGER_VERSION=5.0.1 R_VERSION=4.2.1 R_LIB_PATH=/path/to/R/library Next, we can check to see if all of the required R packages have been properly installed using the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 0 \\ --rcheck Step 1: FASTQ to gene expression matrix In Step 1, we will run the CellRanger counts pipeline to generate feature-barcode expression matrices from the FASTQ files. While it is possible to manually prepare the library.csv and feature_ref.csv files for the sequencing run prior to running Step 1, for this analysis we are going to opt for automated library preparation. For more information regarding the manual prepartion of library.csv and feature_ref.csv files, please see the the CellRanger library preparation tutorial. For our analysis of the PBMC dataset we set the following execution parameters for Step 1 ( ~/pipeline/job_info/parameters/step1_par.txt ): Parameter Value par_automated_library_prep Yes par_fastq_directory /path/to/directory/contaning/fastqs par_RNA_run_names run1GEX par_HTO_run_names run1HTO par_seq_run_names run1 par_paired_end_seq Yes par_id Hash1, Hash2, Hash3, Hash4, Hash5, Hash6, Hash7, Hash8 par_name A_TotalSeqA, B_TotalSeqA, C_TotalSeqA, D_TotalSeqA, E_TotalSeqA, F_TotalSeqA, G_TotalSeqA, H_TotalSeqA par_read R2 par_pattern 5P(BC) par_sequence AGGACCATCCAA, ACATGTTACCGT, AGCTTACTATCC, TCGATAATGCGA, GAGGCTGAGCTA, GTGTGACGTATT, ACTGTCTAACGG, TATCACATCGGT par_ref_dir_grch ~/genome/10xGenomics/refdata-cellranger-GRCh38-3.0.0 par_r1_length NULL (commented out) par_r2_length NULL (commented out) par_mempercode 30 par_include_introns NULL (commented out) par_no_target_umi_filter NULL (commented out) par_expect_cells NULL (commented out) par_force_cells NULL (commented out) par_no_bam NULL (commented out) Note: The parameters file for each step is located in ~/pipeline/job_info/parameters . For a comprehensive description of the execution parameters for each step see here . Given that CellRanger runs a user interface and is not submitted as a Job, it is recommended to run Step 1 in a 'screen' which will allow the the task to keep running if the connection is broken. To run Step 1, use the following command: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline screen -S run_PBMC_application_case bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 1 The outputs of the CellRanger counts pipeline are deposited into ~/pipeline/step1 . Step 2: Create Seurat object and remove ambient RNA In Step 2, we are going to begin by correcting the RNA assay for ambient RNA removal using SoupX ( Young et al. 2020 ). We will then use the the ambient RNA-corrected feature-barcode matrices to create a Seurat object. For our analysis of the PBMC dataset we set the following execution parameters for Step 2 ( ~/pipeline/job_info/parameters/step2_par.txt ): Parameter Value par_save_RNA Yes par_save_metadata Yes par_ambient_RNA Yes par_normalization.method LogNormalize par_scale.factor 10000 par_selection.method vst par_nfeatures 2500 We can run Step 2 using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 2 Step 2 produces the following outputs: ~/pipeline step2 \u251c\u2500\u2500 figs2 \u2502 \u251c\u2500\u2500 ambient_RNA_estimation_run1.pdf \u2502 \u251c\u2500\u2500 ambient_RNA_markers_run1.pdf \u2502 \u251c\u2500\u2500 cell_cyle_dim_plot_run1.pdf \u2502 \u251c\u2500\u2500 vioplot_run1.pdf \u2502 \u2514\u2500\u2500 zoomed_in_vioplot_run1.pdf \u251c\u2500\u2500 info2 \u2502 \u251c\u2500\u2500 estimated_ambient_RNA_run1.txt \u2502 \u251c\u2500\u2500 MetaData_1.txt \u2502 \u251c\u2500\u2500 meta_info_1.txt \u2502 \u251c\u2500\u2500 run1_ambient_rna_summary.rds \u2502 \u251c\u2500\u2500 sessionInfo.txt \u2502 \u251c\u2500\u2500 seu1_RNA.txt \u2502 \u2514\u2500\u2500 summary_seu1.txt \u251c\u2500\u2500 objs2 \u2502 \u2514\u2500\u2500 run1.rds \u2514\u2500\u2500 step2_ambient \u2514\u2500\u2500 run1 \u251c\u2500\u2500 barcodes.tsv \u251c\u2500\u2500 genes.tsv \u2514\u2500\u2500 matrix.mtxs Note: For a comprehensive description of the outputs for each analytical step, please see the Outputs section of the scRNAbox documentation. Figure 1. Figures produced by Step 2 of the scRNAbox pipeline. A) Estimated ambient RNA contamination rate (Rho) by SoupX. Estimates of the RNA contamination rate using various estimators are visualized via a frequency distribution; the true contamination rate is assigned as the most frequent estimate (red line; 8.7%). B) Log10 ratios of observed counts to expected counts for marker genes from each cluster. Clusters are defined by the CellRanger counts pipeline. The red line displays the estimated RNA contamination rate if the estimation was based entirely on the corresponding gene. C) Principal component analysis (PCA) of Seurat S and G2M cell cycle reference genes. D) Violin plots showing the distribution of cells according to quality control metrics calculated in Step 2. E) Zoomed in violin plots, from the minimum to the mean, showing the distribution of cells according to quality control metrics calculated in Step 2. Step 3: Quality control and filtering In Step 3, we are going to perform quality control procedures and filter out low quality cells. We are going to filter out cells with < 50 unique RNA transcripts, > 6000 unique RNA transcripts, < 200 total RNA transcripts, > 7000 total RNA transcripts, and > 50% mitochondria. For our analysis of the PBMC dataset we set the following execution parameters for Step 3 ( ~/pipeline/job_info/parameters/step2_par.txt ): Parameter Value par_save_RNA Yes par_save_metadata Yes par_seurat_object NULL par_nFeature_RNA_L 50 par_nFeature_RNA_U 6000 par_nCount_RNA_L 200 par_nCount_RNA_U 7000 par_mitochondria_percent_L 0 par_mitochondria_percent_U 50 par_ribosomal_percent_L 0 par_ribosomal_percent_U 100 par_remove_mitochondrial_genes No par_remove_ribosomal_genes No par_remove_genes NULL par_regress_cell_cycle_genes Yes par_normalization.method LogNormalize par_scale.factor 10000 par_selection.method vst par_nfeatures 2500 par_top 10 par_npcs_pca 30 We can run Step 3 using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 3 Step 3 produces the following outputs. step3 \u251c\u2500\u2500 figs3 \u2502 \u251c\u2500\u2500 dimplot_pca_run1.pdf \u2502 \u251c\u2500\u2500 elbowplot_run1.pdf \u2502 \u251c\u2500\u2500 filtered_QC_vioplot_run1.pdf \u2502 \u2514\u2500\u2500 VariableFeaturePlot_run1.pdf \u251c\u2500\u2500 info3 \u2502 \u251c\u2500\u2500 MetaData_run1.txt \u2502 \u251c\u2500\u2500 meta_info_run1.txt \u2502 \u251c\u2500\u2500 most_variable_genes_run1.txt \u2502 \u251c\u2500\u2500 run1_RNA.txt \u2502 \u251c\u2500\u2500 sessionInfo.txt \u2502 \u2514\u2500\u2500 summary_run1.txt \u2514\u2500\u2500 objs3 \u2514\u2500\u2500 run1.rds Figure 2. Figures produced by Step 3 of the scRNAbox pipeline. A) Violin plots showing the distribution of cells according to quality control metrics after filtering by user-defined thresholds. B) Scatter plot showing the top 2500 most variable features; the top 10 most variable features are labelled. C) Principal component analysis (PCA) visualizing the first two principal component (PC). D) Elbow plot to visualize the percentage of variance explained by each PC. Step 4: Demultiplexing and doublet detection In Step 4, we are going to demultiplex the pooled samples and remove doublets (erroneous libraries produced by two or more cells) based on the expression of the sample-specific barcodes (antibody assay). If the barcode labels used in the analysis are unknown, the first step is to retrieve them from the Seurat object. To do this, we do not need to modify the execution parameters and can go straight to running the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 4 \\ --msd T The above code produces the following file: step4 \u251c\u2500\u2500 figs4 \u251c\u2500\u2500 info4 \u2502 \u2514\u2500\u2500 seu1.rds_old_antibody_label_MULTIseqDemuxHTOcounts.csv \u2514\u2500\u2500 objs4 Which contains the names of the barcode labels (i.e. A_TotalSeqA , B_TotalSeqA , C_TotalSeqA , D_TotalSeqA , E_TotalSeqA , F_TotalSeqA , G_TotalSeqA , H_TotalSeqA , Doublet , Negative ). Now that we know the barcode labels used in the PBMC dataset, we can perform demultiplexing and doublet detection. For our analysis of the PBMC dataset we set the following execution parameters for Step 4 ( ~/pipeline/job_info/parameters/step4_par.txt ): Parameter Value par_save_RNA Yes par_save_metadata Yes par_normalization.method CLR par_scale.factor 10000 par_selection.method vst par_nfeatures 2500 par_dimensionality_reduction Yes par_npcs_pca 30 par_dims_umap 3 par_n.neighbor 65 par_dropDN Yes par_label_dropDN Doublet, Negative par_quantile 0.9 par_autoThresh TRUE par_maxiter 5 par_RidgePlot_ncol 3 par_old_antibody_label A-TotalSeqA, B-TotalSeqA, C-TotalSeqA, D-TotalSeqA, E-TotalSeqA, F-TotalSeqA, G-TotalSeqA, H-TotalSeqA, Doublet par_new_antibody_label sample-A, sample-B, sample-C, sample-D, sample-E, sample-F, sample-G, sample-H, Doublet We can run Step 4 using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 4 Step 4 produces the following outputs. step4 \u251c\u2500\u2500 figs4 \u2502 \u251c\u2500\u2500 run1_DotPlot_HTO_MSD.pdf \u2502 \u251c\u2500\u2500 run1_Heatmap_HTO_MSD.pdf \u2502 \u251c\u2500\u2500 run1_HTO_dimplot_pca.pdf \u2502 \u251c\u2500\u2500 run1_HTO_dimplot_umap.pdf \u2502 \u251c\u2500\u2500 run1_nCounts_RNA_MSD.pdf \u2502 \u2514\u2500\u2500 run1_Ridgeplot_HTO_MSD.pdf \u251c\u2500\u2500 info4 \u2502 \u251c\u2500\u2500 run1_filtered_MULTIseqDemuxHTOcounts.csv \u2502 \u251c\u2500\u2500 run1_MetaData.txt \u2502 \u251c\u2500\u2500 run1_meta_info_.txt \u2502 \u251c\u2500\u2500 run1_MULTIseqDemuxHTOcounts.csv \u2502 \u251c\u2500\u2500 run1_RNA.txt \u2502 \u2514\u2500\u2500 sessionInfo.txt \u2514\u2500\u2500 objs4 \u2514\u2500\u2500 run1.rds Figure 3. Figures produced by Step 4 of the Cell Hashtag Analysis Track. A) Uniform Manifold Approximation and Projections (UMAP) plot, taking the first three pricipal components (PC) of the antibody assay as input. B) Principal component analysis (PCA) showing the first two PCs of the antibody assay. C) Ridgeplot visualizing the enrichment of barcode labels across sample assignments at the sample level. D) Dot plot visualizing the enrichment of barcode labels across sample assignments at the sample level. E) Heatmap visualizing the enrichment of barcode labels across sample assignments at the cel level. D) Violin plot visualizing the distribution of the number of total RNA transcripts identified per cell, startified by sample assignment. Publication-ready figures The code used to produce the publication-ready figures used in our pre-print manuscript is avaliable here here . Job Configurations The following job configurations were used for our analysis of the PBMC dataset. Job Configurations can be modified for each analytical step in the scrnabox_config.ini file in ~/pipeline/job_info/configs Step THREADS_ARRAY MEM_ARRAY WALLTIME_ARRAY Step2 4 16g 00-05:00 Step3 4 16g 00-05:00 Step4 4 16g 00-05:00","title":"HTO analysis track: PBMC dataset"},{"location":"Dataset2/#hto-analysis-track-pbmc-dataset","text":"","title":"HTO analysis track: PBMC dataset"},{"location":"Dataset2/#contents","text":"Introduction Downloading the pbmc dataset Installation scrnabox.slurm installation CellRanger installation R library preparation and R package installation scRNAbox: HTO Analysis Track Step 0: Set up Step 1: FASTQ to gene expression matrix Step 2: Create Seurat object and remove ambient RNA Step 3: Quality control and filtering Step 4: Demultiplexing and doublet detection Publication-ready figures Job Configurations","title":"Contents"},{"location":"Dataset2/#introduction","text":"This guide illustrates the steps taken for our analysis of the PBMC dataset in our pre-print manuscript . Here, we are using the HTO analysis track of scRNAbox to analyze a publicly available scRNAseq dataset produced by Stoeckius et al. . This data set describes peripheral blood mononuclear cells (PBMC) from eight human donors, which were tagged with sample-specific barcodes, pooled, and sequenced together in a single run.","title":"Introduction"},{"location":"Dataset2/#downloading-the-pbmc-dataset","text":"In you want to use the PBMC dataset to test the scRNAbox pipeline, please see here for detialed instructions on how to download the publicly available data.","title":"Downloading the PBMC dataset"},{"location":"Dataset2/#installation","text":"","title":"Installation"},{"location":"Dataset2/#scrnaboxslurm-installation","text":"To download the latest version of scrnabox.slurm (v0.1.52) run the following command: wget https://github.com/neurobioinfo/scrnabox/releases/download/v0.1.52/scrnabox.slurm.zip unzip scrnabox.slurm.zip For a description of the options for running scrnabox.slurm run the following command: bash /pathway/to/scrnabox.slurm/launch_scrnabox.sh -h If the scrnabox.slurm has been installed properly, the above command should return the folllowing: scrnabox pipeline version 0.1.52 ------------------- mandatory arguments: -d (--dir) = Working directory (where all the outputs will be printed) (give full path) --steps = Specify what steps, e.g., 2 to run just step 2, 2-4, run steps 2 through 4) optional arguments: -h (--help) = See helps regarding the pipeline arguments. --method = Select your preferred method: HTO and SCRNA for hashtag, and Standard scRNA, respectively. --msd = You can get the hashtag labels by running the following code (HTO Step 4). --markergsea = Identify marker genes for each cluster and run marker gene set enrichment analysis (GSEA) using EnrichR libraries (Step 7). --knownmarkers = Profile the individual or aggregated expression of known marker genes. --referenceannotation = Generate annotation predictions based on the annotations of a reference Seurat object (Step 7). --annotate = Add clustering annotations to Seurat object metadata (Step 7). --addmeta = Add metadata columns to the Seurat object (Step 8). --rundge = Perform differential gene expression contrasts (Step 8). --seulist = You can directly call the list of Seurat objects to the pipeline. --rcheck = You can identify which libraries are not installed. ------------------- For a comprehensive help, visit https://neurobioinfo.github.io/scrnabox/site/ for documentation.","title":"scrnabox.slurm installation"},{"location":"Dataset2/#cellranger-installation","text":"For information regarding the installation of CellRanger, please visit the 10X Genomics documentation . If CellRanger is already installed on your HPC system, you may skip the CellRanger installation procedures. For our analysis of the midbrain dataset we used the 10XGenomics GRCh38-3.0.0 reference genome and CellRanger v5.0.1. For more information regarding how to prepare reference genomes for the CellRanger counts pipeline, please see the 10X Genomics documentation .","title":"CellRanger installation"},{"location":"Dataset2/#r-library-preparation-and-r-package-installation","text":"We must prepapre a common R library where we will load all of the required R packages. If the required R packages are already installed on your HPC system in a common R library, you may skip the following procedures. We will first install R . The analyses presented in our pre-print manuscript were conducted using v4.2.1. # install R module load r/4.2.1 Then, we will run the installation code, which creates a directory where the R packages will be loaded and will install the required R packages: # Folder for R packages R_PATH=~/path/to/R/library mkdir -p $R_PATH # Install package Rscript ./scrnabox.slurm/soft/R/install_packages_scrnabox.R $R_PATH","title":"R library preparation and R package installation"},{"location":"Dataset2/#scrnabox-pipeline","text":"","title":"scRNAbox pipeline"},{"location":"Dataset2/#step-0-set-up","text":"Now that scrnabox.slurm , CellRanger , R , and the required R packages have been installed, we can proceed to our analysis with the scRNAbox pipeline. We will create a pipeline folder designated for the analysis and run Step 0, selecting the HTO analysis track ( --method HTO ), using the following code: mkdir pipeline cd pipeline export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 0 \\ --method HTO Next, we will navigate to the scrnabox_config.ini file in ~/pipeline/job_info/configs to define the HPC account holder ( ACCOUNT ), the path to the environmental module ( MODULEUSE ), the path to CellRanger from the environmental module directory ( CELLRANGER ), CellRanger version ( CELLRANGER_VERSION ), R version ( R_VERSION ), and the path to the R library ( R_LIB_PATH ): cd ~/pipeline/job_info/configs nano scrnabox_config.ini ACCOUNT=account-name MODULEUSE=/path/to/environmental/module CELLRANGER=/path/to/cellranger/from/module/directory CELLRANGER_VERSION=5.0.1 R_VERSION=4.2.1 R_LIB_PATH=/path/to/R/library Next, we can check to see if all of the required R packages have been properly installed using the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 0 \\ --rcheck","title":"Step 0: Set up"},{"location":"Dataset2/#step-1-fastq-to-gene-expression-matrix","text":"In Step 1, we will run the CellRanger counts pipeline to generate feature-barcode expression matrices from the FASTQ files. While it is possible to manually prepare the library.csv and feature_ref.csv files for the sequencing run prior to running Step 1, for this analysis we are going to opt for automated library preparation. For more information regarding the manual prepartion of library.csv and feature_ref.csv files, please see the the CellRanger library preparation tutorial. For our analysis of the PBMC dataset we set the following execution parameters for Step 1 ( ~/pipeline/job_info/parameters/step1_par.txt ): Parameter Value par_automated_library_prep Yes par_fastq_directory /path/to/directory/contaning/fastqs par_RNA_run_names run1GEX par_HTO_run_names run1HTO par_seq_run_names run1 par_paired_end_seq Yes par_id Hash1, Hash2, Hash3, Hash4, Hash5, Hash6, Hash7, Hash8 par_name A_TotalSeqA, B_TotalSeqA, C_TotalSeqA, D_TotalSeqA, E_TotalSeqA, F_TotalSeqA, G_TotalSeqA, H_TotalSeqA par_read R2 par_pattern 5P(BC) par_sequence AGGACCATCCAA, ACATGTTACCGT, AGCTTACTATCC, TCGATAATGCGA, GAGGCTGAGCTA, GTGTGACGTATT, ACTGTCTAACGG, TATCACATCGGT par_ref_dir_grch ~/genome/10xGenomics/refdata-cellranger-GRCh38-3.0.0 par_r1_length NULL (commented out) par_r2_length NULL (commented out) par_mempercode 30 par_include_introns NULL (commented out) par_no_target_umi_filter NULL (commented out) par_expect_cells NULL (commented out) par_force_cells NULL (commented out) par_no_bam NULL (commented out) Note: The parameters file for each step is located in ~/pipeline/job_info/parameters . For a comprehensive description of the execution parameters for each step see here . Given that CellRanger runs a user interface and is not submitted as a Job, it is recommended to run Step 1 in a 'screen' which will allow the the task to keep running if the connection is broken. To run Step 1, use the following command: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline screen -S run_PBMC_application_case bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 1 The outputs of the CellRanger counts pipeline are deposited into ~/pipeline/step1 .","title":"Step 1: FASTQ to gene expression matrix"},{"location":"Dataset2/#step-2-create-seurat-object-and-remove-ambient-rna","text":"In Step 2, we are going to begin by correcting the RNA assay for ambient RNA removal using SoupX ( Young et al. 2020 ). We will then use the the ambient RNA-corrected feature-barcode matrices to create a Seurat object. For our analysis of the PBMC dataset we set the following execution parameters for Step 2 ( ~/pipeline/job_info/parameters/step2_par.txt ): Parameter Value par_save_RNA Yes par_save_metadata Yes par_ambient_RNA Yes par_normalization.method LogNormalize par_scale.factor 10000 par_selection.method vst par_nfeatures 2500 We can run Step 2 using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 2 Step 2 produces the following outputs: ~/pipeline step2 \u251c\u2500\u2500 figs2 \u2502 \u251c\u2500\u2500 ambient_RNA_estimation_run1.pdf \u2502 \u251c\u2500\u2500 ambient_RNA_markers_run1.pdf \u2502 \u251c\u2500\u2500 cell_cyle_dim_plot_run1.pdf \u2502 \u251c\u2500\u2500 vioplot_run1.pdf \u2502 \u2514\u2500\u2500 zoomed_in_vioplot_run1.pdf \u251c\u2500\u2500 info2 \u2502 \u251c\u2500\u2500 estimated_ambient_RNA_run1.txt \u2502 \u251c\u2500\u2500 MetaData_1.txt \u2502 \u251c\u2500\u2500 meta_info_1.txt \u2502 \u251c\u2500\u2500 run1_ambient_rna_summary.rds \u2502 \u251c\u2500\u2500 sessionInfo.txt \u2502 \u251c\u2500\u2500 seu1_RNA.txt \u2502 \u2514\u2500\u2500 summary_seu1.txt \u251c\u2500\u2500 objs2 \u2502 \u2514\u2500\u2500 run1.rds \u2514\u2500\u2500 step2_ambient \u2514\u2500\u2500 run1 \u251c\u2500\u2500 barcodes.tsv \u251c\u2500\u2500 genes.tsv \u2514\u2500\u2500 matrix.mtxs Note: For a comprehensive description of the outputs for each analytical step, please see the Outputs section of the scRNAbox documentation. Figure 1. Figures produced by Step 2 of the scRNAbox pipeline. A) Estimated ambient RNA contamination rate (Rho) by SoupX. Estimates of the RNA contamination rate using various estimators are visualized via a frequency distribution; the true contamination rate is assigned as the most frequent estimate (red line; 8.7%). B) Log10 ratios of observed counts to expected counts for marker genes from each cluster. Clusters are defined by the CellRanger counts pipeline. The red line displays the estimated RNA contamination rate if the estimation was based entirely on the corresponding gene. C) Principal component analysis (PCA) of Seurat S and G2M cell cycle reference genes. D) Violin plots showing the distribution of cells according to quality control metrics calculated in Step 2. E) Zoomed in violin plots, from the minimum to the mean, showing the distribution of cells according to quality control metrics calculated in Step 2.","title":"Step 2: Create Seurat object and remove ambient RNA"},{"location":"Dataset2/#step-3-quality-control-and-filtering","text":"In Step 3, we are going to perform quality control procedures and filter out low quality cells. We are going to filter out cells with < 50 unique RNA transcripts, > 6000 unique RNA transcripts, < 200 total RNA transcripts, > 7000 total RNA transcripts, and > 50% mitochondria. For our analysis of the PBMC dataset we set the following execution parameters for Step 3 ( ~/pipeline/job_info/parameters/step2_par.txt ): Parameter Value par_save_RNA Yes par_save_metadata Yes par_seurat_object NULL par_nFeature_RNA_L 50 par_nFeature_RNA_U 6000 par_nCount_RNA_L 200 par_nCount_RNA_U 7000 par_mitochondria_percent_L 0 par_mitochondria_percent_U 50 par_ribosomal_percent_L 0 par_ribosomal_percent_U 100 par_remove_mitochondrial_genes No par_remove_ribosomal_genes No par_remove_genes NULL par_regress_cell_cycle_genes Yes par_normalization.method LogNormalize par_scale.factor 10000 par_selection.method vst par_nfeatures 2500 par_top 10 par_npcs_pca 30 We can run Step 3 using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 3 Step 3 produces the following outputs. step3 \u251c\u2500\u2500 figs3 \u2502 \u251c\u2500\u2500 dimplot_pca_run1.pdf \u2502 \u251c\u2500\u2500 elbowplot_run1.pdf \u2502 \u251c\u2500\u2500 filtered_QC_vioplot_run1.pdf \u2502 \u2514\u2500\u2500 VariableFeaturePlot_run1.pdf \u251c\u2500\u2500 info3 \u2502 \u251c\u2500\u2500 MetaData_run1.txt \u2502 \u251c\u2500\u2500 meta_info_run1.txt \u2502 \u251c\u2500\u2500 most_variable_genes_run1.txt \u2502 \u251c\u2500\u2500 run1_RNA.txt \u2502 \u251c\u2500\u2500 sessionInfo.txt \u2502 \u2514\u2500\u2500 summary_run1.txt \u2514\u2500\u2500 objs3 \u2514\u2500\u2500 run1.rds Figure 2. Figures produced by Step 3 of the scRNAbox pipeline. A) Violin plots showing the distribution of cells according to quality control metrics after filtering by user-defined thresholds. B) Scatter plot showing the top 2500 most variable features; the top 10 most variable features are labelled. C) Principal component analysis (PCA) visualizing the first two principal component (PC). D) Elbow plot to visualize the percentage of variance explained by each PC.","title":"Step 3: Quality control and filtering"},{"location":"Dataset2/#step-4-demultiplexing-and-doublet-detection","text":"In Step 4, we are going to demultiplex the pooled samples and remove doublets (erroneous libraries produced by two or more cells) based on the expression of the sample-specific barcodes (antibody assay). If the barcode labels used in the analysis are unknown, the first step is to retrieve them from the Seurat object. To do this, we do not need to modify the execution parameters and can go straight to running the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 4 \\ --msd T The above code produces the following file: step4 \u251c\u2500\u2500 figs4 \u251c\u2500\u2500 info4 \u2502 \u2514\u2500\u2500 seu1.rds_old_antibody_label_MULTIseqDemuxHTOcounts.csv \u2514\u2500\u2500 objs4 Which contains the names of the barcode labels (i.e. A_TotalSeqA , B_TotalSeqA , C_TotalSeqA , D_TotalSeqA , E_TotalSeqA , F_TotalSeqA , G_TotalSeqA , H_TotalSeqA , Doublet , Negative ). Now that we know the barcode labels used in the PBMC dataset, we can perform demultiplexing and doublet detection. For our analysis of the PBMC dataset we set the following execution parameters for Step 4 ( ~/pipeline/job_info/parameters/step4_par.txt ): Parameter Value par_save_RNA Yes par_save_metadata Yes par_normalization.method CLR par_scale.factor 10000 par_selection.method vst par_nfeatures 2500 par_dimensionality_reduction Yes par_npcs_pca 30 par_dims_umap 3 par_n.neighbor 65 par_dropDN Yes par_label_dropDN Doublet, Negative par_quantile 0.9 par_autoThresh TRUE par_maxiter 5 par_RidgePlot_ncol 3 par_old_antibody_label A-TotalSeqA, B-TotalSeqA, C-TotalSeqA, D-TotalSeqA, E-TotalSeqA, F-TotalSeqA, G-TotalSeqA, H-TotalSeqA, Doublet par_new_antibody_label sample-A, sample-B, sample-C, sample-D, sample-E, sample-F, sample-G, sample-H, Doublet We can run Step 4 using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 4 Step 4 produces the following outputs. step4 \u251c\u2500\u2500 figs4 \u2502 \u251c\u2500\u2500 run1_DotPlot_HTO_MSD.pdf \u2502 \u251c\u2500\u2500 run1_Heatmap_HTO_MSD.pdf \u2502 \u251c\u2500\u2500 run1_HTO_dimplot_pca.pdf \u2502 \u251c\u2500\u2500 run1_HTO_dimplot_umap.pdf \u2502 \u251c\u2500\u2500 run1_nCounts_RNA_MSD.pdf \u2502 \u2514\u2500\u2500 run1_Ridgeplot_HTO_MSD.pdf \u251c\u2500\u2500 info4 \u2502 \u251c\u2500\u2500 run1_filtered_MULTIseqDemuxHTOcounts.csv \u2502 \u251c\u2500\u2500 run1_MetaData.txt \u2502 \u251c\u2500\u2500 run1_meta_info_.txt \u2502 \u251c\u2500\u2500 run1_MULTIseqDemuxHTOcounts.csv \u2502 \u251c\u2500\u2500 run1_RNA.txt \u2502 \u2514\u2500\u2500 sessionInfo.txt \u2514\u2500\u2500 objs4 \u2514\u2500\u2500 run1.rds Figure 3. Figures produced by Step 4 of the Cell Hashtag Analysis Track. A) Uniform Manifold Approximation and Projections (UMAP) plot, taking the first three pricipal components (PC) of the antibody assay as input. B) Principal component analysis (PCA) showing the first two PCs of the antibody assay. C) Ridgeplot visualizing the enrichment of barcode labels across sample assignments at the sample level. D) Dot plot visualizing the enrichment of barcode labels across sample assignments at the sample level. E) Heatmap visualizing the enrichment of barcode labels across sample assignments at the cel level. D) Violin plot visualizing the distribution of the number of total RNA transcripts identified per cell, startified by sample assignment.","title":"Step 4: Demultiplexing and doublet detection"},{"location":"Dataset2/#publication-ready-figures","text":"The code used to produce the publication-ready figures used in our pre-print manuscript is avaliable here here .","title":"Publication-ready figures"},{"location":"Dataset2/#job-configurations","text":"The following job configurations were used for our analysis of the PBMC dataset. Job Configurations can be modified for each analytical step in the scrnabox_config.ini file in ~/pipeline/job_info/configs Step THREADS_ARRAY MEM_ARRAY WALLTIME_ARRAY Step2 4 16g 00-05:00 Step3 4 16g 00-05:00 Step4 4 16g 00-05:00","title":"Job Configurations"},{"location":"Figures/","text":"Tutorial This section contains tutorials for different data. standard HTO Data1 Data2","title":"Tutorial"},{"location":"Figures/#tutorial","text":"This section contains tutorials for different data.","title":"Tutorial"},{"location":"Figures/#standard","text":"","title":"standard"},{"location":"Figures/#hto","text":"","title":"HTO"},{"location":"Figures/#data1","text":"","title":"Data1"},{"location":"Figures/#data2","text":"","title":"Data2"},{"location":"LICENSE/","text":"License MIT License Copyright (c) 2022 The Neuro Bioinformatics Core Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"LICENSE/#license","text":"MIT License Copyright (c) 2022 The Neuro Bioinformatics Core Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"Log/","text":"Intepreting Log Files from the scRNAbox pipeline Contents Introduction Accessing Log Files Contents of the Log files Execution parameters R function outputs Intermediate checkpoints Introduction This guide describes the information contained in the Log files produced by each step of the scRNAbox pipeline. The Log file can be used to further investigate the processes of each step and for debugging errors. Accessing the Log Files Log files for each step of the scRNAbox can be found in the job_info folder of the working directory. working_directory \u2514\u2500\u2500job_info \u2514\u2500\u2500 logs \u251c\u2500\u2500 step_1.log \u251c\u2500\u2500 step_2.log \u251c\u2500\u2500 step_3.log \u251c\u2500\u2500 step_4.log \u251c\u2500\u2500 step_5.log \u251c\u2500\u2500 step_6.log \u251c\u2500\u2500 step_7_markergsea.log \u251c\u2500\u2500 step_7_knownmarkers.log \u251c\u2500\u2500 step_7_referenceannotation.log \u251c\u2500\u2500 step_8_addmeta.log \u2514\u2500\u2500 step_8_rundge.log The contents of the individual log files can be visualized using the cat command cd ~/working_directory/job_info/logs cat step_1.log Contents of the Log files Execution parameters At the beginning of every Log file, scRNABox documents the execution parameters defined by the user for the particular run. This is intended to increase the replicability of an analysis and to allow users to adequately document their methods. Shown below is an example of the documented parameters in the Log file for step 4 of the pipeline. R function outputs After listing the execution parameters, the Log files will display the outputs of the R functions comprising the particulsr step of the scRNAbox pipeline; these are the same outputs that would be visible in the R console if the code was run interactively. The R function outputs will provide further information to the user beyond the outputs returned by the scRNAbox pipeline. Shown below is an example of the R function outputs in the Log file for step 4 of the pipeline. Intermediate checkpoints Finally, to help identify the source of errors encountered while using the scRNAbox pipeline, the Log files will document the initiation and completetion of intermediate steps. For instance, Step 4 of the Standard analysis track (Doublet detection), is divided into two intermediate steps: 1) Loading R libraries and parameters and 2) Doublet detection. Before loading the required R libraries for step 4 (intermediate step 1), the log file will display \"Loading libraries and parameters started\" . Upon successfully completing intermediate step 1, the log file will display \"Loading libraries and parameters has been achieved\" . Similarly for intermediate step 2, the log file will display \"Remove doublets started\" upon initiation and \"Remove doublets has been achieved\" upon completition. If, however, an intermediate step enconters an error, the successfull completion message will not be displayed. The intermediate checkpoints were implemented to help users narrow down the source of their errors. If, for example, users encounter an error during the doublet detection intermediate step of step 4, we suggest revisiting the parameters corresponding to doublet detection and ensurig that there are no errors in the input. If the problem persists, we invite users to open an issue in the GitHub repository or contact the developers directly ( Help and Feedback ).","title":"Intepreting Log Files"},{"location":"Log/#intepreting-log-files-from-the-scrnabox-pipeline","text":"","title":"Intepreting Log Files from the scRNAbox pipeline"},{"location":"Log/#contents","text":"Introduction Accessing Log Files Contents of the Log files Execution parameters R function outputs Intermediate checkpoints","title":"Contents"},{"location":"Log/#introduction","text":"This guide describes the information contained in the Log files produced by each step of the scRNAbox pipeline. The Log file can be used to further investigate the processes of each step and for debugging errors.","title":"Introduction"},{"location":"Log/#accessing-the-log-files","text":"Log files for each step of the scRNAbox can be found in the job_info folder of the working directory. working_directory \u2514\u2500\u2500job_info \u2514\u2500\u2500 logs \u251c\u2500\u2500 step_1.log \u251c\u2500\u2500 step_2.log \u251c\u2500\u2500 step_3.log \u251c\u2500\u2500 step_4.log \u251c\u2500\u2500 step_5.log \u251c\u2500\u2500 step_6.log \u251c\u2500\u2500 step_7_markergsea.log \u251c\u2500\u2500 step_7_knownmarkers.log \u251c\u2500\u2500 step_7_referenceannotation.log \u251c\u2500\u2500 step_8_addmeta.log \u2514\u2500\u2500 step_8_rundge.log The contents of the individual log files can be visualized using the cat command cd ~/working_directory/job_info/logs cat step_1.log","title":"Accessing the Log Files"},{"location":"Log/#contents-of-the-log-files","text":"","title":"Contents of the Log files"},{"location":"Log/#execution-parameters","text":"At the beginning of every Log file, scRNABox documents the execution parameters defined by the user for the particular run. This is intended to increase the replicability of an analysis and to allow users to adequately document their methods. Shown below is an example of the documented parameters in the Log file for step 4 of the pipeline.","title":"Execution parameters"},{"location":"Log/#r-function-outputs","text":"After listing the execution parameters, the Log files will display the outputs of the R functions comprising the particulsr step of the scRNAbox pipeline; these are the same outputs that would be visible in the R console if the code was run interactively. The R function outputs will provide further information to the user beyond the outputs returned by the scRNAbox pipeline. Shown below is an example of the R function outputs in the Log file for step 4 of the pipeline.","title":"R function outputs"},{"location":"Log/#intermediate-checkpoints","text":"Finally, to help identify the source of errors encountered while using the scRNAbox pipeline, the Log files will document the initiation and completetion of intermediate steps. For instance, Step 4 of the Standard analysis track (Doublet detection), is divided into two intermediate steps: 1) Loading R libraries and parameters and 2) Doublet detection. Before loading the required R libraries for step 4 (intermediate step 1), the log file will display \"Loading libraries and parameters started\" . Upon successfully completing intermediate step 1, the log file will display \"Loading libraries and parameters has been achieved\" . Similarly for intermediate step 2, the log file will display \"Remove doublets started\" upon initiation and \"Remove doublets has been achieved\" upon completition. If, however, an intermediate step enconters an error, the successfull completion message will not be displayed. The intermediate checkpoints were implemented to help users narrow down the source of their errors. If, for example, users encounter an error during the doublet detection intermediate step of step 4, we suggest revisiting the parameters corresponding to doublet detection and ensurig that there are no errors in the input. If the problem persists, we invite users to open an issue in the GitHub repository or contact the developers directly ( Help and Feedback ).","title":"Intermediate checkpoints"},{"location":"Step0/","text":"Step 0: scRNAbox pipeline set up Step 0 initiates the pipeline and sets up the working directory by depositing the required files. Running Step 0 Create a dedicated folder for the analysis (hereafter referred to as the working directory). Then, export the path to the working directory and the path to scrnabox.slurm : mkdir working_directory cd /pathway/to/working_directory export SCRNABOX_HOME=/pathway/to/scrnabox.slurm export SCRNABOX_PWD=/pathway/to/working_directory Next, run Step 0 and choose whether to use the standard analysis track ( --method SCRNA ) or HTO analysis track ( --method HTO ) using the following command from the working directory: cd /pathway/to/working_directory bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 0 \\ --method SCRNA After running Step 0, the structure of the working directory should be: working_directory \u2514\u2500\u2500 job_info \u251c\u2500\u2500 configs \u251c\u2500\u2500 logs \u2514\u2500\u2500 parameters The configs/ directory contains the scrnabox_config.ini file which allows users to specify their job allocations (memory, threads, and walltime) for each analytical step using the Slurm Workload Manager; The logs/ directory records the events of each analytical step; The parameters/ directory contains adjustable, step-specific text files which allow users to define the execution parameters for each analytical step. Next, navigate to the scrnabox_config.ini file in ~/working_directory/job_info/configs to define the HPC account holder ( ACCOUNT ), the path to the environmental module ( MODULEUSE ), the path to CellRanger from the environmental module directory ( CELLRANGER ), CellRanger version ( CELLRANGER_VERSION ), R version ( R_VERSION ), and the path to the R library ( R_LIB_PATH ): ACCOUNT=account-name MODULEUSE=/path/to/environmental/module (e.g. /cvmfs/soft.mugqic/CentOS6/modulefiles) CELLRANGER=/path/to/cellranger/from/module/directory (e.g. mugqic/cellranger) CELLRANGER_VERSION=5.0.1 R_VERSION=4.2.1 R_LIB_PATH=/path/to/R/library Note: The text files can be opened and modified through nano, vim, or a file manager system like cyberduck. Note: For more information regarding the configuration file, please see the Job cofigurations sections of the scRNAbox documentation. Next, users can check to see if all of the required R packages have been properly installed using the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 0 \\ --rcheck Upon completing the setup procedures, users can run their analysis using the scRNAbox pipeline.","title":"Step 0: Set up"},{"location":"Step0/#step-0-scrnabox-pipeline-set-up","text":"Step 0 initiates the pipeline and sets up the working directory by depositing the required files.","title":"Step 0: scRNAbox pipeline set up"},{"location":"Step0/#running-step-0","text":"Create a dedicated folder for the analysis (hereafter referred to as the working directory). Then, export the path to the working directory and the path to scrnabox.slurm : mkdir working_directory cd /pathway/to/working_directory export SCRNABOX_HOME=/pathway/to/scrnabox.slurm export SCRNABOX_PWD=/pathway/to/working_directory Next, run Step 0 and choose whether to use the standard analysis track ( --method SCRNA ) or HTO analysis track ( --method HTO ) using the following command from the working directory: cd /pathway/to/working_directory bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 0 \\ --method SCRNA After running Step 0, the structure of the working directory should be: working_directory \u2514\u2500\u2500 job_info \u251c\u2500\u2500 configs \u251c\u2500\u2500 logs \u2514\u2500\u2500 parameters The configs/ directory contains the scrnabox_config.ini file which allows users to specify their job allocations (memory, threads, and walltime) for each analytical step using the Slurm Workload Manager; The logs/ directory records the events of each analytical step; The parameters/ directory contains adjustable, step-specific text files which allow users to define the execution parameters for each analytical step. Next, navigate to the scrnabox_config.ini file in ~/working_directory/job_info/configs to define the HPC account holder ( ACCOUNT ), the path to the environmental module ( MODULEUSE ), the path to CellRanger from the environmental module directory ( CELLRANGER ), CellRanger version ( CELLRANGER_VERSION ), R version ( R_VERSION ), and the path to the R library ( R_LIB_PATH ): ACCOUNT=account-name MODULEUSE=/path/to/environmental/module (e.g. /cvmfs/soft.mugqic/CentOS6/modulefiles) CELLRANGER=/path/to/cellranger/from/module/directory (e.g. mugqic/cellranger) CELLRANGER_VERSION=5.0.1 R_VERSION=4.2.1 R_LIB_PATH=/path/to/R/library Note: The text files can be opened and modified through nano, vim, or a file manager system like cyberduck. Note: For more information regarding the configuration file, please see the Job cofigurations sections of the scRNAbox documentation. Next, users can check to see if all of the required R packages have been properly installed using the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 0 \\ --rcheck Upon completing the setup procedures, users can run their analysis using the scRNAbox pipeline.","title":"Running Step 0"},{"location":"Step1/","text":"Step 1: FASTQ to gene expression matrix Library preparation Running Step 1 In Step 1, gene expression matrices are generated from FASTQ files using the CellRanger counts pipeline. Prior to running CellRanger, library.csv files must be prepared to define the FASTQ files for each sample. In addition, feature_ref.csv files must be prepared for the HTO track to define the HTOs used in the experiment. ScRNAbox provides an option for automating library preparation but the correct information must still be defined in the parameters. Alternatively, users may manually prepapre the libraries. For a tutorial on manual library preparation, please see the tutorial . Library preparation library.csv The library.csv file defines the necessary information of the FASTQ files for the experiment, including the gene expression and antibody assays. The structure of the library.csv file should be: fastqs,sample,library_type path/to/fastqs/directory/,SampleNameGEX,Gene Expression path/to/fastqs/directory/,SampleNameHTO,Antibody Capture The fastqs column defines the path to the directory that contains the FASTQ files for the experiment. The sample column defines the sample name of the corresponding FASTQ file. Please note that FASTQ files must be named according to standard CellRanger nomenclature (e.g. CTRL1_S1_L001_R1_001.fastq). For more information regarding the nomenclature please visit CellRanger's documentation . The library_type column defines the assay type. For the standard analysis track, this will always be \"Gene expression\". For the HTO analysis track, each sequencing run should have a \"Gene Expression\" and \"Antibody Capture\" assay. For more information regarding the preparation of the library.csv , please see CellRanger's documentation . feature_ref.csv The feature_ref.csv file defines the necessary information for processing HTOs that will eventually be used to demultiplex the pooled samples. For example, if there are four samples pooled together with four unique HTOs, the structure of the feature_ref.csv file should be: id,name,read,pattern,sequence,feature_type Hash1,B0251_TotalSeqB,R2,5PNNNNNNNNNN(BC),GTCAACTCTTTAGCG,Antibody Capture Hash2,B0252_TotalSeqB,R2,5PNNNNNNNNNN(BC),TGATGGCCTATTGGG,Antibody Capture Hash3,B0253_TotalSeqB,R2,5PNNNNNNNNNN(BC),TTCCGCCTCTCTTTG,Antibody Capture Hash4,B0254_TotalSeqB,R2,5PNNNNNNNNNN(BC),AGTAAGTTCAGCGTA,Antibody Capture The id column defines the barcode ID which will be used to track the feature counts. The name column defines the arbitrary name for the barcode identifier. The read column defines which RNA sequencing read contains the barcode sequence. This value Will be either R1 or R2. The pattern column defines the pattern of the barcode identifiers. The sequence column defines nucleotide sequence associated with the barcode identifier. The feature_type column defines the type of feature used for sample identification. Please ensure that the feature_type in the feature_ref.csv file matches a library_type in the library.csv file. For more information regarding the preparation of the feature_ref.csv , please see CellRanger's documentation . Running Step 1 The following parameters are adjustable for Step 1 of the standard track ( ~/working_directory/job_info/parameters/step1_par.txt ): Parameter Default Description par_automated_library_prep No Whether or not to perform automated library prep. Alternatively, you may set this parameter to \"no\" and manually prepare the libraries. par_fastq_directory NULL Path to directory containing the FASTQ files. This directory should only contain FASTQ files for the experiment. par_sample_names NULL The sample names used to name the FASTQ files according to CellRanger nomeclature par_rename_samples Yes Whether or not you want to rename your samples. These names will be used to identify cells in the Seurat objects par_new_sample_names NULL New sample names. Make sure they are defined in the same order as 'par_sample_names' par_paired_end_seq Yes Whether or not paired-end sequencing was performed par_ref_dir_grch NULL Path to reference genome for FASTQ alignment. 10X Genomics reference genomes are available for download. For more information see the 10X Genomics documentation . par_r1_length NULL Minimum number of bases to retain for R1 sequence of gene expression par_r2_length NULL Minimum number of bases to retain for R2 sequence of gene expression par_mempercode 30 For clusters whose job managers do not support memory requests, it is possible to request memory in the form of cores. This option will scale up the number of threads requested via the MRO_THREADS variable according to how much memory a stage requires when given to the ratio of memory on your nodes. par_include_introns No Whether or not to include intronic reads in the gene expression matrix par_no_target_umi_filter No Whether or not to tirn of CellRanger's target UMI filtering subpipeline par_expect_cells NULL Expected number of cells. By default, CellRanger's auto-estimate algorithm will be used par_force_cells NULL Force the CellRanger count ipeline to use N cells. par_no_bam No Whether or not to skip the bam file generation in the CellRanger pipeline. The following parameters are adjustable for Step 1 of the HTO track ( ~/working_directory/job_info/parameters/step1_par.txt ): Parameter Default Description par_automated_library_prep Yes Whether or not to perform automated library prep. Alternatively, you may set this parameter to \"no\" and manually prepare the libraries. par_fastq_directory NULL Path to directory containing the FASTQ files. This directory should only contain FASTQ files for the experiment. par_RNA_run_names NULL The names of the sequencing runs for the RNA assay par_HTO_run_names NULL The names of the sequencing runs for the HTO assay par_seq_run_names NULL The user-selected name for the sequencing run. These names will be used to identify cells in the Seurat objects par_paired_end_seq Yes Whether or not paired-end sequencing was performed id NULL Barcode ID which will be used to track the feature counts name NULL The user-selected name for the barcode identifier read R2 Which RNA sequencing read contains the barcode sequence. This value Will be either R1 or R2. pattern NULL The pattern of the barcode identifiers sequence NULL The nucleotide sequence associated with the barcode identifier par_ref_dir_grch NULL Path to reference genome for FASTQ alignment. 10X Genomics reference genomes are available for download. For more information see the 10X Genomics documentation . par_r1_length NULL Minimum number of bases to retain for R1 sequence of gene expression par_r2_length NULL Minimum number of bases to retain for R2 sequence of gene expression par_mempercode 30 For clusters whose job managers do not support memory requests, it is possible to request memory in the form of cores. This option will scale up the number of threads requested via the MRO_THREADS variable according to how much memory a stage requires when given to the ratio of memory on your nodes. par_include_introns No Whether or not to include intronic reads in the gene expression matrix par_no_target_umi_filter No Whether or not to tirn of CellRanger's target UMI filtering subpipeline par_expect_cells NULL Expected number of cells. By default, CellRanger's auto-estimate algorithm will be used par_force_cells NULL Force the CellRanger count ipeline to use N cells. par_no_bam No Whether or not to skip the bam file generation in the CellRanger pipeline. Given that CellRanger runs a user interface, it is recommended to run Step 1 in a 'screen' which will allow the the task to keep running if the connection is broken. To run Step 1, use the following command: screen -S run_scrnabox bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 1 The resulting output files are deposited into ~/working_directory/step1 . The expression filtered matrix, features, and barcode files outputed by CellRanger are located in ~/working_directory/step1/sample/ouput_folder/outs/filtered_feature_bc_matrix . Note: If CellRanger was successfull it will display Pipestance completed successfully! If this message is not displayed, you should check the error logs in ~/working_directory/step1/sample/ouput_folder.log and re-run Step 1. If CellRanger fails a second time, please contact the developers of scRNAbox. Contact information is available here . Note: If you do not have access to FASTQ files for your experiment, you may intiate the pipeline at which ever Analytical Step takes your data object as input. In the case where FASTQ files are not available, users do not have to create the samples_info folder.","title":"Step 1: FASTQ to expression matrix"},{"location":"Step1/#step-1-fastq-to-gene-expression-matrix","text":"Library preparation Running Step 1 In Step 1, gene expression matrices are generated from FASTQ files using the CellRanger counts pipeline. Prior to running CellRanger, library.csv files must be prepared to define the FASTQ files for each sample. In addition, feature_ref.csv files must be prepared for the HTO track to define the HTOs used in the experiment. ScRNAbox provides an option for automating library preparation but the correct information must still be defined in the parameters. Alternatively, users may manually prepapre the libraries. For a tutorial on manual library preparation, please see the tutorial .","title":"Step 1: FASTQ to gene expression matrix"},{"location":"Step1/#library-preparation","text":"","title":"Library preparation"},{"location":"Step1/#librarycsv","text":"The library.csv file defines the necessary information of the FASTQ files for the experiment, including the gene expression and antibody assays. The structure of the library.csv file should be: fastqs,sample,library_type path/to/fastqs/directory/,SampleNameGEX,Gene Expression path/to/fastqs/directory/,SampleNameHTO,Antibody Capture The fastqs column defines the path to the directory that contains the FASTQ files for the experiment. The sample column defines the sample name of the corresponding FASTQ file. Please note that FASTQ files must be named according to standard CellRanger nomenclature (e.g. CTRL1_S1_L001_R1_001.fastq). For more information regarding the nomenclature please visit CellRanger's documentation . The library_type column defines the assay type. For the standard analysis track, this will always be \"Gene expression\". For the HTO analysis track, each sequencing run should have a \"Gene Expression\" and \"Antibody Capture\" assay. For more information regarding the preparation of the library.csv , please see CellRanger's documentation .","title":"library.csv"},{"location":"Step1/#feature_refcsv","text":"The feature_ref.csv file defines the necessary information for processing HTOs that will eventually be used to demultiplex the pooled samples. For example, if there are four samples pooled together with four unique HTOs, the structure of the feature_ref.csv file should be: id,name,read,pattern,sequence,feature_type Hash1,B0251_TotalSeqB,R2,5PNNNNNNNNNN(BC),GTCAACTCTTTAGCG,Antibody Capture Hash2,B0252_TotalSeqB,R2,5PNNNNNNNNNN(BC),TGATGGCCTATTGGG,Antibody Capture Hash3,B0253_TotalSeqB,R2,5PNNNNNNNNNN(BC),TTCCGCCTCTCTTTG,Antibody Capture Hash4,B0254_TotalSeqB,R2,5PNNNNNNNNNN(BC),AGTAAGTTCAGCGTA,Antibody Capture The id column defines the barcode ID which will be used to track the feature counts. The name column defines the arbitrary name for the barcode identifier. The read column defines which RNA sequencing read contains the barcode sequence. This value Will be either R1 or R2. The pattern column defines the pattern of the barcode identifiers. The sequence column defines nucleotide sequence associated with the barcode identifier. The feature_type column defines the type of feature used for sample identification. Please ensure that the feature_type in the feature_ref.csv file matches a library_type in the library.csv file. For more information regarding the preparation of the feature_ref.csv , please see CellRanger's documentation .","title":"feature_ref.csv"},{"location":"Step1/#running-step-1","text":"The following parameters are adjustable for Step 1 of the standard track ( ~/working_directory/job_info/parameters/step1_par.txt ): Parameter Default Description par_automated_library_prep No Whether or not to perform automated library prep. Alternatively, you may set this parameter to \"no\" and manually prepare the libraries. par_fastq_directory NULL Path to directory containing the FASTQ files. This directory should only contain FASTQ files for the experiment. par_sample_names NULL The sample names used to name the FASTQ files according to CellRanger nomeclature par_rename_samples Yes Whether or not you want to rename your samples. These names will be used to identify cells in the Seurat objects par_new_sample_names NULL New sample names. Make sure they are defined in the same order as 'par_sample_names' par_paired_end_seq Yes Whether or not paired-end sequencing was performed par_ref_dir_grch NULL Path to reference genome for FASTQ alignment. 10X Genomics reference genomes are available for download. For more information see the 10X Genomics documentation . par_r1_length NULL Minimum number of bases to retain for R1 sequence of gene expression par_r2_length NULL Minimum number of bases to retain for R2 sequence of gene expression par_mempercode 30 For clusters whose job managers do not support memory requests, it is possible to request memory in the form of cores. This option will scale up the number of threads requested via the MRO_THREADS variable according to how much memory a stage requires when given to the ratio of memory on your nodes. par_include_introns No Whether or not to include intronic reads in the gene expression matrix par_no_target_umi_filter No Whether or not to tirn of CellRanger's target UMI filtering subpipeline par_expect_cells NULL Expected number of cells. By default, CellRanger's auto-estimate algorithm will be used par_force_cells NULL Force the CellRanger count ipeline to use N cells. par_no_bam No Whether or not to skip the bam file generation in the CellRanger pipeline. The following parameters are adjustable for Step 1 of the HTO track ( ~/working_directory/job_info/parameters/step1_par.txt ): Parameter Default Description par_automated_library_prep Yes Whether or not to perform automated library prep. Alternatively, you may set this parameter to \"no\" and manually prepare the libraries. par_fastq_directory NULL Path to directory containing the FASTQ files. This directory should only contain FASTQ files for the experiment. par_RNA_run_names NULL The names of the sequencing runs for the RNA assay par_HTO_run_names NULL The names of the sequencing runs for the HTO assay par_seq_run_names NULL The user-selected name for the sequencing run. These names will be used to identify cells in the Seurat objects par_paired_end_seq Yes Whether or not paired-end sequencing was performed id NULL Barcode ID which will be used to track the feature counts name NULL The user-selected name for the barcode identifier read R2 Which RNA sequencing read contains the barcode sequence. This value Will be either R1 or R2. pattern NULL The pattern of the barcode identifiers sequence NULL The nucleotide sequence associated with the barcode identifier par_ref_dir_grch NULL Path to reference genome for FASTQ alignment. 10X Genomics reference genomes are available for download. For more information see the 10X Genomics documentation . par_r1_length NULL Minimum number of bases to retain for R1 sequence of gene expression par_r2_length NULL Minimum number of bases to retain for R2 sequence of gene expression par_mempercode 30 For clusters whose job managers do not support memory requests, it is possible to request memory in the form of cores. This option will scale up the number of threads requested via the MRO_THREADS variable according to how much memory a stage requires when given to the ratio of memory on your nodes. par_include_introns No Whether or not to include intronic reads in the gene expression matrix par_no_target_umi_filter No Whether or not to tirn of CellRanger's target UMI filtering subpipeline par_expect_cells NULL Expected number of cells. By default, CellRanger's auto-estimate algorithm will be used par_force_cells NULL Force the CellRanger count ipeline to use N cells. par_no_bam No Whether or not to skip the bam file generation in the CellRanger pipeline. Given that CellRanger runs a user interface, it is recommended to run Step 1 in a 'screen' which will allow the the task to keep running if the connection is broken. To run Step 1, use the following command: screen -S run_scrnabox bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 1 The resulting output files are deposited into ~/working_directory/step1 . The expression filtered matrix, features, and barcode files outputed by CellRanger are located in ~/working_directory/step1/sample/ouput_folder/outs/filtered_feature_bc_matrix . Note: If CellRanger was successfull it will display Pipestance completed successfully! If this message is not displayed, you should check the error logs in ~/working_directory/step1/sample/ouput_folder.log and re-run Step 1. If CellRanger fails a second time, please contact the developers of scRNAbox. Contact information is available here . Note: If you do not have access to FASTQ files for your experiment, you may intiate the pipeline at which ever Analytical Step takes your data object as input. In the case where FASTQ files are not available, users do not have to create the samples_info folder.","title":"Running Step 1"},{"location":"Step2/","text":"Step 2: Create Seurat object and remove ambient RNA In Step 2, the CellRanger outputs generated in Step 1 (expression matrix, features, and barcodes) are used to create a Seurat object for each sample. The ambient RNA quantity is estimated and there is an option to correct gene expression profiles for RNA contamination using SoupX ( Young et al. 2020 ). Then, CellRanger (if not removing ambient RNA) or SoupX (if removing ambient RNA) feature-barcode expression matrices are transformed into Seurat objects. Quality control measures are then computed to inform filtering in Step 3, including: the number of unique transcripts (genes; nFeaturesRNA); the total number of transcripts (nCountsRNA); the percentage of mitochondrial-encoded transcripts; the percentage of ribosome gene transcripts. Normalization and scaling is then performed on the individual Seurat objects prior to cell-cycle scoring. The following parameters are adjustable for Step 2 ( ~/working_directory/job_info/parameters/step2_par.txt ): Parameter Default Description par_save_RNA Yes Whether or not to export an RNA expression matrix par_save_metadata Yes Whether or not to export a metadata dataframe par_ambient_RNA Yes Whether or not to correct the feature-barcode expression matrices for ambient RNA contamination par_min.cells_L 3 Only retain genes expressed in a minimum number of cells par_normalization.method LogNormalize Method to use for normalization par_scale.factor 10000 Scale factor for scaling the data par_selection.method vst Method for choosing the top variable features par_nfeatures 2500 Number of features to select as top variable features To run Step 2, use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 2 The resulting output files are deposited into ~/working_directory/step2 . For a description of the outputs see here .","title":"Step 2: Seurat object and ambient RNA"},{"location":"Step2/#step-2-create-seurat-object-and-remove-ambient-rna","text":"In Step 2, the CellRanger outputs generated in Step 1 (expression matrix, features, and barcodes) are used to create a Seurat object for each sample. The ambient RNA quantity is estimated and there is an option to correct gene expression profiles for RNA contamination using SoupX ( Young et al. 2020 ). Then, CellRanger (if not removing ambient RNA) or SoupX (if removing ambient RNA) feature-barcode expression matrices are transformed into Seurat objects. Quality control measures are then computed to inform filtering in Step 3, including: the number of unique transcripts (genes; nFeaturesRNA); the total number of transcripts (nCountsRNA); the percentage of mitochondrial-encoded transcripts; the percentage of ribosome gene transcripts. Normalization and scaling is then performed on the individual Seurat objects prior to cell-cycle scoring. The following parameters are adjustable for Step 2 ( ~/working_directory/job_info/parameters/step2_par.txt ): Parameter Default Description par_save_RNA Yes Whether or not to export an RNA expression matrix par_save_metadata Yes Whether or not to export a metadata dataframe par_ambient_RNA Yes Whether or not to correct the feature-barcode expression matrices for ambient RNA contamination par_min.cells_L 3 Only retain genes expressed in a minimum number of cells par_normalization.method LogNormalize Method to use for normalization par_scale.factor 10000 Scale factor for scaling the data par_selection.method vst Method for choosing the top variable features par_nfeatures 2500 Number of features to select as top variable features To run Step 2, use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 2 The resulting output files are deposited into ~/working_directory/step2 . For a description of the outputs see here .","title":"Step 2: Create Seurat object and remove ambient RNA"},{"location":"Step3/","text":"Step 3: Quality control and generation of filtered data objects In Step 3, low quality cells are filtered based on the user-defined thresholds for: the number of unique transcripts (genes; nFeaturesRNA); the total number of transcripts (nCountsRNA); the percentage of mitochondrial-encoded transcripts; the percentage of ribosome gene transcripts. In addition, users can remove or regress a custom gene list from the dataset. Finally, normalization and scaling is performed on the filtered Seurat objects. The following parameters are adjustable for Step 3 ( ~/working_directory/job_info/parameters/step3_par.txt ): Parameter Default Description par_save_RNA Yes Whether or not to export an RNA expression matrix par_save_metadata Yes Whether or not to export a metadata dataframe par_seurat_object NULL If users already have a Seurat object(s), they may provide the path to a directory that contains an existing Seurat object(s) to initiate the pipeline at Step 3 par_nFeature_RNA_L 300 Only retain cells expressing a minimum number of unique RNA transcripts par_nFeature_RNA_U 10000 Only retain cells expressing a maximum number of unique RNA transcripts par_nCount_RNA_L 300 Only retain cells with a minimum number of total RNA transcripts par_nCount_RNA_U 20000 Only retain cells with a maximum number of total RNA transcripts par_mitochondria_percent_L 0 Only retain cells with a minimum percentage of mitochondrial-encoded genes par_mitochondria_percent_U 20 Only retain cells with a maximum percentage of mitochondrial-encoded genes par_ribosomal_percent_L 0 Only retain cells with a minimum percentage of ribosome genes par_ribosomal_percent_U 100 Only retain cells with a maximum percentage of ribosome genes par_remove_mitochondrial_genes No Whether or not to remove mitochondrial genes par_remove_ribosomal_genes No Whether or not to remove ribosomal genes par_remove_genes NULL If users want to remove specific genes from their data, they may define a list of gene identifiers par_regress_cell_cycle_genes No Whether or not to regress cell cycle genes par_regress_custom_genes No Whether or not to regress a custom list of genes par_regress_genes NULL List of custom genes to regress par_normalization.method LogNormalize Method to use for normalization par_scale.factor 10000 Scale factor for scaling the data par_selection.method vst Method for choosing the top variable features par_nfeatures 2500 Number of features to select as top variable features par_top 10 Number of most variable features to be reported in the csv file par_npcs_pca 30 Total Number of principal components to compute and store for principal component analysis (PCA) To run Step 3, use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 3 The resulting output files are deposited into ~/working_directory/step3 . For a description of the outputs see here .","title":"Step 3: Quality control and filtering"},{"location":"Step3/#step-3-quality-control-and-generation-of-filtered-data-objects","text":"In Step 3, low quality cells are filtered based on the user-defined thresholds for: the number of unique transcripts (genes; nFeaturesRNA); the total number of transcripts (nCountsRNA); the percentage of mitochondrial-encoded transcripts; the percentage of ribosome gene transcripts. In addition, users can remove or regress a custom gene list from the dataset. Finally, normalization and scaling is performed on the filtered Seurat objects. The following parameters are adjustable for Step 3 ( ~/working_directory/job_info/parameters/step3_par.txt ): Parameter Default Description par_save_RNA Yes Whether or not to export an RNA expression matrix par_save_metadata Yes Whether or not to export a metadata dataframe par_seurat_object NULL If users already have a Seurat object(s), they may provide the path to a directory that contains an existing Seurat object(s) to initiate the pipeline at Step 3 par_nFeature_RNA_L 300 Only retain cells expressing a minimum number of unique RNA transcripts par_nFeature_RNA_U 10000 Only retain cells expressing a maximum number of unique RNA transcripts par_nCount_RNA_L 300 Only retain cells with a minimum number of total RNA transcripts par_nCount_RNA_U 20000 Only retain cells with a maximum number of total RNA transcripts par_mitochondria_percent_L 0 Only retain cells with a minimum percentage of mitochondrial-encoded genes par_mitochondria_percent_U 20 Only retain cells with a maximum percentage of mitochondrial-encoded genes par_ribosomal_percent_L 0 Only retain cells with a minimum percentage of ribosome genes par_ribosomal_percent_U 100 Only retain cells with a maximum percentage of ribosome genes par_remove_mitochondrial_genes No Whether or not to remove mitochondrial genes par_remove_ribosomal_genes No Whether or not to remove ribosomal genes par_remove_genes NULL If users want to remove specific genes from their data, they may define a list of gene identifiers par_regress_cell_cycle_genes No Whether or not to regress cell cycle genes par_regress_custom_genes No Whether or not to regress a custom list of genes par_regress_genes NULL List of custom genes to regress par_normalization.method LogNormalize Method to use for normalization par_scale.factor 10000 Scale factor for scaling the data par_selection.method vst Method for choosing the top variable features par_nfeatures 2500 Number of features to select as top variable features par_top 10 Number of most variable features to be reported in the csv file par_npcs_pca 30 Total Number of principal components to compute and store for principal component analysis (PCA) To run Step 3, use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 3 The resulting output files are deposited into ~/working_directory/step3 . For a description of the outputs see here .","title":"Step 3: Quality control and generation of filtered data objects"},{"location":"Step4/","text":"Step 4: Doublet removal (standard track) In Step 4 of the standard analysis track, doublets (barcodes produced by sequencing two or more cells) are identified and optionally removed from downstream analysis using the DoubletFinder tool ( McGinnis et al. 2019 ). The following parameters are adjustable for Step 4 of the standard track ( ~/working_directory/job_info/parameters/step4_par.txt ): Parameter Default Description par_save_RNA Yes Whether or not to export an RNA expression matrix par_save_metadata Yes Whether or not to export a metadata dataframe par_seurat_object NULL If users already have a Seurat object(s), they may provide the path to a directory that contains an existing Seurat object(s) to initiate the pipeline at Step 4 par_RunUMAP_dims 25 Number of dimensions to use as input features for uniform manifold approximation and projection (UMAP) par_RunUMAP_n.neighbors 45 Number of neighboring points used in local approximations of manifold structure par_dropDN Yes Whether or not to remove predicted doublets from downstream analyses par_PCs 25 The number of statistically significant principal components. Can be informed by elbow plot produced in Step 3 par_pN 0.25 The number of artificial doublets to generate. DoubletFinderr is largely invariant to this parameter. We suggest keeping 0.25 par_sct FALSE Logical representing whether SCTransform was used during original Seurat object pre-processing par_sample_names NULL A list of sample names for each sample in the experiement, corresponding to the expected doublet rates listed in the parameter below. Sample names should be the same as those used to produce the samples_info folder during the setup procedures. par_expected_doublet_rate NULL A vector of expected doublet rates for each sample (e.g. for a 5% expected doublet rate, write 0.05). The expected doublet rates for each sample should be listed in the same order as the sample names in the above parameter. Make sure to have as many expected doublet rates listed as you have samples. Note: For more information regarding the expected doublet rates, please see the 10X Genomics documentation . To run Step 4, use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 4 The resulting output files are deposited into ~/working_directory/step4 . For a description of the outputs see here .","title":"Step 4: Doublet removal (standard)"},{"location":"Step4/#step-4-doublet-removal-standard-track","text":"In Step 4 of the standard analysis track, doublets (barcodes produced by sequencing two or more cells) are identified and optionally removed from downstream analysis using the DoubletFinder tool ( McGinnis et al. 2019 ). The following parameters are adjustable for Step 4 of the standard track ( ~/working_directory/job_info/parameters/step4_par.txt ): Parameter Default Description par_save_RNA Yes Whether or not to export an RNA expression matrix par_save_metadata Yes Whether or not to export a metadata dataframe par_seurat_object NULL If users already have a Seurat object(s), they may provide the path to a directory that contains an existing Seurat object(s) to initiate the pipeline at Step 4 par_RunUMAP_dims 25 Number of dimensions to use as input features for uniform manifold approximation and projection (UMAP) par_RunUMAP_n.neighbors 45 Number of neighboring points used in local approximations of manifold structure par_dropDN Yes Whether or not to remove predicted doublets from downstream analyses par_PCs 25 The number of statistically significant principal components. Can be informed by elbow plot produced in Step 3 par_pN 0.25 The number of artificial doublets to generate. DoubletFinderr is largely invariant to this parameter. We suggest keeping 0.25 par_sct FALSE Logical representing whether SCTransform was used during original Seurat object pre-processing par_sample_names NULL A list of sample names for each sample in the experiement, corresponding to the expected doublet rates listed in the parameter below. Sample names should be the same as those used to produce the samples_info folder during the setup procedures. par_expected_doublet_rate NULL A vector of expected doublet rates for each sample (e.g. for a 5% expected doublet rate, write 0.05). The expected doublet rates for each sample should be listed in the same order as the sample names in the above parameter. Make sure to have as many expected doublet rates listed as you have samples. Note: For more information regarding the expected doublet rates, please see the 10X Genomics documentation . To run Step 4, use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 4 The resulting output files are deposited into ~/working_directory/step4 . For a description of the outputs see here .","title":"Step 4: Doublet removal (standard track)"},{"location":"Step4HTO/","text":"Step 4: Demultiplexing and doublet detection (HTO track) In Step 4 of the HTO track, Seurat\u2019s implementation ( MULTIseqDemux ) of the tag assignment algorithm outlined in Multi-seq is used to demultiplex pooled samples and identify doublets according to the expression matrices of the sample-specific barcodes ( McGinnis et al 2019 ). The following parameters are adjustable for Step 4 ( ~/working_directory/job_info/parameters/step4_par.txt ): Parameter Default Description par_save_RNA Yes Whether or not to export an RNA expression matrix par_save_metadata Yes Whether or not to export a metadata dataframe par_seurat_object NULL If users already have a Seurat object(s), they may provide the path to a directory that contains an existing Seurat object(s) to initiate the pipeline at Step 4 par_normalization.method CLR Method for normalizing the HTO assay par_scale.factor 1000 Scale factor for scaling the HTO assay par_selection.method vst Method for selecting the most variable features in the HTO assay par_nfeatures 5 Number of features to select as top variable features for the HTO assay. This value is dependent on the number of sample specific barcodes used in the experiment par_dims_umap 5 Number of dimensions to use as input features for uniform manifold approximation and projection (UMAP) of HTO assay par_n.neighbor 65 Number of neighboring points to use in local approximations of manifold structure par_dimensionality_reduction Yes Whether or not to perform linear dimensionality reduction on the HTO assay par_npcs_pca 30 Total Number of principal components to compute and store for principal component analysis (PCA) of HTO assay par_dropDN Yes Whether or not to remove predicted doublets and negatives from downstream analyses par_label_dropDN Doublet, Negative Labels used to identify doublet and negative droplets par_quantile 0.9 The quantile to use for droplet classification using MULTIseqDemux par_autoThresh TRUE Whether or not to perform automated threshold finding to define the best quantile for droplet classification using MULTIseqDemux par_maxiter 5 Maximum number of iterations to use if autoThresh = TRUE par_RidgePlot_ncol 3 Number of columns used to display RidgePlots, which visualizes the enrichment of barcode labels across samples par_old_antibody_label NULL If you wish to rename the barcode labels, first list the existing barcode labels in this parameter. old antibody labels can be identified in the \"_old_antibody_label_MULTIseqDemuxHTOcounts\" file produced by running Step 4 msd par_new_antibody_label NULL If you wish to rename the barcode labels, list the new labels corresponding to the old labels listed in the parameter above To demultiplex the samples and identify doublets, the first step is to obtain the barcode labels used in the analysis by running the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 4 \\ --msd T Note: This step will produce the old_antibody_label_MULTIseqDemuxHTOcounts.csv file, which contains the names of the old HTO labels. The names of the HTO labels can be revised to be more descriptive in the execution parameters of this step (par_old_antibody_label; par_new_antibody_label) Next, demultiplex the samples and identify doublets by running the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 4 The resulting output files are deposited into ~/working_directory/step4 . For a description of the outputs see here .","title":"Step 4: Demultiplexing (HTO)"},{"location":"Step4HTO/#step-4-demultiplexing-and-doublet-detection-hto-track","text":"In Step 4 of the HTO track, Seurat\u2019s implementation ( MULTIseqDemux ) of the tag assignment algorithm outlined in Multi-seq is used to demultiplex pooled samples and identify doublets according to the expression matrices of the sample-specific barcodes ( McGinnis et al 2019 ). The following parameters are adjustable for Step 4 ( ~/working_directory/job_info/parameters/step4_par.txt ): Parameter Default Description par_save_RNA Yes Whether or not to export an RNA expression matrix par_save_metadata Yes Whether or not to export a metadata dataframe par_seurat_object NULL If users already have a Seurat object(s), they may provide the path to a directory that contains an existing Seurat object(s) to initiate the pipeline at Step 4 par_normalization.method CLR Method for normalizing the HTO assay par_scale.factor 1000 Scale factor for scaling the HTO assay par_selection.method vst Method for selecting the most variable features in the HTO assay par_nfeatures 5 Number of features to select as top variable features for the HTO assay. This value is dependent on the number of sample specific barcodes used in the experiment par_dims_umap 5 Number of dimensions to use as input features for uniform manifold approximation and projection (UMAP) of HTO assay par_n.neighbor 65 Number of neighboring points to use in local approximations of manifold structure par_dimensionality_reduction Yes Whether or not to perform linear dimensionality reduction on the HTO assay par_npcs_pca 30 Total Number of principal components to compute and store for principal component analysis (PCA) of HTO assay par_dropDN Yes Whether or not to remove predicted doublets and negatives from downstream analyses par_label_dropDN Doublet, Negative Labels used to identify doublet and negative droplets par_quantile 0.9 The quantile to use for droplet classification using MULTIseqDemux par_autoThresh TRUE Whether or not to perform automated threshold finding to define the best quantile for droplet classification using MULTIseqDemux par_maxiter 5 Maximum number of iterations to use if autoThresh = TRUE par_RidgePlot_ncol 3 Number of columns used to display RidgePlots, which visualizes the enrichment of barcode labels across samples par_old_antibody_label NULL If you wish to rename the barcode labels, first list the existing barcode labels in this parameter. old antibody labels can be identified in the \"_old_antibody_label_MULTIseqDemuxHTOcounts\" file produced by running Step 4 msd par_new_antibody_label NULL If you wish to rename the barcode labels, list the new labels corresponding to the old labels listed in the parameter above To demultiplex the samples and identify doublets, the first step is to obtain the barcode labels used in the analysis by running the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 4 \\ --msd T Note: This step will produce the old_antibody_label_MULTIseqDemuxHTOcounts.csv file, which contains the names of the old HTO labels. The names of the HTO labels can be revised to be more descriptive in the execution parameters of this step (par_old_antibody_label; par_new_antibody_label) Next, demultiplex the samples and identify doublets by running the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 4 The resulting output files are deposited into ~/working_directory/step4 . For a description of the outputs see here .","title":"Step 4: Demultiplexing and doublet detection (HTO track)"},{"location":"Step5/","text":"Step 5: Creation of a single Seurat object from all samples In Step 5, individual Seurat objects from each sample are combined to enable the joint analysis across samples. Users can either merge or integrate their Seurat objects ( Stuart et al. 2019 ). Alternatively, if experiments are limited to a single sequencing run, merging/integration can be bypassed; however, Step 5 must still be run because normalization, scaling, and linear dimensional reduction is then performed to inform the optimal parameters for clustering in Step 6. Note: For more information regarding the difference between merging and integration, please see our pre-print manuscript here . The following parameters are adjustable for Step 5 ( ~/working_directory/job_info/parameters/step5_par.txt ): Parameter Default Description par_save_RNA Yes Whether or not to export an RNA expression matrix par_save_metadata Yes Whether or not to export a metadata dataframe par_seurat_object NULL If users already have a Seurat object(s), they may provide the path to a directory that contains an existing Seurat object(s) to initiate the pipeline at Step 5 par_one_seurat No Whether or not the experiment comprises of only one sequencing run. If this parameter is set to \"Yes\", set par_integrate_seurat and par_merge_seurat to \"No\". par_integrate_seurat Yes Whether or not to integrate the samples. If \"Yes\", par_merge_seurat must be \"No\". par_merge_seurat No Whether or not to merge the samples. If \"Yes\", par_integrate_seurat must be \"No\". par_DefaultAssay RNA The assay to perform normalization, scaling, and linear dimensiona reduction on. For most use cases this will be RNA. par_normalization.method LogNormalize Method to use for normalization par_scale.factor 10000 Scale factor for scaling the data par_selection.method vst Method for detecting top variable features par_nfeatures 2500 Number of features to select as top variable features par_FindIntegrationAnchors_dim 25 Which dimensions to use from the canonical correlation analysis (CCA) to specify the neighbor search space par_RunPCA_npcs 30 Total Number of principal components to compute and store for principal component analysis (PCA) par_RunUMAP_dims 25 Number of dimensions to use as input features for uniform manifold approximation and projection (UMAP) par_RunUMAP_n.neighbors 45 Number of neighboring points used in local approximations of manifold structure par_compute_jackstraw No Whether or not to perform JackStraw computation. This computation takes a long time. To run Step 5, use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 5 The resulting output files are deposited into ~/working_directory/step5 . For a description of the outputs see here .","title":"Step 5: Integration"},{"location":"Step5/#step-5-creation-of-a-single-seurat-object-from-all-samples","text":"In Step 5, individual Seurat objects from each sample are combined to enable the joint analysis across samples. Users can either merge or integrate their Seurat objects ( Stuart et al. 2019 ). Alternatively, if experiments are limited to a single sequencing run, merging/integration can be bypassed; however, Step 5 must still be run because normalization, scaling, and linear dimensional reduction is then performed to inform the optimal parameters for clustering in Step 6. Note: For more information regarding the difference between merging and integration, please see our pre-print manuscript here . The following parameters are adjustable for Step 5 ( ~/working_directory/job_info/parameters/step5_par.txt ): Parameter Default Description par_save_RNA Yes Whether or not to export an RNA expression matrix par_save_metadata Yes Whether or not to export a metadata dataframe par_seurat_object NULL If users already have a Seurat object(s), they may provide the path to a directory that contains an existing Seurat object(s) to initiate the pipeline at Step 5 par_one_seurat No Whether or not the experiment comprises of only one sequencing run. If this parameter is set to \"Yes\", set par_integrate_seurat and par_merge_seurat to \"No\". par_integrate_seurat Yes Whether or not to integrate the samples. If \"Yes\", par_merge_seurat must be \"No\". par_merge_seurat No Whether or not to merge the samples. If \"Yes\", par_integrate_seurat must be \"No\". par_DefaultAssay RNA The assay to perform normalization, scaling, and linear dimensiona reduction on. For most use cases this will be RNA. par_normalization.method LogNormalize Method to use for normalization par_scale.factor 10000 Scale factor for scaling the data par_selection.method vst Method for detecting top variable features par_nfeatures 2500 Number of features to select as top variable features par_FindIntegrationAnchors_dim 25 Which dimensions to use from the canonical correlation analysis (CCA) to specify the neighbor search space par_RunPCA_npcs 30 Total Number of principal components to compute and store for principal component analysis (PCA) par_RunUMAP_dims 25 Number of dimensions to use as input features for uniform manifold approximation and projection (UMAP) par_RunUMAP_n.neighbors 45 Number of neighboring points used in local approximations of manifold structure par_compute_jackstraw No Whether or not to perform JackStraw computation. This computation takes a long time. To run Step 5, use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 5 The resulting output files are deposited into ~/working_directory/step5 . For a description of the outputs see here .","title":"Step 5: Creation of a single Seurat object from all samples"},{"location":"Step6/","text":"Step 6: Clustering In Step 6, clustering is performed to define groups of cells with similar expression profiles using the Seurat implementation of the Louvain network detection with PCA dimensionality reduction as input ( Macosko et al. 2015 ). The following parameters are adjustable for Step 6 ( ~/working_directory/job_info/parameters/step6_par.txt ): Parameter Default Description par_save_RNA Yes Whether or not to export an RNA expression matrix par_save_metadata Yes Whether or not to export a metadata dataframe par_seurat_object NULL If users already have a Seurat object, they may provide the path to the Seurat object to initiate the pipeline at Step 6 par_skip_integration No Whether or not the user skipped integration in Step 5 par_FindNeighbors_dims 25 Number of dimensions from linear dimensional reduction used as input to identify neighbours. Can be informed by the elbow and Jackstraw plots produced in Step 5 par_RunUMAP_dims 25 Number of dimensions to use as input features for uniform manifold approximation and projection (UMAP) par_FindNeighbors_k.param 45 Defines k for the k-nearest neighbor algorithm par_FindNeighbors_prune.SNN 1/15 Sets the cutoff for acceptable Jaccard index when computing the neighborhood overlap for the shared nearest-neighbour (SNN) construction par_FindClusters_resolution 0, 0.05, 0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 2.0 Value of the clustering resolution parameter. You may provide multiple resolution values par_compute_ARI Yes Whether or not you want to compute the Adjusted Rand Index (ARI) between clusters at a given clustering resolution par_RI_reps 25 Number of iterations for clustering the data at a given resolution in order to calculate the ARI To run Step 6, use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 6 The resulting output files are deposited into ~/working_directory/step6 . For a description of the outputs see here .","title":"Step 6: Clustering"},{"location":"Step6/#step-6-clustering","text":"In Step 6, clustering is performed to define groups of cells with similar expression profiles using the Seurat implementation of the Louvain network detection with PCA dimensionality reduction as input ( Macosko et al. 2015 ). The following parameters are adjustable for Step 6 ( ~/working_directory/job_info/parameters/step6_par.txt ): Parameter Default Description par_save_RNA Yes Whether or not to export an RNA expression matrix par_save_metadata Yes Whether or not to export a metadata dataframe par_seurat_object NULL If users already have a Seurat object, they may provide the path to the Seurat object to initiate the pipeline at Step 6 par_skip_integration No Whether or not the user skipped integration in Step 5 par_FindNeighbors_dims 25 Number of dimensions from linear dimensional reduction used as input to identify neighbours. Can be informed by the elbow and Jackstraw plots produced in Step 5 par_RunUMAP_dims 25 Number of dimensions to use as input features for uniform manifold approximation and projection (UMAP) par_FindNeighbors_k.param 45 Defines k for the k-nearest neighbor algorithm par_FindNeighbors_prune.SNN 1/15 Sets the cutoff for acceptable Jaccard index when computing the neighborhood overlap for the shared nearest-neighbour (SNN) construction par_FindClusters_resolution 0, 0.05, 0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 2.0 Value of the clustering resolution parameter. You may provide multiple resolution values par_compute_ARI Yes Whether or not you want to compute the Adjusted Rand Index (ARI) between clusters at a given clustering resolution par_RI_reps 25 Number of iterations for clustering the data at a given resolution in order to calculate the ARI To run Step 6, use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 6 The resulting output files are deposited into ~/working_directory/step6 . For a description of the outputs see here .","title":"Step 6: Clustering"},{"location":"Step7/","text":"Step 7: Cluster annotation In Step 7, cluster annotation is performed to define the cell types comprising the clusters identified in Step 6. ScRNAbox provides three tools to identify cell types comprising the clusters: Tool 1: Cluster marker gene identification and gene set enrichment analysis (GSEA) Seurat's FindAllMarkers function is used to identify differentially expressed marker genes (DEG) by the Wilcoxon rank-sum test ( Macosko et al. 2015 ). DEGs in the positive direction (Log2 fold-change > 0.00) are then tested for enrichment across user-defined gene set libraries that define cell types using the EnrichR tool ( Chen et al. 2013 ). Tool 2: Expression profiling of cell type markers and module scores Users can visualize the expression of individual genes and the aggregated expression of multiple genes. For each gene in a user-defined list, plots are produced to visualize its expression at the cluster or cell level. The aggregated expression of genes in a user-defined list are calculated using the Seurat AddModuleScore function ( Tirosh et al. 2016 . Tool 3: Cell type predictions based on reference data Seurat's FindTransferAnchors and TransferData functions are used to leverage cell-type annotations from a reference Seurat object and generate annotation predictions for the query dataset ( Butlet et al. 2019 ). Additionally, users can add cluster annotations to the Seurat object. The following parameters are adjustable for Step 7 ( ~/working_directory/job_info/parameters/step7_par.txt ): Annotation tool Parameter Default Description General par_save_RNA Yes Whether or not to export an RNA expression matrix General par_save_metadata Yes Whether or not to export a metadata dataframe General par_seurat_object NULL If users already have a Seurat object, they may provide the path to the Seurat object to initiate the pipeline at Step 7 General par_level_cluster integrated_snn_res.0.75 The cluster resolution that you want to annotate. If you skipped integration in Step 5, use par_level_cluster='RNA_snn_res.0.7', if you want to proceed with a clustering resolution of 0.7. Tool 1 par_run_find_marker Yes Whether or not to find marker genes for each cluster Tool 1 par_run_enrichR No Whether or not to run gene set enrichment analysis (GSEA) on the marker genes for each cluster using the EnrichR tools. Note that the HPC must have access to the internet to run GSEA. Tool 1 par_top_sel 5 Number of top markers to identify based on avg_log2FC Tool 1 par_db Descartes_Cell_Types_and_Tissue_2021, CellMarker_Augmented_2021, Azimuth_Cell_Types_2021 Character vector of EnrichR databases that define cell types. The top marker genes for each cluster will be tested for enrichment across these databases. Tool 2 par_run_module_score Yes Whether or not to compute module score for aggregated expression Tool 2 par_run_visualize_markers Yes Whether or not to visualize the expression of individual genes Tool 2 par_module_score NULL Path to the csv file containing the gene sets for the module score Tool 2 par_select_features_list NULL List of genes whose expression will be visualized individually Tool 2 par_select_features_csv NULL If you want to define multiple lists of features to visualize individually, you can do so with a csv file. The header should contain the list names and all features belonging to the same list should be in the same column. Tool 3 par_reference NULL Path defining the location of the reference Seurat object Tool 3 par_reference_name Reference An arbitrary name for the reference object. This will be used to name the metadata slot. Tool 3 par_level_celltype NULL The name of the metadata column in the reference Seurat object that defines cell types Tool 3 par_FindTransferAnchors_dim 50 Number of dimensions from linear dimensional reduction used to find transfer anchors between the reference and query Seurat objects Tool 3 par_futureglobalsmaxSize 60000 * 1024^2 This will increase your RAM usage so set this number mindfully Annotate par_annotate_resolution integrated_snn_res.0.75 Which clustering resolution you want to annotate Annotate par_name_metadata Celltypes1 The name of the metadata slot that will contain the annotations Annotate par_annotate_labels NULL A list of cluster labels. There must as many labels as clusters at the defined clustering resolution. Please refrain from using \"_\" when annotating. Tool 1: Cluster marker GSEA To run cluster marker GSEA, use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --markergsea T The resulting output files are deposited into ~/working_directory/step7/*/marker . For a description of the outputs see here . Note: In order to test the cluster marker genes for enrichment across EnrichR libraries, the HPC must have access to the internet. If your HPC cannot access the internet, you must set par_run_enrichR = \"no\" . The pipeline will still run differential gene expression and find the markers for each cluster. You can then take the pipeline output and run the enrichment step on your local machine directly in R. To do so, begin by downloading the ClusterMarkers.csv file obtained from running the above command with par_run_find_marker = \"yes\" to your computer: scp username@beluga.computecanada.ca:~/working_directory/step7/info7/marker/ClusterMarkers.csv ~/Desktop/working_directory Then run the following code in R: #set up the environment library(Seurat) library(dplyr) library(ggplot2) library(enrichR) ## set up the parameters PWD <-'/path/directory/where/outputs/will/be/deposited' cluster_marker <- '/path/to/ClusterMarkers.csv' db <- c('Descartes_Cell_Types_and_Tissue_2021','CellMarker_Augmented_2021','Azimuth_Cell_Types_2021') ## set up the function annotation<-function(PWD,cluster_marker,db) { library(Seurat) library(dplyr) library(ggplot2) library(enrichR) setwd(PWD) cluster_marker <- read.delim(cluster_marker, header = T, sep = \",\") dir.create(\"annot_enrich\") for (i in unique(cluster_marker$cluster)) { dir.create(paste0(PWD,\"/annot_enrich\", \"/clust\",i)) } for (i in unique(cluster_marker$cluster)) { for (j in 1:length(db)) { setwd(PWD) setwd(paste0('./annot_enrich/clust',i)) N1.c0 <- cluster_marker %>% filter(cluster == i & avg_log2FC > 0) genes <- N1.c0$gene N1.c0.Er <- enrichr(genes, databases = db[j]) if(is.null(N1.c0.Er)) next plotEnrich(N1.c0.Er[[1]], showTerms = 20, numChar = 40, y = \"Count\", orderBy = \"P.value\") + ggtitle(paste0(db[j], \" cluster \", i)) ggsave(file = paste0(\"plotenrich_clust_\",i, \"_\", j,\".pdf\")) N1.Er.genes.1 <- N1.c0.Er[[1]] %>% dplyr::select(Term, Genes, Combined.Score) write.csv(N1.Er.genes.1,paste0(\"Er_genes_clust_\",i,\"_\",db[j],\".csv\")) } } } ## perform enrichment annotation(PWD,cluster_marker,db) Note : Users can define whichever libraries they want. For more information regarding the available libraries, see here . Tool 2: Expression profiling of known marker genes To profile the expression known marker genes, use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --knownmarkers T The resulting output files are deposited into ~/working_directory/step7/*/visualize_features for individual expression or ~/working_directory/step7/*/module_score for aggregated expression. For a description of the outputs see here . Tool 3: Reference-based annotation To perform reference-based annotation, use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --referenceannotation T The resulting output files are deposited into ~/working_directory/step7/*/reference_based_annotation . For a description of the outputs see here . Adding annotations To add cluster annotations to the Seurat object's metadata, use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --annotate T The resulting output files are deposited into ~/working_directory/step7/*/annotate . For a description of the outputs see here . Note: The cluster annotations from each iteration of the step will be retained, allowing users to define multiple clustering levels.","title":"Step 7: Cluster annotation"},{"location":"Step7/#step-7-cluster-annotation","text":"In Step 7, cluster annotation is performed to define the cell types comprising the clusters identified in Step 6. ScRNAbox provides three tools to identify cell types comprising the clusters: Tool 1: Cluster marker gene identification and gene set enrichment analysis (GSEA) Seurat's FindAllMarkers function is used to identify differentially expressed marker genes (DEG) by the Wilcoxon rank-sum test ( Macosko et al. 2015 ). DEGs in the positive direction (Log2 fold-change > 0.00) are then tested for enrichment across user-defined gene set libraries that define cell types using the EnrichR tool ( Chen et al. 2013 ). Tool 2: Expression profiling of cell type markers and module scores Users can visualize the expression of individual genes and the aggregated expression of multiple genes. For each gene in a user-defined list, plots are produced to visualize its expression at the cluster or cell level. The aggregated expression of genes in a user-defined list are calculated using the Seurat AddModuleScore function ( Tirosh et al. 2016 . Tool 3: Cell type predictions based on reference data Seurat's FindTransferAnchors and TransferData functions are used to leverage cell-type annotations from a reference Seurat object and generate annotation predictions for the query dataset ( Butlet et al. 2019 ). Additionally, users can add cluster annotations to the Seurat object. The following parameters are adjustable for Step 7 ( ~/working_directory/job_info/parameters/step7_par.txt ): Annotation tool Parameter Default Description General par_save_RNA Yes Whether or not to export an RNA expression matrix General par_save_metadata Yes Whether or not to export a metadata dataframe General par_seurat_object NULL If users already have a Seurat object, they may provide the path to the Seurat object to initiate the pipeline at Step 7 General par_level_cluster integrated_snn_res.0.75 The cluster resolution that you want to annotate. If you skipped integration in Step 5, use par_level_cluster='RNA_snn_res.0.7', if you want to proceed with a clustering resolution of 0.7. Tool 1 par_run_find_marker Yes Whether or not to find marker genes for each cluster Tool 1 par_run_enrichR No Whether or not to run gene set enrichment analysis (GSEA) on the marker genes for each cluster using the EnrichR tools. Note that the HPC must have access to the internet to run GSEA. Tool 1 par_top_sel 5 Number of top markers to identify based on avg_log2FC Tool 1 par_db Descartes_Cell_Types_and_Tissue_2021, CellMarker_Augmented_2021, Azimuth_Cell_Types_2021 Character vector of EnrichR databases that define cell types. The top marker genes for each cluster will be tested for enrichment across these databases. Tool 2 par_run_module_score Yes Whether or not to compute module score for aggregated expression Tool 2 par_run_visualize_markers Yes Whether or not to visualize the expression of individual genes Tool 2 par_module_score NULL Path to the csv file containing the gene sets for the module score Tool 2 par_select_features_list NULL List of genes whose expression will be visualized individually Tool 2 par_select_features_csv NULL If you want to define multiple lists of features to visualize individually, you can do so with a csv file. The header should contain the list names and all features belonging to the same list should be in the same column. Tool 3 par_reference NULL Path defining the location of the reference Seurat object Tool 3 par_reference_name Reference An arbitrary name for the reference object. This will be used to name the metadata slot. Tool 3 par_level_celltype NULL The name of the metadata column in the reference Seurat object that defines cell types Tool 3 par_FindTransferAnchors_dim 50 Number of dimensions from linear dimensional reduction used to find transfer anchors between the reference and query Seurat objects Tool 3 par_futureglobalsmaxSize 60000 * 1024^2 This will increase your RAM usage so set this number mindfully Annotate par_annotate_resolution integrated_snn_res.0.75 Which clustering resolution you want to annotate Annotate par_name_metadata Celltypes1 The name of the metadata slot that will contain the annotations Annotate par_annotate_labels NULL A list of cluster labels. There must as many labels as clusters at the defined clustering resolution. Please refrain from using \"_\" when annotating.","title":"Step 7: Cluster annotation"},{"location":"Step7/#tool-1-cluster-marker-gsea","text":"To run cluster marker GSEA, use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --markergsea T The resulting output files are deposited into ~/working_directory/step7/*/marker . For a description of the outputs see here . Note: In order to test the cluster marker genes for enrichment across EnrichR libraries, the HPC must have access to the internet. If your HPC cannot access the internet, you must set par_run_enrichR = \"no\" . The pipeline will still run differential gene expression and find the markers for each cluster. You can then take the pipeline output and run the enrichment step on your local machine directly in R. To do so, begin by downloading the ClusterMarkers.csv file obtained from running the above command with par_run_find_marker = \"yes\" to your computer: scp username@beluga.computecanada.ca:~/working_directory/step7/info7/marker/ClusterMarkers.csv ~/Desktop/working_directory Then run the following code in R: #set up the environment library(Seurat) library(dplyr) library(ggplot2) library(enrichR) ## set up the parameters PWD <-'/path/directory/where/outputs/will/be/deposited' cluster_marker <- '/path/to/ClusterMarkers.csv' db <- c('Descartes_Cell_Types_and_Tissue_2021','CellMarker_Augmented_2021','Azimuth_Cell_Types_2021') ## set up the function annotation<-function(PWD,cluster_marker,db) { library(Seurat) library(dplyr) library(ggplot2) library(enrichR) setwd(PWD) cluster_marker <- read.delim(cluster_marker, header = T, sep = \",\") dir.create(\"annot_enrich\") for (i in unique(cluster_marker$cluster)) { dir.create(paste0(PWD,\"/annot_enrich\", \"/clust\",i)) } for (i in unique(cluster_marker$cluster)) { for (j in 1:length(db)) { setwd(PWD) setwd(paste0('./annot_enrich/clust',i)) N1.c0 <- cluster_marker %>% filter(cluster == i & avg_log2FC > 0) genes <- N1.c0$gene N1.c0.Er <- enrichr(genes, databases = db[j]) if(is.null(N1.c0.Er)) next plotEnrich(N1.c0.Er[[1]], showTerms = 20, numChar = 40, y = \"Count\", orderBy = \"P.value\") + ggtitle(paste0(db[j], \" cluster \", i)) ggsave(file = paste0(\"plotenrich_clust_\",i, \"_\", j,\".pdf\")) N1.Er.genes.1 <- N1.c0.Er[[1]] %>% dplyr::select(Term, Genes, Combined.Score) write.csv(N1.Er.genes.1,paste0(\"Er_genes_clust_\",i,\"_\",db[j],\".csv\")) } } } ## perform enrichment annotation(PWD,cluster_marker,db) Note : Users can define whichever libraries they want. For more information regarding the available libraries, see here .","title":"Tool 1: Cluster marker GSEA"},{"location":"Step7/#tool-2-expression-profiling-of-known-marker-genes","text":"To profile the expression known marker genes, use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --knownmarkers T The resulting output files are deposited into ~/working_directory/step7/*/visualize_features for individual expression or ~/working_directory/step7/*/module_score for aggregated expression. For a description of the outputs see here .","title":"Tool 2: Expression profiling of known marker genes"},{"location":"Step7/#tool-3-reference-based-annotation","text":"To perform reference-based annotation, use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --referenceannotation T The resulting output files are deposited into ~/working_directory/step7/*/reference_based_annotation . For a description of the outputs see here .","title":"Tool 3: Reference-based annotation"},{"location":"Step7/#adding-annotations","text":"To add cluster annotations to the Seurat object's metadata, use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --annotate T The resulting output files are deposited into ~/working_directory/step7/*/annotate . For a description of the outputs see here . Note: The cluster annotations from each iteration of the step will be retained, allowing users to define multiple clustering levels.","title":"Adding annotations"},{"location":"Step8/","text":"Step 8: Differential gene expression (DGE) analysis In Step 8, DGE analysis is computed to identify differentially expressed genes (DEG) between two conditions. Prior to computing DGE, users can add metdata containing phenotypic and experimental data to the Seurat object, which can then be used to define the groups used for DGE analysis. In order to define the contrasts used in the DGE analysis, users must modify the contrast matrices prior to submitting the command to compute DGE . ScRNAbox can compute DGE between conditions using all cell types or cell type groups. Furthermore, scRNAbox provides two frameworks for computing DGE: 1) Cell-based DGE Cells are used as replicates and DGE is computed using the Seurat FindMarkers ( Macosko et al. 2015 ). While FindMarkers supports several statistical frameworks to compute DGE, we set the default method in our implementation to MAST, which is tailored for scRNAseq data ( Finak et al. 2015 ) 2) Sample-based DGE Samples are used as replicates by applying a pseudo-bulk analysis. The Seurat AggregateExpression function is used to compute the sum of RNA counts for each gene across all cells from a particular sample ( Cao et al. 2022 ). The DESq2 statistical framework is then used to compute DGE between conditions using the aggregated counts. ( Love et al. 2014 ) The following parameters are adjustable for Step 8: DGE method Parameter Default Description General par_save_RNA Yes Whether or not to export an RNA expression matrix General par_save_metadata Yes Whether or not to export a metadata dataframe General par_seurat_object NULL If users already have a Seurat object, they may provide the path to the Seurat object to initiate the pipeline at Step 7 Add metadata par_merge_meta orig.ident The column from the Seurat metdata that will be used to merge the new metadata. This column must also exist in the submitted csv file contaning new metadata. Add metadata par_metadata NULL csv file containing metadata to be added to the Seurat object Cell-based DGE with all cells par_run_cell_based_all_cells Yes Whether or not to compute cell-based DGE with all cells Cell-based DGE with cell type groups par_run_cell_based_cell_type_groups Yes Whether or not to compute cell-based DGE with cell type groups Sample-based DGE with all cells par_run_sample_based_all_cells Yes Whether or not to compute sample-based DGE with all cells Sample-based DGE with cell type groups par_run_sample_based_cell_type_groups Yes Whether or not to compute sample-based DGE with cell type groups Cell-based DGE par_statistical_method MAST Which statistical framework to use for computing cell-based DGE Add metadata To add metadata to the Seurat object, use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --addmeta T The resulting output files are deposited into ~/working_directory/step8 . For a description of the outputs see here . Contrast matrices Cell-based DGE using all cells To perform cell-based DGE using all cells, users must fill in the step8_contrast_cell_based_all_cells.txt file located in ~/working_directory/job_info/parameters . The contrast matrix contains the following columns: contast_name: An informative name for the contrast. This will appear as the name of the output spreadsheet. meta_data_variable: The metadata slot containing the Sample IDs defined in group1 and group2 group1: A list of sample IDs to be contrasted against the sample IDs listed in group2 group2: A list of sample IDs to be contrasted against the sample IDs listed in group1 Multiple contrasts can be defined in the same file. In addition, multiple samples can be listed under group1 and group 2. For example: contrast_name meta_data_variable group1 group2 Design1 orig.ident Control1,Control2,Control3 Case1,Case2,Case3 Design3 DiseaseStatus HealthyControl Disease Cell-based DGE using cell type groups To perform cell-based DGE using cell type groups, users must fill in the step8_contrast_cell_based_celltype_groups.txt file located in ~/working_directory/job_info/parameters . The contrast matrix contains the following columns: contast_name: An informative name for the contrast. This will appear as the name of the output spreadsheet. meta_data_celltype: The metadata slot containing cell type annotations cell_type: The cell type used to compute DGE meta_data_variable: The metadata slot containing the Sample IDs defined in group1 and group2 group1: A list of sample IDs to be contrasted against the sample IDs listed in group2 group2: A list of sample IDs to be contrasted against the sample IDs listed in group1 Multiple contrasts can be defined in the same file. In addition, multiple samples can be listed under group1 and group 2. For example: contrast_name meta_data_celltype cell_type meta_data_variable group1 group2 Design1 Annotation1 Neuron orig.ident Control1,Control2,Control3, Case1,Case2,Case3, Design2 Annotation2 Microglia DiseaseStatus HealthyControl Disease Sample-based DGE using all cells To perform sample-based DGE using all cells, users must fill in the step8_contrast_sample_based_all_cells.txt file located in ~/working_directory/job_info/parameters . The contrast matrix contains the following columns: ContrastName: An informative name for the contrast. This will appear as the name of the output spreadsheet. MainContrast: The metadata slot containing the two groups used for the main contrast (e.g. case and control) Sample_ID: The metadata slot containing the Sample IDs of the individual subjects (e.g. sample 1, sample 2, etc.) ContrastName MainContrast SampleID Design DiseaseStatus orig.ident In addition, users may add additional columns if they want to further group their samples. For example, users may wich to group samples by experimental batch: ContrastName MainContrast SampleID Batch Design DiseaseStatus orig.ident Batch_Id In this case, Batch is arbitrary, but Batch_ID must be a metadata slot. Sample-based DGE using cell type groups To perform sample-based DGE using all cells, users must fill in the step8_contrast_sample_based_celltype_groups.txt file located in ~/working_directory/job_info/parameters . The contrast matrix contains the following columns: ContrastName: An informative name for the contrast. This will appear as the name of the output spreadsheet. CellType: The metadata slot containing cell type annotations MainContrast: The metadata slot containing the two groups used for the main contrast (e.g. case and control) Sample_ID: The metadata slot containing the Sample IDs of the individual subjects (e.g. sample 1, sample 2, etc.) ContrastName CellType MainContrast SampleID Design Annotation1 DiseaseStatus orig.ident In addition, users may add additional columns if they want to further group their samples. For example, users may wich to group samples by experimental batch: ContrastName CellType MainContrast SampleID Batch Design Annotation1 DiseaseStatus orig.ident Batch_ID In this case, Batch is arbitrary, but Batch_ID must be a metadata slot. Compute DGE To compute DGE, use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ --steps 8 \\ --rundge T The resulting output files are deposited into ~/working_directory/step8 . For a description of the outputs see here .","title":"Step 8: Differential gene expression"},{"location":"Step8/#step-8-differential-gene-expression-dge-analysis","text":"In Step 8, DGE analysis is computed to identify differentially expressed genes (DEG) between two conditions. Prior to computing DGE, users can add metdata containing phenotypic and experimental data to the Seurat object, which can then be used to define the groups used for DGE analysis. In order to define the contrasts used in the DGE analysis, users must modify the contrast matrices prior to submitting the command to compute DGE . ScRNAbox can compute DGE between conditions using all cell types or cell type groups. Furthermore, scRNAbox provides two frameworks for computing DGE: 1) Cell-based DGE Cells are used as replicates and DGE is computed using the Seurat FindMarkers ( Macosko et al. 2015 ). While FindMarkers supports several statistical frameworks to compute DGE, we set the default method in our implementation to MAST, which is tailored for scRNAseq data ( Finak et al. 2015 ) 2) Sample-based DGE Samples are used as replicates by applying a pseudo-bulk analysis. The Seurat AggregateExpression function is used to compute the sum of RNA counts for each gene across all cells from a particular sample ( Cao et al. 2022 ). The DESq2 statistical framework is then used to compute DGE between conditions using the aggregated counts. ( Love et al. 2014 ) The following parameters are adjustable for Step 8: DGE method Parameter Default Description General par_save_RNA Yes Whether or not to export an RNA expression matrix General par_save_metadata Yes Whether or not to export a metadata dataframe General par_seurat_object NULL If users already have a Seurat object, they may provide the path to the Seurat object to initiate the pipeline at Step 7 Add metadata par_merge_meta orig.ident The column from the Seurat metdata that will be used to merge the new metadata. This column must also exist in the submitted csv file contaning new metadata. Add metadata par_metadata NULL csv file containing metadata to be added to the Seurat object Cell-based DGE with all cells par_run_cell_based_all_cells Yes Whether or not to compute cell-based DGE with all cells Cell-based DGE with cell type groups par_run_cell_based_cell_type_groups Yes Whether or not to compute cell-based DGE with cell type groups Sample-based DGE with all cells par_run_sample_based_all_cells Yes Whether or not to compute sample-based DGE with all cells Sample-based DGE with cell type groups par_run_sample_based_cell_type_groups Yes Whether or not to compute sample-based DGE with cell type groups Cell-based DGE par_statistical_method MAST Which statistical framework to use for computing cell-based DGE","title":"Step 8: Differential gene expression (DGE) analysis"},{"location":"Step8/#add-metadata","text":"To add metadata to the Seurat object, use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --addmeta T The resulting output files are deposited into ~/working_directory/step8 . For a description of the outputs see here .","title":"Add metadata"},{"location":"Step8/#contrast-matrices","text":"","title":"Contrast matrices"},{"location":"Step8/#cell-based-dge-using-all-cells","text":"To perform cell-based DGE using all cells, users must fill in the step8_contrast_cell_based_all_cells.txt file located in ~/working_directory/job_info/parameters . The contrast matrix contains the following columns: contast_name: An informative name for the contrast. This will appear as the name of the output spreadsheet. meta_data_variable: The metadata slot containing the Sample IDs defined in group1 and group2 group1: A list of sample IDs to be contrasted against the sample IDs listed in group2 group2: A list of sample IDs to be contrasted against the sample IDs listed in group1 Multiple contrasts can be defined in the same file. In addition, multiple samples can be listed under group1 and group 2. For example: contrast_name meta_data_variable group1 group2 Design1 orig.ident Control1,Control2,Control3 Case1,Case2,Case3 Design3 DiseaseStatus HealthyControl Disease","title":"Cell-based DGE using all cells"},{"location":"Step8/#cell-based-dge-using-cell-type-groups","text":"To perform cell-based DGE using cell type groups, users must fill in the step8_contrast_cell_based_celltype_groups.txt file located in ~/working_directory/job_info/parameters . The contrast matrix contains the following columns: contast_name: An informative name for the contrast. This will appear as the name of the output spreadsheet. meta_data_celltype: The metadata slot containing cell type annotations cell_type: The cell type used to compute DGE meta_data_variable: The metadata slot containing the Sample IDs defined in group1 and group2 group1: A list of sample IDs to be contrasted against the sample IDs listed in group2 group2: A list of sample IDs to be contrasted against the sample IDs listed in group1 Multiple contrasts can be defined in the same file. In addition, multiple samples can be listed under group1 and group 2. For example: contrast_name meta_data_celltype cell_type meta_data_variable group1 group2 Design1 Annotation1 Neuron orig.ident Control1,Control2,Control3, Case1,Case2,Case3, Design2 Annotation2 Microglia DiseaseStatus HealthyControl Disease","title":"Cell-based DGE using cell type groups"},{"location":"Step8/#sample-based-dge-using-all-cells","text":"To perform sample-based DGE using all cells, users must fill in the step8_contrast_sample_based_all_cells.txt file located in ~/working_directory/job_info/parameters . The contrast matrix contains the following columns: ContrastName: An informative name for the contrast. This will appear as the name of the output spreadsheet. MainContrast: The metadata slot containing the two groups used for the main contrast (e.g. case and control) Sample_ID: The metadata slot containing the Sample IDs of the individual subjects (e.g. sample 1, sample 2, etc.) ContrastName MainContrast SampleID Design DiseaseStatus orig.ident In addition, users may add additional columns if they want to further group their samples. For example, users may wich to group samples by experimental batch: ContrastName MainContrast SampleID Batch Design DiseaseStatus orig.ident Batch_Id In this case, Batch is arbitrary, but Batch_ID must be a metadata slot.","title":"Sample-based DGE using all cells"},{"location":"Step8/#sample-based-dge-using-cell-type-groups","text":"To perform sample-based DGE using all cells, users must fill in the step8_contrast_sample_based_celltype_groups.txt file located in ~/working_directory/job_info/parameters . The contrast matrix contains the following columns: ContrastName: An informative name for the contrast. This will appear as the name of the output spreadsheet. CellType: The metadata slot containing cell type annotations MainContrast: The metadata slot containing the two groups used for the main contrast (e.g. case and control) Sample_ID: The metadata slot containing the Sample IDs of the individual subjects (e.g. sample 1, sample 2, etc.) ContrastName CellType MainContrast SampleID Design Annotation1 DiseaseStatus orig.ident In addition, users may add additional columns if they want to further group their samples. For example, users may wich to group samples by experimental batch: ContrastName CellType MainContrast SampleID Batch Design Annotation1 DiseaseStatus orig.ident Batch_ID In this case, Batch is arbitrary, but Batch_ID must be a metadata slot.","title":"Sample-based DGE using cell type groups"},{"location":"Step8/#compute-dge","text":"To compute DGE, use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ --steps 8 \\ --rundge T The resulting output files are deposited into ~/working_directory/step8 . For a description of the outputs see here .","title":"Compute DGE"},{"location":"config/","text":"Job configurations for the scRNAbox pipeline Introduction General configurations Step configurations Introduction Upon running Step 0, the scrnabox_config.ini file is automatically deposited into ~/working_directory/job_info/configs : ACCOUNT=account-name MODULEUSE=/path/to/environmental/module (e.g. /cvmfs/soft.mugqic/CentOS6/modulefiles) CELLRANGER=/path/to/cellranger/from/module/directory (e.g. mugqic/cellranger) CELLRANGER_VERSION=5.0.1 R_VERSION=4.2.1 R_LIB_PATH=/path/to/R/library SCRNA_METHOD=SCRNA ############# ############# [step2] # THREADS_ARRAY[\"step_2\"]=10 # MEM_ARRAY[\"step_2\"]=16g # WALLTIME_ARRAY[\"step_2\"]=00-05:00 ############# [step3] # THREADS_ARRAY[\"step_3\"]=10 # MEM_ARRAY[\"step_3\"]=16g # WALLTIME_ARRAY[\"step_3\"]=00-05:00 ############# [step4] # THREADS_ARRAY[\"step_4\"]=10 # MEM_ARRAY[\"step_4\"]=45g # WALLTIME_ARRAY[\"step_4\"]=00-05:00 ############# [step5] # THREADS_ARRAY[\"step_5\"]=10 # MEM_ARRAY[\"step_5\"]=16g # WALLTIME_ARRAY[\"step_5\"]=00-05:00 #############[step6] # THREADS_ARRAY[\"step_6\"]=10 # MEM_ARRAY[\"step_6\"]=16g # WALLTIME_ARRAY[\"step_6\"]=00-05:00 ############# [step7] # THREADS_ARRAY[\"step_7_markergsea\"]=4 # MEM_ARRAY[\"step_7_markergsea\"]=16g # WALLTIME_ARRAY[\"step_7_markergsea\"]=00-05:00 # THREADS_ARRAY[\"step_7_knownmarkers\"]=4 # MEM_ARRAY[\"step_7_knownmarkers\"]=16g # WALLTIME_ARRAY[\"step_7_knownmarkers\"]=00-05:00 # THREADS_ARRAY[\"step_7_referenceannotation\"]=10 # MEM_ARRAY[\"step_7_referenceannotation\"]=150g # WALLTIME_ARRAY[\"step_7_referenceannotation\"]=00-12:00 # THREADS_ARRAY[\"step_7_annotate\"]=4 # MEM_ARRAY[\"step_7_annotate\"]=16g # WALLTIME_ARRAY[\"step_7_annotate\"]=00-05:00 ############# [step8] # THREADS_ARRAY[\"step_8_addmeta\"]=4 # MEM_ARRAY[\"step_8_addmeta\"]=16g # WALLTIME_ARRAY[\"step_8_addmeta\"]=00-12:00 # THREADS_ARRAY[\"step_8_rundge\"]=4 # MEM_ARRAY[\"step_8_rundge\"]=40g # WALLTIME_ARRAY[\"step_8_rundge\"]=00-12:00 ############# [integrate] # THREADS_ARRAY[\"integrate\"]=10 # MEM_ARRAY[\"integrate\"]=40g # WALLTIME_ARRAY[\"integrate\"]=00-04:00 The scrnabox_config.ini defines the parameters for each Job submission to the Slurm Workload Manager . Prior to performing their analysis with the scRNAbox pipeline, users should modify this file to adjust the General configurations and Analytical Step configurations . General configurations The following parameters must be adjusted by the user: 1) ACCOUNT : the name of the account holder for the HPC system; 2) MODULEUSE : the path to the environmental module; 3) CELLRANGER : the path to CellRanger from the environmental module directory; 4) CELLRANGER_VERSION : the version of CellRanger; 5) R_VERSION : the version of R installed on the HPC system (must be v4.2 or greater); 6) R_LIB_PATH : the path to the R library containing the required R packages for running scRNAbox; 7) SCRNA_METHOD : The analysis track to use (SCRNA or HTO). This will be automatically defined upon running Step 0. Step configurations Each step of the scRNAbox pipeline has three configuartion parameters: 1) THREADS_ARRAY : number of CPUs for the job; 2) MEM_ARRAY : amount of memory (RAM) for the job; 3) WALLTIME_ARRAY : amount of time for the job. In the original scrnabox_config.ini file, the configuration parameters for each step will be commented out and the default configurations will be used. If users need to change the configurations for any step, they can uncomment the line of code and define the parameter: # orginal scrnabox_config.ini #THREADS_ARRAY[\"step_2\"]=4 #MEM_ARRAY[\"step_2\"]=16g #WALLTIME_ARRAY[\"step_2\"]=00-05:00 # modified scrnabox_config.ini THREADS_ARRAY[\"step_2\"]=8 MEM_ARRAY[\"step_2\"]=24g WALLTIME_ARRAY[\"step_2\"]=00-10:00","title":"Job configurations"},{"location":"config/#job-configurations-for-the-scrnabox-pipeline","text":"Introduction General configurations Step configurations","title":"Job configurations for the scRNAbox pipeline"},{"location":"config/#introduction","text":"Upon running Step 0, the scrnabox_config.ini file is automatically deposited into ~/working_directory/job_info/configs : ACCOUNT=account-name MODULEUSE=/path/to/environmental/module (e.g. /cvmfs/soft.mugqic/CentOS6/modulefiles) CELLRANGER=/path/to/cellranger/from/module/directory (e.g. mugqic/cellranger) CELLRANGER_VERSION=5.0.1 R_VERSION=4.2.1 R_LIB_PATH=/path/to/R/library SCRNA_METHOD=SCRNA ############# ############# [step2] # THREADS_ARRAY[\"step_2\"]=10 # MEM_ARRAY[\"step_2\"]=16g # WALLTIME_ARRAY[\"step_2\"]=00-05:00 ############# [step3] # THREADS_ARRAY[\"step_3\"]=10 # MEM_ARRAY[\"step_3\"]=16g # WALLTIME_ARRAY[\"step_3\"]=00-05:00 ############# [step4] # THREADS_ARRAY[\"step_4\"]=10 # MEM_ARRAY[\"step_4\"]=45g # WALLTIME_ARRAY[\"step_4\"]=00-05:00 ############# [step5] # THREADS_ARRAY[\"step_5\"]=10 # MEM_ARRAY[\"step_5\"]=16g # WALLTIME_ARRAY[\"step_5\"]=00-05:00 #############[step6] # THREADS_ARRAY[\"step_6\"]=10 # MEM_ARRAY[\"step_6\"]=16g # WALLTIME_ARRAY[\"step_6\"]=00-05:00 ############# [step7] # THREADS_ARRAY[\"step_7_markergsea\"]=4 # MEM_ARRAY[\"step_7_markergsea\"]=16g # WALLTIME_ARRAY[\"step_7_markergsea\"]=00-05:00 # THREADS_ARRAY[\"step_7_knownmarkers\"]=4 # MEM_ARRAY[\"step_7_knownmarkers\"]=16g # WALLTIME_ARRAY[\"step_7_knownmarkers\"]=00-05:00 # THREADS_ARRAY[\"step_7_referenceannotation\"]=10 # MEM_ARRAY[\"step_7_referenceannotation\"]=150g # WALLTIME_ARRAY[\"step_7_referenceannotation\"]=00-12:00 # THREADS_ARRAY[\"step_7_annotate\"]=4 # MEM_ARRAY[\"step_7_annotate\"]=16g # WALLTIME_ARRAY[\"step_7_annotate\"]=00-05:00 ############# [step8] # THREADS_ARRAY[\"step_8_addmeta\"]=4 # MEM_ARRAY[\"step_8_addmeta\"]=16g # WALLTIME_ARRAY[\"step_8_addmeta\"]=00-12:00 # THREADS_ARRAY[\"step_8_rundge\"]=4 # MEM_ARRAY[\"step_8_rundge\"]=40g # WALLTIME_ARRAY[\"step_8_rundge\"]=00-12:00 ############# [integrate] # THREADS_ARRAY[\"integrate\"]=10 # MEM_ARRAY[\"integrate\"]=40g # WALLTIME_ARRAY[\"integrate\"]=00-04:00 The scrnabox_config.ini defines the parameters for each Job submission to the Slurm Workload Manager . Prior to performing their analysis with the scRNAbox pipeline, users should modify this file to adjust the General configurations and Analytical Step configurations .","title":"Introduction"},{"location":"config/#general-configurations","text":"The following parameters must be adjusted by the user: 1) ACCOUNT : the name of the account holder for the HPC system; 2) MODULEUSE : the path to the environmental module; 3) CELLRANGER : the path to CellRanger from the environmental module directory; 4) CELLRANGER_VERSION : the version of CellRanger; 5) R_VERSION : the version of R installed on the HPC system (must be v4.2 or greater); 6) R_LIB_PATH : the path to the R library containing the required R packages for running scRNAbox; 7) SCRNA_METHOD : The analysis track to use (SCRNA or HTO). This will be automatically defined upon running Step 0.","title":"General configurations"},{"location":"config/#step-configurations","text":"Each step of the scRNAbox pipeline has three configuartion parameters: 1) THREADS_ARRAY : number of CPUs for the job; 2) MEM_ARRAY : amount of memory (RAM) for the job; 3) WALLTIME_ARRAY : amount of time for the job. In the original scrnabox_config.ini file, the configuration parameters for each step will be commented out and the default configurations will be used. If users need to change the configurations for any step, they can uncomment the line of code and define the parameter: # orginal scrnabox_config.ini #THREADS_ARRAY[\"step_2\"]=4 #MEM_ARRAY[\"step_2\"]=16g #WALLTIME_ARRAY[\"step_2\"]=00-05:00 # modified scrnabox_config.ini THREADS_ARRAY[\"step_2\"]=8 MEM_ARRAY[\"step_2\"]=24g WALLTIME_ARRAY[\"step_2\"]=00-10:00","title":"Step configurations"},{"location":"contributing/","text":"Contributing Any contributions or suggestions for improving the scRNAbox pipeline are welcomed and appreciated. You may directly contact Saeid Amiri , Michael Fiorini or Rhalena Thomas . If you encounter any issues, please open an issue in the GitHub repository . Alternatively, you are welcomed to email the developers directly. For questions related to your HPC, please contact Saeid Amiri: saeid.amiri@mcgill.ca For questions related to running the scRNAbox pipeline, please contact Michael Fiorini: michael.fiorini@mail.mcgill.ca For questions related to scRNAseq analytical concepts and experimental design, please contact Rhalena Thomas: rhalena.thomas@mcgill.ca","title":"Help and Feedback"},{"location":"contributing/#contributing","text":"Any contributions or suggestions for improving the scRNAbox pipeline are welcomed and appreciated. You may directly contact Saeid Amiri , Michael Fiorini or Rhalena Thomas . If you encounter any issues, please open an issue in the GitHub repository . Alternatively, you are welcomed to email the developers directly. For questions related to your HPC, please contact Saeid Amiri: saeid.amiri@mcgill.ca For questions related to running the scRNAbox pipeline, please contact Michael Fiorini: michael.fiorini@mail.mcgill.ca For questions related to scRNAseq analytical concepts and experimental design, please contact Rhalena Thomas: rhalena.thomas@mcgill.ca","title":"Contributing"},{"location":"installation/","text":"Installation To use the scRNAbox pipeline, the folowing must be installed on your High-Performance Computing (HPC) system: scrnabox.slurm CellRanger R and R packages scrnabox.slurm installation scrnabox.slurm is written in bash and can be used with any Slurm system. To download the latest version of scrnabox.slurm (v0.1.52) run the following command: wget https://github.com/neurobioinfo/scrnabox/releases/download/v0.1.52/scrnabox.slurm.zip unzip scrnabox.slurm.zip For a description of the options for running scrnabox.slurm run the following command: bash /pathway/to/scrnabox.slurm/launch_scrnabox.sh -h If the scrnabox.slurm has been installed properly, the above command should return the folllowing: scrnabox pipeline version 0.1.52 ------------------- mandatory arguments: -d (--dir) = Working directory (where all the outputs will be printed) (give full path) --steps = Specify what steps, e.g., 2 to run just step 2, 2-4, run steps 2 through 4) optional arguments: -h (--help) = See helps regarding the pipeline arguments. --method = Select your preferred method: HTO and SCRNA for hashtag, and Standard scRNA, respectively. --msd = You can get the hashtag labels by running the following code (HTO Step 4). --markergsea = Identify marker genes for each cluster and run marker gene set enrichment analysis (GSEA) using EnrichR libraries (Step 7). --knownmarkers = Profile the individual or aggregated expression of known marker genes. --referenceannotation = Generate annotation predictions based on the annotations of a reference Seurat object (Step 7). --annotate = Add clustering annotations to Seurat object metadata (Step 7). --addmeta = Add metadata columns to the Seurat object (Step 8). --rundge = Perform differential gene expression contrasts (Step 8). --seulist = You can directly call the list of Seurat objects to the pipeline. --rcheck = You can identify which libraries are not installed. ------------------- For a comprehensive help, visit https://neurobioinfo.github.io/scrnabox/site/ for documentation. CellRanger installation For information regarding the installation of CellRanger , please visit the 10X Genomics documentation . If CellRanger is already installed on your HPC system, you may skip the CellRanger installation procedures. R library preparation and R package installation R must be installed on the HPC system. If R is not already installed, the user should contact their system administrator. If R is installed on the HPC system, users must load R (v4.2 or later) into their working environment: # load R module load r/4.2.1 Then, users must run the following installation code, which will create a directory where the R packages will be loaded and will install the required R packages: # Folder for R packages R_PATH=~/path/to/R/library mkdir -p $R_PATH # Install package Rscript ./scrnabox.slurm/soft/R/install_packages_scrnabox.R $R_PATH Alternatively, users can install the packages manually. The R packages required for scRNAbox are shown here . Upon completing the installation procedures, users can proceed with the scRNAbox pipeline.","title":"Installation"},{"location":"installation/#installation","text":"To use the scRNAbox pipeline, the folowing must be installed on your High-Performance Computing (HPC) system: scrnabox.slurm CellRanger R and R packages","title":"Installation"},{"location":"installation/#scrnaboxslurm-installation","text":"scrnabox.slurm is written in bash and can be used with any Slurm system. To download the latest version of scrnabox.slurm (v0.1.52) run the following command: wget https://github.com/neurobioinfo/scrnabox/releases/download/v0.1.52/scrnabox.slurm.zip unzip scrnabox.slurm.zip For a description of the options for running scrnabox.slurm run the following command: bash /pathway/to/scrnabox.slurm/launch_scrnabox.sh -h If the scrnabox.slurm has been installed properly, the above command should return the folllowing: scrnabox pipeline version 0.1.52 ------------------- mandatory arguments: -d (--dir) = Working directory (where all the outputs will be printed) (give full path) --steps = Specify what steps, e.g., 2 to run just step 2, 2-4, run steps 2 through 4) optional arguments: -h (--help) = See helps regarding the pipeline arguments. --method = Select your preferred method: HTO and SCRNA for hashtag, and Standard scRNA, respectively. --msd = You can get the hashtag labels by running the following code (HTO Step 4). --markergsea = Identify marker genes for each cluster and run marker gene set enrichment analysis (GSEA) using EnrichR libraries (Step 7). --knownmarkers = Profile the individual or aggregated expression of known marker genes. --referenceannotation = Generate annotation predictions based on the annotations of a reference Seurat object (Step 7). --annotate = Add clustering annotations to Seurat object metadata (Step 7). --addmeta = Add metadata columns to the Seurat object (Step 8). --rundge = Perform differential gene expression contrasts (Step 8). --seulist = You can directly call the list of Seurat objects to the pipeline. --rcheck = You can identify which libraries are not installed. ------------------- For a comprehensive help, visit https://neurobioinfo.github.io/scrnabox/site/ for documentation.","title":"scrnabox.slurm installation"},{"location":"installation/#cellranger-installation","text":"For information regarding the installation of CellRanger , please visit the 10X Genomics documentation . If CellRanger is already installed on your HPC system, you may skip the CellRanger installation procedures.","title":"CellRanger installation"},{"location":"installation/#r-library-preparation-and-r-package-installation","text":"R must be installed on the HPC system. If R is not already installed, the user should contact their system administrator. If R is installed on the HPC system, users must load R (v4.2 or later) into their working environment: # load R module load r/4.2.1 Then, users must run the following installation code, which will create a directory where the R packages will be loaded and will install the required R packages: # Folder for R packages R_PATH=~/path/to/R/library mkdir -p $R_PATH # Install package Rscript ./scrnabox.slurm/soft/R/install_packages_scrnabox.R $R_PATH Alternatively, users can install the packages manually. The R packages required for scRNAbox are shown here . Upon completing the installation procedures, users can proceed with the scRNAbox pipeline.","title":"R library preparation and R package installation"},{"location":"library_prep/","text":"Manual CellRanger Library Preparation Introduction Standard analysis track library.csv HTO analysis track library.csv feature_ref.csv Introduction Step 1 (FASTQ to gene expression matrix) of the scRNAbox pipeline leverages the CellRanger counts pipeline to generate gene expression matrices from FASTQ files. In order to run the CellRanger counts pipeline, libraries must be generated to define the information of the FASTQ files. For the Standard analysis track , a library.csv file must be generated for each sample. For the HTO analysis track , a library.csv and feature_ref.csv file must be generated for each sequencing run. Athough scRNAbox provides an option to automate the library preparation process, it is important that users understand the information that is required for these files. In this tutorial we demonstrate how users can manually prepare the library.csv and feature_ref.csv files. The information presented in this tutorial can also be used to inform the parameters that must be defined by the user for automated library preparation. Standard analysis track library.csv The library.csv file defines the necessary information of the FASTQ files for the experiment, including the gene expression and antibody assays. The structure of the library.csv file should be: fastqs,sample,library_type path/to/fastqs/directory/,SampleName,Gene Expression The fastqs column defines the path to the directory that contains the FASTQ files for the experiment. The sample column defines the sample name of the corresponding FASTQ file. Please note that FASTQ files must be named according to standard CellRanger nomenclature (e.g. CTRL1_S1_L001_R1_001.fastq). For more information, please visit CellRanger's documentation . The library_type column defines the assay type. For the Standard Analysis Track, the library_type will be \"Gene Expression\". Example: manual library preparation For the Standard Analysis Track, if the experiment comprises four samples (two case and two controls), the following steps should be taken for manual library preparation: 1) Navigate to the working directory and create a samples_info folder: cd ~/working_directory mkdir samples_info 2) Navigate to the samples_info folder and create a folder for each sample run: cd samples_info mkdir case1 mkdir case2 mkdir control1 mkdir control2 3) Navigate to the folder for each sample and create the library.csv file. After performing steps 1-3 above, the structure of the samples_info folder ( ~working_directory/samples_info ) for an experiment with four samples should be: working_directory \u2514\u2500\u2500 samples_info \u251c\u2500\u2500 case1 \u2502 \u2514\u2500\u2500library.csv \u251c\u2500\u2500 case2 \u2502 \u2514\u2500\u2500 library.csv \u251c\u2500\u2500 control1 \u2502 \u2514\u2500\u2500 library.csv \u2514\u2500\u2500 control2 \u2514\u2500\u2500 library.csv HTO analysis track library.csv The library.csv file defines the necessary information of the FASTQ files for the experiment, including the gene expression and antibody assays. The structure of the library.csv file should be: fastqs,sample,library_type path/to/fastqs/directory/,SampleNameGEX,Gene Expression path/to/fastqs/directory/,SampleNameHTO,Antibody Capture The fastqs column defines the path to the directory that contains the FASTQ files for the experiment. The sample column defines the sample name of the corresponding FASTQ file. Please note that FASTQ files must be named according to standard CellRanger nomenclature (e.g. CTRL1_S1_L001_R1_001.fastq). For more information please visit CellRanger's documentation . The library_type column defines the assay type. For the Cell Hashtag Analysis track, each sequencing run should have a \"Gene Expression\" and \"Antibody Capture\" assay. For more information, please visit CellRanger's documentation feature_ref.csv The feature_ref.csv file defines the necessary information for processing the sample-specific barcodes that will eventually be used to demultiplex the pooled samples. For example, if there are four samples pooled together with four unique barcode identifiers, the structure of the feature_ref.csv file should be: id,name,read,pattern,sequence,feature_type Hash1,B0251_TotalSeqB,R2,5PNNNNNNNNNN(BC),GTCAACTCTTTAGCG,Antibody Capture Hash2,B0252_TotalSeqB,R2,5PNNNNNNNNNN(BC),TGATGGCCTATTGGG,Antibody Capture Hash3,B0253_TotalSeqB,R2,5PNNNNNNNNNN(BC),TTCCGCCTCTCTTTG,Antibody Capture Hash4,B0254_TotalSeqB,R2,5PNNNNNNNNNN(BC),AGTAAGTTCAGCGTA,Antibody Capture The id column defines the barcode ID which will be used to track the feature counts. The name column defines the arbitrary name for the barcode identifier. The read column defines which RNA sequencing read contains the barcode sequence. This value Will be either R1 or R2. The pattern column defines the pattern of the barcode identifiers. For more information please visit the 10X Genomics documentation The sequence column defines nucleotide sequence associated with the barcode identifier. The feature_type column defines the type of feature used for sample identification. Please ensure that the feature_type in the feature_ref.csv file matches a library_type in the library.csv file. For more information regarding the preparation of the feature_ref.csv , please see CellRanger's documentation . Example: manual library preparation For the Cell Hashtag Analysis Track, if the experiment comprises four sequencing, the following steps should be taken for manual library preparation: 1) Navigate to the working directory and create a samples_info folder: cd ~/working_directory mkdir samples_info 2) Navigate to the samples_info folder and create a folder for each sequencing run: cd samples_info mkdir run1 mkdir run2 mkdir run3 mkdir run4 3) Navigate to the folder for each sequencing and create the library.csv file. 4) Navigate to the folder for each sequencing and create the feature_ref.csv file. After performing steps 1-4 above, the structure of the samples_info folder ( ~working_directory/samples_info ) for an experiment with four sequencing runs should be: working_directory \u251c\u2500\u2500 samples_info \u251c\u2500\u2500 run1 \u2502 \u251c\u2500\u2500 library.csv \u2502 \u2514\u2500\u2500 feature_ref.csv \u251c\u2500\u2500 run2 \u2502 \u251c\u2500\u2500 library.csv \u2502 \u2514\u2500\u2500 feature_ref.csv \u251c\u2500\u2500 run3 \u2502 \u251c\u2500\u2500 library.csv \u2502 \u2514\u2500\u2500 feature_ref.csv \u2514\u2500\u2500 run4 \u251c\u2500\u2500 library.csv \u2514\u2500\u2500 feature_ref.csv","title":"Manual CellRanger library preparation"},{"location":"library_prep/#manual-cellranger-library-preparation","text":"Introduction Standard analysis track library.csv HTO analysis track library.csv feature_ref.csv","title":"Manual CellRanger Library Preparation"},{"location":"library_prep/#introduction","text":"Step 1 (FASTQ to gene expression matrix) of the scRNAbox pipeline leverages the CellRanger counts pipeline to generate gene expression matrices from FASTQ files. In order to run the CellRanger counts pipeline, libraries must be generated to define the information of the FASTQ files. For the Standard analysis track , a library.csv file must be generated for each sample. For the HTO analysis track , a library.csv and feature_ref.csv file must be generated for each sequencing run. Athough scRNAbox provides an option to automate the library preparation process, it is important that users understand the information that is required for these files. In this tutorial we demonstrate how users can manually prepare the library.csv and feature_ref.csv files. The information presented in this tutorial can also be used to inform the parameters that must be defined by the user for automated library preparation.","title":"Introduction"},{"location":"library_prep/#standard-analysis-track","text":"","title":"Standard analysis track"},{"location":"library_prep/#librarycsv","text":"The library.csv file defines the necessary information of the FASTQ files for the experiment, including the gene expression and antibody assays. The structure of the library.csv file should be: fastqs,sample,library_type path/to/fastqs/directory/,SampleName,Gene Expression The fastqs column defines the path to the directory that contains the FASTQ files for the experiment. The sample column defines the sample name of the corresponding FASTQ file. Please note that FASTQ files must be named according to standard CellRanger nomenclature (e.g. CTRL1_S1_L001_R1_001.fastq). For more information, please visit CellRanger's documentation . The library_type column defines the assay type. For the Standard Analysis Track, the library_type will be \"Gene Expression\".","title":"library.csv"},{"location":"library_prep/#example-manual-library-preparation","text":"For the Standard Analysis Track, if the experiment comprises four samples (two case and two controls), the following steps should be taken for manual library preparation: 1) Navigate to the working directory and create a samples_info folder: cd ~/working_directory mkdir samples_info 2) Navigate to the samples_info folder and create a folder for each sample run: cd samples_info mkdir case1 mkdir case2 mkdir control1 mkdir control2 3) Navigate to the folder for each sample and create the library.csv file. After performing steps 1-3 above, the structure of the samples_info folder ( ~working_directory/samples_info ) for an experiment with four samples should be: working_directory \u2514\u2500\u2500 samples_info \u251c\u2500\u2500 case1 \u2502 \u2514\u2500\u2500library.csv \u251c\u2500\u2500 case2 \u2502 \u2514\u2500\u2500 library.csv \u251c\u2500\u2500 control1 \u2502 \u2514\u2500\u2500 library.csv \u2514\u2500\u2500 control2 \u2514\u2500\u2500 library.csv","title":"Example: manual library preparation"},{"location":"library_prep/#hto-analysis-track","text":"","title":"HTO analysis track"},{"location":"library_prep/#librarycsv_1","text":"The library.csv file defines the necessary information of the FASTQ files for the experiment, including the gene expression and antibody assays. The structure of the library.csv file should be: fastqs,sample,library_type path/to/fastqs/directory/,SampleNameGEX,Gene Expression path/to/fastqs/directory/,SampleNameHTO,Antibody Capture The fastqs column defines the path to the directory that contains the FASTQ files for the experiment. The sample column defines the sample name of the corresponding FASTQ file. Please note that FASTQ files must be named according to standard CellRanger nomenclature (e.g. CTRL1_S1_L001_R1_001.fastq). For more information please visit CellRanger's documentation . The library_type column defines the assay type. For the Cell Hashtag Analysis track, each sequencing run should have a \"Gene Expression\" and \"Antibody Capture\" assay. For more information, please visit CellRanger's documentation","title":"library.csv"},{"location":"library_prep/#feature_refcsv","text":"The feature_ref.csv file defines the necessary information for processing the sample-specific barcodes that will eventually be used to demultiplex the pooled samples. For example, if there are four samples pooled together with four unique barcode identifiers, the structure of the feature_ref.csv file should be: id,name,read,pattern,sequence,feature_type Hash1,B0251_TotalSeqB,R2,5PNNNNNNNNNN(BC),GTCAACTCTTTAGCG,Antibody Capture Hash2,B0252_TotalSeqB,R2,5PNNNNNNNNNN(BC),TGATGGCCTATTGGG,Antibody Capture Hash3,B0253_TotalSeqB,R2,5PNNNNNNNNNN(BC),TTCCGCCTCTCTTTG,Antibody Capture Hash4,B0254_TotalSeqB,R2,5PNNNNNNNNNN(BC),AGTAAGTTCAGCGTA,Antibody Capture The id column defines the barcode ID which will be used to track the feature counts. The name column defines the arbitrary name for the barcode identifier. The read column defines which RNA sequencing read contains the barcode sequence. This value Will be either R1 or R2. The pattern column defines the pattern of the barcode identifiers. For more information please visit the 10X Genomics documentation The sequence column defines nucleotide sequence associated with the barcode identifier. The feature_type column defines the type of feature used for sample identification. Please ensure that the feature_type in the feature_ref.csv file matches a library_type in the library.csv file. For more information regarding the preparation of the feature_ref.csv , please see CellRanger's documentation .","title":"feature_ref.csv"},{"location":"library_prep/#example-manual-library-preparation_1","text":"For the Cell Hashtag Analysis Track, if the experiment comprises four sequencing, the following steps should be taken for manual library preparation: 1) Navigate to the working directory and create a samples_info folder: cd ~/working_directory mkdir samples_info 2) Navigate to the samples_info folder and create a folder for each sequencing run: cd samples_info mkdir run1 mkdir run2 mkdir run3 mkdir run4 3) Navigate to the folder for each sequencing and create the library.csv file. 4) Navigate to the folder for each sequencing and create the feature_ref.csv file. After performing steps 1-4 above, the structure of the samples_info folder ( ~working_directory/samples_info ) for an experiment with four sequencing runs should be: working_directory \u251c\u2500\u2500 samples_info \u251c\u2500\u2500 run1 \u2502 \u251c\u2500\u2500 library.csv \u2502 \u2514\u2500\u2500 feature_ref.csv \u251c\u2500\u2500 run2 \u2502 \u251c\u2500\u2500 library.csv \u2502 \u2514\u2500\u2500 feature_ref.csv \u251c\u2500\u2500 run3 \u2502 \u251c\u2500\u2500 library.csv \u2502 \u2514\u2500\u2500 feature_ref.csv \u2514\u2500\u2500 run4 \u251c\u2500\u2500 library.csv \u2514\u2500\u2500 feature_ref.csv","title":"Example: manual library preparation"},{"location":"midbrain_download/","text":"Downloading the midbrain dataset The single-nucleus RNA sequencing (snRNAseq) data produced by Smajic et al. is publicly available in the Gene Expression Omnibus with accession code GSE157783 . To download the data, we must first install SRAtoolkit (if this is not already installed on your High-Performance Computing (HPC) system). We will create a directory for our raw data and download SRAtoolkit with the following code: mkdir data_download cd data_download wget --output-document sratoolkit.tar.gz https://ftp-trace.ncbi.nlm.nih.gov/sra/sdk/current/sratoolkit.current-ubuntu64.tar.gz tar -vxzf sratoolkit.tar.gz export PATH=$PATH:$PWD/sratoolkit.3.0.5-ubuntu64/bin For more information regarding the SRAtoolkit, please visit the documentation . The Sequence Read Archive (SRA) run identifiers for each of the 11 samples in the midbrain dataset are: Sample SRR PD1 SRR12621862 PD2 SRR12621863 PD3 SRR12621864 PD4 SRR12621865 PD5 SRR12621866 CTRL1 SRR12621867 CTRL2 SRR12621868 CTRL3 SRR12621869 CTRL4 SRR12621870 CTRL5 SRR12621871 CTRL6 SRR12621872 Note : If you simply want to test scRNAbox, it may be best to only incorportate a subset of samples in a test run, as using all 11 samples will take substantially longer. In this case, we suggest including at least three PD samples and three controls to facilitate differential gene expression (DGE) contrasts in Step 8. To download the FASTQ files for all 11 samples, run the following code. Please note that this may take a very long time. export PATH=$PATH:$PWD/sratoolkit.3.0.5-ubuntu64/bin module load StdEnv/2020 gcc/9.3.0 module load sra-toolkit/3.0.0 #PD1 prefetch SRR12621862 fasterq-dump SRR12621862 #PD2 prefetch SRR12621863 fasterq-dump SRR12621863 #PD3 prefetch SRR12621864 fasterq-dump SRR12621864 #PD4 prefetch SRR12621865 fasterq-dump SRR12621865 #PD5 prefetch SRR12621866 fasterq-dump SRR12621866 #CTRL1 prefetch SRR12621867 fasterq-dump SRR12621867 #CTRL2 prefetch SRR12621868 fasterq-dump SRR12621868 #CTRL3 prefetch SRR12621869 fasterq-dump SRR12621869 #CTRL4 prefetch SRR12621870 fasterq-dump SRR12621870 #CTRL5 prefetch SRR12621871 fasterq-dump SRR12621871 #CTRL6 prefetch SRR12621872 fasterq-dump SRR12621872 If the FASTQ files for all 11 samples have been downloaded properly, the data_download folder should contain the following: data_download \u251c\u2500\u2500 SRR12621862 \u2502 \u2514\u2500\u2500 SRR12621862.sra \u251c\u2500\u2500 SRR12621862_1.fastq \u251c\u2500\u2500 SRR12621862_2.fastq \u251c\u2500\u2500 SRR12621863 \u2502 \u2514\u2500\u2500 SRR12621863.sra \u251c\u2500\u2500 SRR12621863_1.fastq \u251c\u2500\u2500 SRR12621863_2.fastq \u251c\u2500\u2500 SRR12621864 \u2502 \u2514\u2500\u2500 SRR12621864.sra \u251c\u2500\u2500 SRR12621864_1.fastq \u251c\u2500\u2500 SRR12621864_2.fastq \u251c\u2500\u2500 SRR12621865 \u2502 \u2514\u2500\u2500 SRR12621865.sra \u251c\u2500\u2500 SRR12621865_1.fastq \u251c\u2500\u2500 SRR12621865_2.fastq \u251c\u2500\u2500 SRR12621866 \u2502 \u2514\u2500\u2500 SRR12621866.sra \u251c\u2500\u2500 SRR12621866_1.fastq \u251c\u2500\u2500 SRR12621866_2.fastq \u251c\u2500\u2500 SRR12621867 \u2502 \u2514\u2500\u2500 SRR12621867.sra \u251c\u2500\u2500 SRR12621867_1.fastq \u251c\u2500\u2500 SRR12621867_2.fastq \u251c\u2500\u2500 SRR12621868 \u2502 \u2514\u2500\u2500 SRR12621868.sra \u251c\u2500\u2500 SRR12621868_1.fastq \u251c\u2500\u2500 SRR12621868_2.fastq \u251c\u2500\u2500 SRR12621869 \u2502 \u2514\u2500\u2500 SRR12621869.sra \u251c\u2500\u2500 SRR12621869_1.fastq \u251c\u2500\u2500 SRR12621869_2.fastq \u251c\u2500\u2500 SRR12621870 \u2502 \u2514\u2500\u2500 SRR12621870.sra \u251c\u2500\u2500 SRR12621870_1.fastq \u251c\u2500\u2500 SRR12621870_2.fastq \u251c\u2500\u2500 SRR12621871 \u2502 \u2514\u2500\u2500 SRR12621871.sra \u251c\u2500\u2500 SRR12621871_1.fastq \u251c\u2500\u2500 SRR12621871_2.fastq \u251c\u2500\u2500 SRR12621872 \u2502 \u2514\u2500\u2500 SRR12621872.sra \u251c\u2500\u2500 SRR12621872_1.fastq \u2514\u2500\u2500 SRR12621872_2.fastq Next, we will rename the FASTQ files according to the CellRanger nomenclature and transfer the FASTQ files to a folder named fastqs . For more information regarding the nomeclature required by the CellRanger counts pipeline, please visit CellRanger's documentation . Note : The fastqs folder should only contain FASTQ files for the experiment. mkdir fastqs #PD1 cp ~/data_download/SRR12621862_1.fastq ~/fastqs/PD1_S1_L001_R1_001.fastq cp ~/data_download/SRR12621862_2.fastq ~/fastqs/PD1_S1_L001_R2_001.fastq #PD2 cp ~/data_download/SRR12621863_1.fastq ~/fastqs/PD2_S1_L001_R1_001.fastq cp ~/data_download/SRR12621863_2.fastq ~/fastqs/PD2_S1_L001_R2_001.fastq #PD3 cp ~/data_download/SRR12621864_1.fastq ~/fastqs/PD3_S1_L001_R1_001.fastq cp ~/data_download/SRR12621864_2.fastq ~/fastqs/PD3_S1_L001_R2_001.fastq #PD4 cp ~/data_download/SRR12621865_1.fastq ~/fastqs/PD4_S1_L001_R1_001.fastq cp ~/data_download/SRR12621865_2.fastq ~/fastqs/PD4_S1_L001_R2_001.fastq #PD5 cp ~/data_download/SRR12621866_1.fastq ~/fastqs/PD5_S1_L001_R1_001.fastq cp ~/data_download/SRR12621866_2.fastq ~/fastqs/PD5_S1_L001_R2_001.fastq #Ctrl1 cp ~/data_download/SRR12621867_1.fastq ~/fastqs/CTRL1_S1_L001_R1_001.fastq cp ~/data_download/SRR12621867_2.fastq ~/fastqs/CTRL1_S1_L001_R2_001.fastq #Ctrl2 cp ~/data_download/SRR12621868_1.fastq ~/fastqs/CTRL2_S1_L001_R1_001.fastq cp ~/data_download/SRR12621868_2.fastq ~/fastqs/CTRL2_S1_L001_R2_001.fastq #Ctrl3 cp ~/data_download/SRR12621869_1.fastq ~/fastqs/CTRL3_S1_L001_R1_001.fastq cp ~/data_download/SRR12621869_2.fastq ~/fastqs/CTRL3_S1_L001_R2_001.fastq #Ctrl4 cp ~/data_download/SRR12621870_1.fastq ~/fastqs/CTRL4_S1_L001_R1_001.fastq cp ~/data_download/SRR12621870_2.fastq ~/fastqs/CTRL4_S1_L001_R2_001.fastq #Ctrl5 cp ~/data_download/SRR12621871_1.fastq ~/fastqs/CTRL5_S1_L001_R1_001.fastq cp ~/data_download/SRR12621871_2.fastq ~/fastqs/CTRL5_S1_L001_R2_001.fastq #Ctrl6 cp ~/data_download/SRR12621872_1.fastq ~/fastqs/CTRL6_S1_L001_R1_001.fastq cp ~/data_download/SRR12621872_2.fastq ~/fastqs/CTRL6_S1_L001_R2_001.fastq If the above steps were conducted properly, the fastqs folder should contain the following files: \u251c\u2500\u2500 CTRL1_S1_L001_R1_001.fastq \u251c\u2500\u2500 CTRL1_S1_L001_R2_001.fastq \u251c\u2500\u2500 CTRL2_S1_L001_R1_001.fastq \u251c\u2500\u2500 CTRL2_S1_L001_R2_001.fastq \u251c\u2500\u2500 CTRL3_S1_L001_R1_001.fastq \u251c\u2500\u2500 CTRL3_S1_L001_R2_001.fastq \u251c\u2500\u2500 CTRL4_S1_L001_R1_001.fastq \u251c\u2500\u2500 CTRL4_S1_L001_R2_001.fastq \u251c\u2500\u2500 CTRL5_S1_L001_R1_001.fastq \u251c\u2500\u2500 CTRL5_S1_L001_R2_001.fastq \u251c\u2500\u2500 CTRL6_S1_L001_R1_001.fastq \u251c\u2500\u2500 CTRL6_S1_L001_R2_001.fastq \u251c\u2500\u2500 PD1_S1_L001_R1_001.fastq \u251c\u2500\u2500 PD1_S1_L001_R2_001.fastq \u251c\u2500\u2500 PD2_S1_L001_R1_001.fastq \u251c\u2500\u2500 PD2_S1_L001_R2_001.fastq \u251c\u2500\u2500 PD3_S1_L001_R1_001.fastq \u251c\u2500\u2500 PD3_S1_L001_R2_001.fastq \u251c\u2500\u2500 PD4_S1_L001_R1_001.fastq \u251c\u2500\u2500 PD4_S1_L001_R2_001.fastq \u251c\u2500\u2500 PD5_S1_L001_R1_001.fastq \u2514\u2500\u2500 PD5_S1_L001_R2_001.fastq","title":"Downloading the Midbrain dataset"},{"location":"midbrain_download/#downloading-the-midbrain-dataset","text":"The single-nucleus RNA sequencing (snRNAseq) data produced by Smajic et al. is publicly available in the Gene Expression Omnibus with accession code GSE157783 . To download the data, we must first install SRAtoolkit (if this is not already installed on your High-Performance Computing (HPC) system). We will create a directory for our raw data and download SRAtoolkit with the following code: mkdir data_download cd data_download wget --output-document sratoolkit.tar.gz https://ftp-trace.ncbi.nlm.nih.gov/sra/sdk/current/sratoolkit.current-ubuntu64.tar.gz tar -vxzf sratoolkit.tar.gz export PATH=$PATH:$PWD/sratoolkit.3.0.5-ubuntu64/bin For more information regarding the SRAtoolkit, please visit the documentation . The Sequence Read Archive (SRA) run identifiers for each of the 11 samples in the midbrain dataset are: Sample SRR PD1 SRR12621862 PD2 SRR12621863 PD3 SRR12621864 PD4 SRR12621865 PD5 SRR12621866 CTRL1 SRR12621867 CTRL2 SRR12621868 CTRL3 SRR12621869 CTRL4 SRR12621870 CTRL5 SRR12621871 CTRL6 SRR12621872 Note : If you simply want to test scRNAbox, it may be best to only incorportate a subset of samples in a test run, as using all 11 samples will take substantially longer. In this case, we suggest including at least three PD samples and three controls to facilitate differential gene expression (DGE) contrasts in Step 8. To download the FASTQ files for all 11 samples, run the following code. Please note that this may take a very long time. export PATH=$PATH:$PWD/sratoolkit.3.0.5-ubuntu64/bin module load StdEnv/2020 gcc/9.3.0 module load sra-toolkit/3.0.0 #PD1 prefetch SRR12621862 fasterq-dump SRR12621862 #PD2 prefetch SRR12621863 fasterq-dump SRR12621863 #PD3 prefetch SRR12621864 fasterq-dump SRR12621864 #PD4 prefetch SRR12621865 fasterq-dump SRR12621865 #PD5 prefetch SRR12621866 fasterq-dump SRR12621866 #CTRL1 prefetch SRR12621867 fasterq-dump SRR12621867 #CTRL2 prefetch SRR12621868 fasterq-dump SRR12621868 #CTRL3 prefetch SRR12621869 fasterq-dump SRR12621869 #CTRL4 prefetch SRR12621870 fasterq-dump SRR12621870 #CTRL5 prefetch SRR12621871 fasterq-dump SRR12621871 #CTRL6 prefetch SRR12621872 fasterq-dump SRR12621872 If the FASTQ files for all 11 samples have been downloaded properly, the data_download folder should contain the following: data_download \u251c\u2500\u2500 SRR12621862 \u2502 \u2514\u2500\u2500 SRR12621862.sra \u251c\u2500\u2500 SRR12621862_1.fastq \u251c\u2500\u2500 SRR12621862_2.fastq \u251c\u2500\u2500 SRR12621863 \u2502 \u2514\u2500\u2500 SRR12621863.sra \u251c\u2500\u2500 SRR12621863_1.fastq \u251c\u2500\u2500 SRR12621863_2.fastq \u251c\u2500\u2500 SRR12621864 \u2502 \u2514\u2500\u2500 SRR12621864.sra \u251c\u2500\u2500 SRR12621864_1.fastq \u251c\u2500\u2500 SRR12621864_2.fastq \u251c\u2500\u2500 SRR12621865 \u2502 \u2514\u2500\u2500 SRR12621865.sra \u251c\u2500\u2500 SRR12621865_1.fastq \u251c\u2500\u2500 SRR12621865_2.fastq \u251c\u2500\u2500 SRR12621866 \u2502 \u2514\u2500\u2500 SRR12621866.sra \u251c\u2500\u2500 SRR12621866_1.fastq \u251c\u2500\u2500 SRR12621866_2.fastq \u251c\u2500\u2500 SRR12621867 \u2502 \u2514\u2500\u2500 SRR12621867.sra \u251c\u2500\u2500 SRR12621867_1.fastq \u251c\u2500\u2500 SRR12621867_2.fastq \u251c\u2500\u2500 SRR12621868 \u2502 \u2514\u2500\u2500 SRR12621868.sra \u251c\u2500\u2500 SRR12621868_1.fastq \u251c\u2500\u2500 SRR12621868_2.fastq \u251c\u2500\u2500 SRR12621869 \u2502 \u2514\u2500\u2500 SRR12621869.sra \u251c\u2500\u2500 SRR12621869_1.fastq \u251c\u2500\u2500 SRR12621869_2.fastq \u251c\u2500\u2500 SRR12621870 \u2502 \u2514\u2500\u2500 SRR12621870.sra \u251c\u2500\u2500 SRR12621870_1.fastq \u251c\u2500\u2500 SRR12621870_2.fastq \u251c\u2500\u2500 SRR12621871 \u2502 \u2514\u2500\u2500 SRR12621871.sra \u251c\u2500\u2500 SRR12621871_1.fastq \u251c\u2500\u2500 SRR12621871_2.fastq \u251c\u2500\u2500 SRR12621872 \u2502 \u2514\u2500\u2500 SRR12621872.sra \u251c\u2500\u2500 SRR12621872_1.fastq \u2514\u2500\u2500 SRR12621872_2.fastq Next, we will rename the FASTQ files according to the CellRanger nomenclature and transfer the FASTQ files to a folder named fastqs . For more information regarding the nomeclature required by the CellRanger counts pipeline, please visit CellRanger's documentation . Note : The fastqs folder should only contain FASTQ files for the experiment. mkdir fastqs #PD1 cp ~/data_download/SRR12621862_1.fastq ~/fastqs/PD1_S1_L001_R1_001.fastq cp ~/data_download/SRR12621862_2.fastq ~/fastqs/PD1_S1_L001_R2_001.fastq #PD2 cp ~/data_download/SRR12621863_1.fastq ~/fastqs/PD2_S1_L001_R1_001.fastq cp ~/data_download/SRR12621863_2.fastq ~/fastqs/PD2_S1_L001_R2_001.fastq #PD3 cp ~/data_download/SRR12621864_1.fastq ~/fastqs/PD3_S1_L001_R1_001.fastq cp ~/data_download/SRR12621864_2.fastq ~/fastqs/PD3_S1_L001_R2_001.fastq #PD4 cp ~/data_download/SRR12621865_1.fastq ~/fastqs/PD4_S1_L001_R1_001.fastq cp ~/data_download/SRR12621865_2.fastq ~/fastqs/PD4_S1_L001_R2_001.fastq #PD5 cp ~/data_download/SRR12621866_1.fastq ~/fastqs/PD5_S1_L001_R1_001.fastq cp ~/data_download/SRR12621866_2.fastq ~/fastqs/PD5_S1_L001_R2_001.fastq #Ctrl1 cp ~/data_download/SRR12621867_1.fastq ~/fastqs/CTRL1_S1_L001_R1_001.fastq cp ~/data_download/SRR12621867_2.fastq ~/fastqs/CTRL1_S1_L001_R2_001.fastq #Ctrl2 cp ~/data_download/SRR12621868_1.fastq ~/fastqs/CTRL2_S1_L001_R1_001.fastq cp ~/data_download/SRR12621868_2.fastq ~/fastqs/CTRL2_S1_L001_R2_001.fastq #Ctrl3 cp ~/data_download/SRR12621869_1.fastq ~/fastqs/CTRL3_S1_L001_R1_001.fastq cp ~/data_download/SRR12621869_2.fastq ~/fastqs/CTRL3_S1_L001_R2_001.fastq #Ctrl4 cp ~/data_download/SRR12621870_1.fastq ~/fastqs/CTRL4_S1_L001_R1_001.fastq cp ~/data_download/SRR12621870_2.fastq ~/fastqs/CTRL4_S1_L001_R2_001.fastq #Ctrl5 cp ~/data_download/SRR12621871_1.fastq ~/fastqs/CTRL5_S1_L001_R1_001.fastq cp ~/data_download/SRR12621871_2.fastq ~/fastqs/CTRL5_S1_L001_R2_001.fastq #Ctrl6 cp ~/data_download/SRR12621872_1.fastq ~/fastqs/CTRL6_S1_L001_R1_001.fastq cp ~/data_download/SRR12621872_2.fastq ~/fastqs/CTRL6_S1_L001_R2_001.fastq If the above steps were conducted properly, the fastqs folder should contain the following files: \u251c\u2500\u2500 CTRL1_S1_L001_R1_001.fastq \u251c\u2500\u2500 CTRL1_S1_L001_R2_001.fastq \u251c\u2500\u2500 CTRL2_S1_L001_R1_001.fastq \u251c\u2500\u2500 CTRL2_S1_L001_R2_001.fastq \u251c\u2500\u2500 CTRL3_S1_L001_R1_001.fastq \u251c\u2500\u2500 CTRL3_S1_L001_R2_001.fastq \u251c\u2500\u2500 CTRL4_S1_L001_R1_001.fastq \u251c\u2500\u2500 CTRL4_S1_L001_R2_001.fastq \u251c\u2500\u2500 CTRL5_S1_L001_R1_001.fastq \u251c\u2500\u2500 CTRL5_S1_L001_R2_001.fastq \u251c\u2500\u2500 CTRL6_S1_L001_R1_001.fastq \u251c\u2500\u2500 CTRL6_S1_L001_R2_001.fastq \u251c\u2500\u2500 PD1_S1_L001_R1_001.fastq \u251c\u2500\u2500 PD1_S1_L001_R2_001.fastq \u251c\u2500\u2500 PD2_S1_L001_R1_001.fastq \u251c\u2500\u2500 PD2_S1_L001_R2_001.fastq \u251c\u2500\u2500 PD3_S1_L001_R1_001.fastq \u251c\u2500\u2500 PD3_S1_L001_R2_001.fastq \u251c\u2500\u2500 PD4_S1_L001_R1_001.fastq \u251c\u2500\u2500 PD4_S1_L001_R2_001.fastq \u251c\u2500\u2500 PD5_S1_L001_R1_001.fastq \u2514\u2500\u2500 PD5_S1_L001_R2_001.fastq","title":"Downloading the midbrain dataset"},{"location":"outputs/","text":"Outputs of each step in the scRNAbox pipeline Introduction Outputs Step 1: FASTQ to expression matrix Step 2: Create Seurat object and remove ambient RNA Step 3: Quality control and generation of filtered data objects Step 4: Doublet removal (standard track) Step 4: Demultiplexing and doublet detection (HTO track) Step 5: Creation of a single Seurat object from all samples Step 6: Clustering Step 7: Cluster annotation Step 8: Differential gene expression Introduction The outputs of each Step of the scRNAbox pipeline are deposited into a step-specific folder in the working directory which contains three sub folders: working_directory \u2514\u2500\u2500step1 \u251c\u2500\u2500 figs1 \u251c\u2500\u2500 info1 \u2514\u2500\u2500 objs1 The figs/ folder contains figures; The info/ folder contains text files and tables; The objs/ folder contains intermediate Seurat RDS objects. Note: If users re-run an Analytical Step, the outputs from the previous run will automatically be overwritten. If you do not want to lose the outputs from a previous run, it is important to copy the materials to a separate directory. One exception to this is when annotating data in Step 7; users can re-run the annotate step as many times as they wish and each interation will add a new metadata column to the already existing Seurat object. Outputs Step 1: FASTQ to gene expression matrix All of the outputs of the CellRanger counts pipeline are produced. For more information on the outputs, please visit the CellRanger documentation . Step 2: Create Seurat object and remove ambient RNA Output type Name Description Figure ambient_RNA_estimation_sample_name.pdf Sample-specific probability density plot showing the ambient RNA estimation. For more information see here Figure ambient_RNA_markers_sample_name.pdf Sample-specific figure showing the marker genes used for ambient RNA estimation. For more information see [here]https://cran.r-project.org/web/packages/SoupX/vignettes/pbmcTutorial.html) Figure vioplot_sample_name.pdf Sample-specific violin plot showing the distribution of cells according to QC metrics Figure zoomed_in_vioplot_sample_name.pdf Sample-specific violin plot showing the distribution of cells according to QC metrics. The minimum value to the mean is shown. Figure cell_cycle_dim_plot_sample_name.pdf Sample-specific principal component analysis of cell-cycle genes, colour-coded by the cell cycle score of each cell. Info sample_name_ambient_rna_summary.rds Sample-specific summary of ambient RNA estimation by SoupX Info sample_name_RNA.txt Sample-specific sparse matrix of RNA assay Info estimated_ambient_RNA_sample_name.txt Sample-specific ambient RNA estimation. Info MetaData_sample_name.txt Sample-specific dataframe showing the Seurat object metadata Info meta_info_sample_name.txt Sample-specific text file showing the column names of the Seurat object metadata Info summary_sample_name.txt Sample-specific text file showing the summary of QC metrics (Minimum, 1st Quartile, Median, Mean, 3rd Quartile, Maximum) Info sessionInfo.txt Session information for the R session Data object sample_name.rds Sample-specific intermediate Seurat RDS object Step 3: Quality control and generation of filtered data objects Output type Name Description Figure dimplot_pca_sample_name.pdf Sample-specific PCA showing the first two PCs Figure elbow_sample_name.pdf Elbow plot to visualize the percentage of variance explained by each PC Figure filtered_QC_vioplot_sample_name.pdf Sample-specific violin plot showing the distribution of cells according to QC metrics after filtering Figure VariableFeaturePlot_sample_name.pdf Sample-specific figure showing the most variably expressed genes Info sample_name_RNA.txt Sample-specific sparse matrix of RNA assay Info MetaData_sample_name.txt Sample-specific dataframe showing the Seurat object metadata Info meta_info_sample_name.txt Sample-specific text file showing the column names of the Seurat object metadata Info most_variable_genes_sample_name.txt Sample-specific text file showing the column names of the Seurat object metadata Info summary_sample_name.txt Sample-specific text file showing the summary of QC metrics (Minimum, 1st Quartile, Median, Mean, 3rd Quartile, Maximum) Info sessionInfo.txt Session information for the R session Data object sample_name.rds Sample-specific intermediate Seurat RDS object Step 4: Doublet removal (standard track) Output type Name Description Figure sample_nameDF.classifications.pdf Sample-specific UMAP plot showing droplet classifications (singlet or doublet) Figure sample_doublet_summary.pdf Sample-specific violin plot showing pANN value across singlet and doublet assignments; sample-specific bar plot showing the number of singlets and doublets. Info n_predicted_doublets_sample_name.txt Sample-specific text file showing the number of identified doublets. Info sample_name_RNA.txt Sample-specific sparse matrix of RNA assay Info MetaData_sample_name.txt Sample-specific dataframe showing the Seurat object metadata Info meta_info_sample_name.txt Sample-specific text file showing the column names of the Seurat object metadata Info sessionInfo.txt Session information for the R session Data object sample_name.rds Sample-specific intermediate Seurat RDS object Step 4: Demultiplexing and doublet detection (HTO track) Output type Name Description Figure run_name_DotPlot_HTO_MSD.pdf Run-specific dot plot showing the enrichment of barcode-labels across cell assignments Figure run_name_Heatmap_HTO_MSD.pdf Run-specific heatmap showing the enrichment of barcode-labels across cell assignments Figure run_name_Ridgeplot_HTO_MSD.pdf Run-specific ridge plot showing the enrichment of barcode-labels across cell assignments Figure run_name_HTO_dimplot_pca_.pdf Run-specific PCA of antibody assay Figure run_name_HTO_dimplot_umap_.pdf Run-specific UMAP of antibody assay Figure run_name_nCounts_RNA_MSD.pdf Run-specific violin plot showing the number of unque transcripts across cell assignments Info run_name.rds_old_antibody_label_MULTIseqDemuxHTOcounts.csv Run-specific list of sample-specific barcode labels used in the experiment Info run_name_MULTIseqDemuxHTOcounts.csv Run-specific number of cells assigned to each sample Info run_namefiltered_MULTIseqDemuxHTOcounts.csv Run-specific number of cells assigned to each sample after removal of doublet and negative droplets Info run_name_meta_info_.txt Run-specific text file showing the column names of the Seurat object metadata Info run_name_MetaData.txt Run-specific dataframe showing the Seurat object metadata Info run_name_RNA.txt Run-specific sparse matrix of RNA assay Info sessionInfo.txt Session information for the R session Data object run_name.rds Run-specific intermediate Seurat RDS object Step 5: Creation of a single Seurat object from all samples Output type Name Description Figure intergrated_DimPlot_pca.pdf PCA showing the first two PCs of integrated assay, colour-coded by sample Figure integrated_DimPlot_umap.pdf UMAP of integrated assay, colour-coded by sample Figure integrated_elbow.pdf Elbow plot to visualize the percentage of variance explained by each PC for the integrated assay Figure integrated_Jackstraw.pdf Jackstraw plot to visualize the distribution of p-values for each PC for the integrated assay Figure merge_DimPlot_pca.pdf PCA showing the first two PCs of merged object, colour-coded by sample Figure merge_DimPlot_umap.pdf UMAP of merged object, colour-coded by sample Figure merge_elbow.pdf Elbow plot to visualize the percentage of variance explained by each PC for the merged object Figure merge_Jackstraw.pdf Jackstraw plot to visualize the distribution of p-values for each PC for the merged object Info seu_int_RNA.txt Sparse matrix of integrated assay Info seu_int_MetaData.txt Dataframe showing the integrated object metadata Info integrated_meta_info_seu_step5.csv Text file showing the column names of the integrated object metadata Info seu_merge_RNA.txt Sparse matrix of merged data object Info seu_merge_MetaData.txt Dataframe showing the merged object metadata Info merge_meta_info_seu_step5.csv Text file showing the column names of the merged object metadata Info sessionInfo.txt Session information for the R session Data object seu_step5.rds Integrated intermediate Seurat RDS object Step 6: Clustering Output type Name Description Figure clustree_int.pdf Clustree plot showing the stability across the user-defied clustering resolutions Figure integrated_snn_res.pdf UMAP at the user defined clustering-resolution Figure ARI.pdf Mean and standard deviation of the Adjusted Rand Index (ARI) between clustering pairs at a user-defined resolution Info clustering_ARI.xlsx Excel file showing the mean and standard deviation of the ARI between clustering pairs at a user-defined resolution Info seu_RNA.txt Sparse matrix of integrated assay Info seu_MetaData.txt Dataframe showing the Seurat object metadata Info meta_info.csv Text file showing the column names of the Seurat object metadata Info sessionInfo.txt Session information for the R session Data object seu_step6.rds Intermediate Seurat RDS object Step 7: Cluster annotation Cluster annotation method Output type Name Description Tool 1: Cluster marker GSEA Figure heatmap.pdf Heatmap showing the expression of the top marker genes across cells, stratified by cluster Tool 1: Cluster marker GSEA Figure plotenrich.pdf Barplot showing the 20 most enriched terms for a particular cluster and cell type library Tool 2: Profile known markers Figure module_score_gene_set.pdf UMAP plot showing the module score across cells for user-defined gene sets Tool 2: Profile known markers Figure select_feature_dot_plot.pdf Dotplot showing the expression of user-defined features at the cluster level Tool 2: Profile known markers Figure select_feature_violin_plot.pdf Violin plot showing the expression of user-defined features at the cluster level Tool 2: Profile known markers Figure select_feature_feature_plot.pdf UMAP plots showing the expression of user-defined features at the cell level Tool 3: Reference-based annotations Figure UMAP_transferred_labels.pdf UMAP plots showing the cluster annotations from the reference Seurat object projected onto the query Seurat object Annotate Figure clustering_name_cluster_annotation.pdf UMAP plot of the integrated assay showing the cluster annotation Annotate Figure clustering_name_split_cluster_annotation.pdf UMAP plot of the integrated assay showing the cluster annotation, split by sample General Info meta_info_seu_step7.txt Text file showing the column names of the Seurat object metadata General Info sessionInfo_marker.txt Session information for the R session Tool 1: Cluster marker GSEA Info cluster_just_genes.xlsx Excel file showing the marker genes for each cluster Tool 1: Cluster marker GSEA Info cluster_whole.xlsx Excel file showing the marker genes and corresponding summary statistics for each cluster Tool 1: Cluster marker GSEA Info ClusterMarkers.csv csv file showing the marker genes and corresponding summary statistics for each cluster Tool 1: Cluster marker GSEA Info top_sel.csv csv file showing the top n marker genes for each cluster. The user defined n in the execution parameters Tool 1: Cluster marker GSEA Info Er.genes.csv Enrichment terms and the corresponding statistics for a particular cluster and cell type library Tool 1: Cluster marker GSEA Data object ClusterMarkers.rds RDS object containing the marker genes for each cluster Tool 2: Module score Info geneset_by_cluster.csv Mean module score across clusters for each user-defined gene set Tool 3: Reference-based annotations Info reference_predictions_summary.xlsx Number of cells from each cluster assigned a particular annotation based of the reference General Data object seu_step7.rds Intermediate Seurat RDS object Step 8: Differential gene expression DGE method Output type Name Description general Figure contrast_name.pdf Volcano plot of showing differentially expressed genes Cell-based DGE Info contrast_name_DEG.csv Differentially exppresed genes identified for the user-defined contrast Sample-based DGE Info Aggregated_expression_summary.csv Aggregated counts across user-defined sample groups Sample-based DGE Info SampleBased_DGEsummarytable.csv Number of differentially expressed genes in the positive and negative direction for each user-defined contrast Sample-based DGE Info DGE_contrast_name.csv Differentially exppresed genes identified for the user-defined contrast General Info seu_RNA.txt Sparse matrix of integrated assay General Info seu_MetaData.txt Dataframe showing the Seurat object metadata General Info meta_info.csv Text file showing the column names of the Seurat object metadata General Info sessionInfo.txt Session information for the R session General Data object seu_step8.rds Intermediate Seurat RDS object","title":"Outputs"},{"location":"outputs/#outputs-of-each-step-in-the-scrnabox-pipeline","text":"Introduction Outputs Step 1: FASTQ to expression matrix Step 2: Create Seurat object and remove ambient RNA Step 3: Quality control and generation of filtered data objects Step 4: Doublet removal (standard track) Step 4: Demultiplexing and doublet detection (HTO track) Step 5: Creation of a single Seurat object from all samples Step 6: Clustering Step 7: Cluster annotation Step 8: Differential gene expression","title":"Outputs of each step in the scRNAbox pipeline"},{"location":"outputs/#introduction","text":"The outputs of each Step of the scRNAbox pipeline are deposited into a step-specific folder in the working directory which contains three sub folders: working_directory \u2514\u2500\u2500step1 \u251c\u2500\u2500 figs1 \u251c\u2500\u2500 info1 \u2514\u2500\u2500 objs1 The figs/ folder contains figures; The info/ folder contains text files and tables; The objs/ folder contains intermediate Seurat RDS objects. Note: If users re-run an Analytical Step, the outputs from the previous run will automatically be overwritten. If you do not want to lose the outputs from a previous run, it is important to copy the materials to a separate directory. One exception to this is when annotating data in Step 7; users can re-run the annotate step as many times as they wish and each interation will add a new metadata column to the already existing Seurat object.","title":"Introduction"},{"location":"outputs/#outputs","text":"","title":"Outputs"},{"location":"outputs/#step-1-fastq-to-gene-expression-matrix","text":"All of the outputs of the CellRanger counts pipeline are produced. For more information on the outputs, please visit the CellRanger documentation .","title":"Step 1: FASTQ to gene expression matrix"},{"location":"outputs/#step-2-create-seurat-object-and-remove-ambient-rna","text":"Output type Name Description Figure ambient_RNA_estimation_sample_name.pdf Sample-specific probability density plot showing the ambient RNA estimation. For more information see here Figure ambient_RNA_markers_sample_name.pdf Sample-specific figure showing the marker genes used for ambient RNA estimation. For more information see [here]https://cran.r-project.org/web/packages/SoupX/vignettes/pbmcTutorial.html) Figure vioplot_sample_name.pdf Sample-specific violin plot showing the distribution of cells according to QC metrics Figure zoomed_in_vioplot_sample_name.pdf Sample-specific violin plot showing the distribution of cells according to QC metrics. The minimum value to the mean is shown. Figure cell_cycle_dim_plot_sample_name.pdf Sample-specific principal component analysis of cell-cycle genes, colour-coded by the cell cycle score of each cell. Info sample_name_ambient_rna_summary.rds Sample-specific summary of ambient RNA estimation by SoupX Info sample_name_RNA.txt Sample-specific sparse matrix of RNA assay Info estimated_ambient_RNA_sample_name.txt Sample-specific ambient RNA estimation. Info MetaData_sample_name.txt Sample-specific dataframe showing the Seurat object metadata Info meta_info_sample_name.txt Sample-specific text file showing the column names of the Seurat object metadata Info summary_sample_name.txt Sample-specific text file showing the summary of QC metrics (Minimum, 1st Quartile, Median, Mean, 3rd Quartile, Maximum) Info sessionInfo.txt Session information for the R session Data object sample_name.rds Sample-specific intermediate Seurat RDS object","title":"Step 2: Create Seurat object and remove ambient RNA"},{"location":"outputs/#step-3-quality-control-and-generation-of-filtered-data-objects","text":"Output type Name Description Figure dimplot_pca_sample_name.pdf Sample-specific PCA showing the first two PCs Figure elbow_sample_name.pdf Elbow plot to visualize the percentage of variance explained by each PC Figure filtered_QC_vioplot_sample_name.pdf Sample-specific violin plot showing the distribution of cells according to QC metrics after filtering Figure VariableFeaturePlot_sample_name.pdf Sample-specific figure showing the most variably expressed genes Info sample_name_RNA.txt Sample-specific sparse matrix of RNA assay Info MetaData_sample_name.txt Sample-specific dataframe showing the Seurat object metadata Info meta_info_sample_name.txt Sample-specific text file showing the column names of the Seurat object metadata Info most_variable_genes_sample_name.txt Sample-specific text file showing the column names of the Seurat object metadata Info summary_sample_name.txt Sample-specific text file showing the summary of QC metrics (Minimum, 1st Quartile, Median, Mean, 3rd Quartile, Maximum) Info sessionInfo.txt Session information for the R session Data object sample_name.rds Sample-specific intermediate Seurat RDS object","title":"Step 3: Quality control and generation of filtered data objects"},{"location":"outputs/#step-4-doublet-removal-standard-track","text":"Output type Name Description Figure sample_nameDF.classifications.pdf Sample-specific UMAP plot showing droplet classifications (singlet or doublet) Figure sample_doublet_summary.pdf Sample-specific violin plot showing pANN value across singlet and doublet assignments; sample-specific bar plot showing the number of singlets and doublets. Info n_predicted_doublets_sample_name.txt Sample-specific text file showing the number of identified doublets. Info sample_name_RNA.txt Sample-specific sparse matrix of RNA assay Info MetaData_sample_name.txt Sample-specific dataframe showing the Seurat object metadata Info meta_info_sample_name.txt Sample-specific text file showing the column names of the Seurat object metadata Info sessionInfo.txt Session information for the R session Data object sample_name.rds Sample-specific intermediate Seurat RDS object","title":"Step 4: Doublet removal (standard track)"},{"location":"outputs/#step-4-demultiplexing-and-doublet-detection-hto-track","text":"Output type Name Description Figure run_name_DotPlot_HTO_MSD.pdf Run-specific dot plot showing the enrichment of barcode-labels across cell assignments Figure run_name_Heatmap_HTO_MSD.pdf Run-specific heatmap showing the enrichment of barcode-labels across cell assignments Figure run_name_Ridgeplot_HTO_MSD.pdf Run-specific ridge plot showing the enrichment of barcode-labels across cell assignments Figure run_name_HTO_dimplot_pca_.pdf Run-specific PCA of antibody assay Figure run_name_HTO_dimplot_umap_.pdf Run-specific UMAP of antibody assay Figure run_name_nCounts_RNA_MSD.pdf Run-specific violin plot showing the number of unque transcripts across cell assignments Info run_name.rds_old_antibody_label_MULTIseqDemuxHTOcounts.csv Run-specific list of sample-specific barcode labels used in the experiment Info run_name_MULTIseqDemuxHTOcounts.csv Run-specific number of cells assigned to each sample Info run_namefiltered_MULTIseqDemuxHTOcounts.csv Run-specific number of cells assigned to each sample after removal of doublet and negative droplets Info run_name_meta_info_.txt Run-specific text file showing the column names of the Seurat object metadata Info run_name_MetaData.txt Run-specific dataframe showing the Seurat object metadata Info run_name_RNA.txt Run-specific sparse matrix of RNA assay Info sessionInfo.txt Session information for the R session Data object run_name.rds Run-specific intermediate Seurat RDS object","title":"Step 4: Demultiplexing and doublet detection (HTO track)"},{"location":"outputs/#step-5-creation-of-a-single-seurat-object-from-all-samples","text":"Output type Name Description Figure intergrated_DimPlot_pca.pdf PCA showing the first two PCs of integrated assay, colour-coded by sample Figure integrated_DimPlot_umap.pdf UMAP of integrated assay, colour-coded by sample Figure integrated_elbow.pdf Elbow plot to visualize the percentage of variance explained by each PC for the integrated assay Figure integrated_Jackstraw.pdf Jackstraw plot to visualize the distribution of p-values for each PC for the integrated assay Figure merge_DimPlot_pca.pdf PCA showing the first two PCs of merged object, colour-coded by sample Figure merge_DimPlot_umap.pdf UMAP of merged object, colour-coded by sample Figure merge_elbow.pdf Elbow plot to visualize the percentage of variance explained by each PC for the merged object Figure merge_Jackstraw.pdf Jackstraw plot to visualize the distribution of p-values for each PC for the merged object Info seu_int_RNA.txt Sparse matrix of integrated assay Info seu_int_MetaData.txt Dataframe showing the integrated object metadata Info integrated_meta_info_seu_step5.csv Text file showing the column names of the integrated object metadata Info seu_merge_RNA.txt Sparse matrix of merged data object Info seu_merge_MetaData.txt Dataframe showing the merged object metadata Info merge_meta_info_seu_step5.csv Text file showing the column names of the merged object metadata Info sessionInfo.txt Session information for the R session Data object seu_step5.rds Integrated intermediate Seurat RDS object","title":"Step 5: Creation of a single Seurat object from all samples"},{"location":"outputs/#step-6-clustering","text":"Output type Name Description Figure clustree_int.pdf Clustree plot showing the stability across the user-defied clustering resolutions Figure integrated_snn_res.pdf UMAP at the user defined clustering-resolution Figure ARI.pdf Mean and standard deviation of the Adjusted Rand Index (ARI) between clustering pairs at a user-defined resolution Info clustering_ARI.xlsx Excel file showing the mean and standard deviation of the ARI between clustering pairs at a user-defined resolution Info seu_RNA.txt Sparse matrix of integrated assay Info seu_MetaData.txt Dataframe showing the Seurat object metadata Info meta_info.csv Text file showing the column names of the Seurat object metadata Info sessionInfo.txt Session information for the R session Data object seu_step6.rds Intermediate Seurat RDS object","title":"Step 6: Clustering"},{"location":"outputs/#step-7-cluster-annotation","text":"Cluster annotation method Output type Name Description Tool 1: Cluster marker GSEA Figure heatmap.pdf Heatmap showing the expression of the top marker genes across cells, stratified by cluster Tool 1: Cluster marker GSEA Figure plotenrich.pdf Barplot showing the 20 most enriched terms for a particular cluster and cell type library Tool 2: Profile known markers Figure module_score_gene_set.pdf UMAP plot showing the module score across cells for user-defined gene sets Tool 2: Profile known markers Figure select_feature_dot_plot.pdf Dotplot showing the expression of user-defined features at the cluster level Tool 2: Profile known markers Figure select_feature_violin_plot.pdf Violin plot showing the expression of user-defined features at the cluster level Tool 2: Profile known markers Figure select_feature_feature_plot.pdf UMAP plots showing the expression of user-defined features at the cell level Tool 3: Reference-based annotations Figure UMAP_transferred_labels.pdf UMAP plots showing the cluster annotations from the reference Seurat object projected onto the query Seurat object Annotate Figure clustering_name_cluster_annotation.pdf UMAP plot of the integrated assay showing the cluster annotation Annotate Figure clustering_name_split_cluster_annotation.pdf UMAP plot of the integrated assay showing the cluster annotation, split by sample General Info meta_info_seu_step7.txt Text file showing the column names of the Seurat object metadata General Info sessionInfo_marker.txt Session information for the R session Tool 1: Cluster marker GSEA Info cluster_just_genes.xlsx Excel file showing the marker genes for each cluster Tool 1: Cluster marker GSEA Info cluster_whole.xlsx Excel file showing the marker genes and corresponding summary statistics for each cluster Tool 1: Cluster marker GSEA Info ClusterMarkers.csv csv file showing the marker genes and corresponding summary statistics for each cluster Tool 1: Cluster marker GSEA Info top_sel.csv csv file showing the top n marker genes for each cluster. The user defined n in the execution parameters Tool 1: Cluster marker GSEA Info Er.genes.csv Enrichment terms and the corresponding statistics for a particular cluster and cell type library Tool 1: Cluster marker GSEA Data object ClusterMarkers.rds RDS object containing the marker genes for each cluster Tool 2: Module score Info geneset_by_cluster.csv Mean module score across clusters for each user-defined gene set Tool 3: Reference-based annotations Info reference_predictions_summary.xlsx Number of cells from each cluster assigned a particular annotation based of the reference General Data object seu_step7.rds Intermediate Seurat RDS object","title":"Step 7: Cluster annotation"},{"location":"outputs/#step-8-differential-gene-expression","text":"DGE method Output type Name Description general Figure contrast_name.pdf Volcano plot of showing differentially expressed genes Cell-based DGE Info contrast_name_DEG.csv Differentially exppresed genes identified for the user-defined contrast Sample-based DGE Info Aggregated_expression_summary.csv Aggregated counts across user-defined sample groups Sample-based DGE Info SampleBased_DGEsummarytable.csv Number of differentially expressed genes in the positive and negative direction for each user-defined contrast Sample-based DGE Info DGE_contrast_name.csv Differentially exppresed genes identified for the user-defined contrast General Info seu_RNA.txt Sparse matrix of integrated assay General Info seu_MetaData.txt Dataframe showing the Seurat object metadata General Info meta_info.csv Text file showing the column names of the Seurat object metadata General Info sessionInfo.txt Session information for the R session General Data object seu_step8.rds Intermediate Seurat RDS object","title":"Step 8: Differential gene expression"},{"location":"pbmc_download/","text":"Downloading the PBMC dataset The scRNAseq data produced by Stoeckius et al. is publicly available in the Gene Expression Omnibus with accession code GSE108313 . To download the data, we must first install SRAtoolkit (if this is not already installed on your High-Performance Computing (HPC) system). We will create a directory for our raw data and download SRAtoolkit with the following code: mkdir data_download cd data_download wget --output-document sratoolkit.tar.gz https://ftp-trace.ncbi.nlm.nih.gov/sra/sdk/current/sratoolkit.current-ubuntu64.tar.gz tar -vxzf sratoolkit.tar.gz export PATH=$PATH:$PWD/sratoolkit.3.0.5-ubuntu64/bin For more information regarding the SRAtoolkit, please visit the documentation . The Sequence Read Archive (SRA) run identifiers for the RNA and antibody assays are: Assay SRR RNA SRR8281306 Antibody SRR8281307 To download the FASTQ files for the RNA and antibody assays, run the following code. Please note that this may take a very long time. export PATH=$PATH:$PWD/sratoolkit.3.0.5-ubuntu64/bin module load StdEnv/2020 gcc/9.3.0 module load sra-toolkit/3.0.0 #RNA prefetch SRR8281306 --max-size 100GB fasterq-dump SRR8281306 #Antibody prefetch SRR8281307 --max-size 100GB fasterq-dump SRR8281307 If the FASTQ files for the RNA and antibody assays have been downloaded properly, the data_download folder should contain the following: data_download \u251c\u2500\u2500 SRR8281306 \u2502 \u2514\u2500\u2500 SRR8281306.sra \u251c\u2500\u2500 SRR8281306_1.fastq \u251c\u2500\u2500 SRR8281306_2.fastq \u251c\u2500\u2500 SRR8281307 \u2502 \u2514\u2500\u2500 SRR8281307.sra \u251c\u2500\u2500 SRR8281307_1.fastq \u2514\u2500\u2500 SRR8281307_2.fastq Next, we will rename the FASTQ files according to the CellRanger nomenclature and transfer the FASTQ files to a folder named fastqs . For more information regarding the nomeclature required by the CellRanger counts pipeline, please visit CellRanger's documentation . Note : The fastqs folder should only contain FASTQ files for the experiment. mkdir fastqs # RNA assay cp ~/data_download/SRR8281306_1.fastq ~/fastqs/run1GEX_S1_L001_R1_001.fastq cp ~/data_download/SRR8281306_2.fastq ~/fastqs/run1GEX_S1_L001_R2_001.fastq # HTO assay cp ~/data_download/SRR8281307_1.fastq ~/fastqs/run1HTO_S1_L001_R1_001.fastq cp ~/data_download/SRR8281307_2.fastq ~/fastqs/run1HTO_S1_L001_R2_001.fastq If the above steps were conducted properly, the fastqs folder should contain the following files: fastqs \u251c\u2500\u2500 run1GEX_S1_L001_R1_001.fastq \u251c\u2500\u2500 run1GEX_S1_L001_R2_001.fastq \u251c\u2500\u2500 run1HTO_S1_L001_R1_001.fastq \u2514\u2500\u2500 run1HTO_S1_L001_R2_001.fastq","title":"Downloading the PBMC dataset"},{"location":"pbmc_download/#downloading-the-pbmc-dataset","text":"The scRNAseq data produced by Stoeckius et al. is publicly available in the Gene Expression Omnibus with accession code GSE108313 . To download the data, we must first install SRAtoolkit (if this is not already installed on your High-Performance Computing (HPC) system). We will create a directory for our raw data and download SRAtoolkit with the following code: mkdir data_download cd data_download wget --output-document sratoolkit.tar.gz https://ftp-trace.ncbi.nlm.nih.gov/sra/sdk/current/sratoolkit.current-ubuntu64.tar.gz tar -vxzf sratoolkit.tar.gz export PATH=$PATH:$PWD/sratoolkit.3.0.5-ubuntu64/bin For more information regarding the SRAtoolkit, please visit the documentation . The Sequence Read Archive (SRA) run identifiers for the RNA and antibody assays are: Assay SRR RNA SRR8281306 Antibody SRR8281307 To download the FASTQ files for the RNA and antibody assays, run the following code. Please note that this may take a very long time. export PATH=$PATH:$PWD/sratoolkit.3.0.5-ubuntu64/bin module load StdEnv/2020 gcc/9.3.0 module load sra-toolkit/3.0.0 #RNA prefetch SRR8281306 --max-size 100GB fasterq-dump SRR8281306 #Antibody prefetch SRR8281307 --max-size 100GB fasterq-dump SRR8281307 If the FASTQ files for the RNA and antibody assays have been downloaded properly, the data_download folder should contain the following: data_download \u251c\u2500\u2500 SRR8281306 \u2502 \u2514\u2500\u2500 SRR8281306.sra \u251c\u2500\u2500 SRR8281306_1.fastq \u251c\u2500\u2500 SRR8281306_2.fastq \u251c\u2500\u2500 SRR8281307 \u2502 \u2514\u2500\u2500 SRR8281307.sra \u251c\u2500\u2500 SRR8281307_1.fastq \u2514\u2500\u2500 SRR8281307_2.fastq Next, we will rename the FASTQ files according to the CellRanger nomenclature and transfer the FASTQ files to a folder named fastqs . For more information regarding the nomeclature required by the CellRanger counts pipeline, please visit CellRanger's documentation . Note : The fastqs folder should only contain FASTQ files for the experiment. mkdir fastqs # RNA assay cp ~/data_download/SRR8281306_1.fastq ~/fastqs/run1GEX_S1_L001_R1_001.fastq cp ~/data_download/SRR8281306_2.fastq ~/fastqs/run1GEX_S1_L001_R2_001.fastq # HTO assay cp ~/data_download/SRR8281307_1.fastq ~/fastqs/run1HTO_S1_L001_R1_001.fastq cp ~/data_download/SRR8281307_2.fastq ~/fastqs/run1HTO_S1_L001_R2_001.fastq If the above steps were conducted properly, the fastqs folder should contain the following files: fastqs \u251c\u2500\u2500 run1GEX_S1_L001_R1_001.fastq \u251c\u2500\u2500 run1GEX_S1_L001_R2_001.fastq \u251c\u2500\u2500 run1HTO_S1_L001_R1_001.fastq \u2514\u2500\u2500 run1HTO_S1_L001_R2_001.fastq","title":"Downloading the PBMC dataset"},{"location":"reference/","text":"Adjustable execution parameters for the scRNAbox pipeline Introduction Step parameters Step 1: FASTQ to expression matrix (standard track) Step 1: FASTQ to expression matrix (HTO track) Step 2: Create Seurat object and remove ambient RNA Step 3: Quality control and generation of filtered data objects Step 4: Doublet removal (standard track) Step 4: Demultiplexing and doublet detection (HTO track) Step 5: Creation of a single Seurat object from all samples Step 6: Clustering Step 7: Cluster annotation Step 8: Differential gene expression Differential Gene Expression (DGE) Contrast Matrices Cell-based DGE using all cells Cell-based DGE using cell type groups Sample-based DGE using all cells Sample-based DGE using cell type groups How to modify parameter files Introduction Prior to running each step of the scRNAbox pipeline, users are strongly encouraged to modify the execution parameters of the analysis using the adjustable, step-specific parameters text files. Upon running Step 0, adjustable text files for each step will be automatically deposited in ~/working_directory/job_info/parameters : parameters \u251c\u2500\u2500 step1_par.txt \u251c\u2500\u2500 step2_par.txt \u251c\u2500\u2500 step3_par.txt \u251c\u2500\u2500 step4_par.txt \u251c\u2500\u2500 step5_par.txt \u251c\u2500\u2500 step6_par.txt \u251c\u2500\u2500 step7_par.txt \u251c\u2500\u2500 step8_contrast_sample_based_all_cells.txt \u251c\u2500\u2500 step8_contrast_sample_based_celltype_groups.txt \u251c\u2500\u2500 step8_contrast_cell_based_all_cells.txt \u251c\u2500\u2500 step8_contrast_cell_based_celltype_groups.txt \u2514\u2500\u2500step8_par.txt To ensure replicability, a summary report file documents the execution parameters for each iteration of each Analytical Step, which is located in ~/working_directory/job_info/summary_report.txt . Note: 1) Parameters that require a character input (e.g. \"Control 1\") must be placed in quotations (\" \" or ' '). 2) Parameters that require a numerical input must not be placed in quotations (e.g. 0.50). 3) Parameters that require a \"yes\" or \"no\" answer are not case-sensitive. Step parameters Step 1: FASTQ to gene expression matrix (standard track) Parameter Default Description par_automated_library_prep No Whether or not to perform automated library prep. Alternatively, you may set this parameter to \"no\" and manually prepare the libraries. par_fastq_directory NULL Path to directory containing the FASTQ files. This directory should only contain FASTQ files for the experiment. par_sample_names NULL The sample names used to name the FASTQ files according to CellRanger nomeclature par_rename_samples Yes Whether or not you want to rename your samples. These names will be used to identify cells in the Seurat objects par_new_sample_names NULL New sample names. Make sure they are defined in the same order as 'par_sample_names' par_paired_end_seq Yes Whether or not paired-end sequencing was performed par_ref_dir_grch NULL Path to reference genome for FASTQ alignment. 10X Genomics reference genomes are available for download. For more information see the 10X Genomics documentation . par_r1_length NULL Minimum number of bases to retain for R1 sequence of gene expression par_r2_length NULL Minimum number of bases to retain for R2 sequence of gene expression par_mempercode 30 For clusters whose job managers do not support memory requests, it is possible to request memory in the form of cores. This option will scale up the number of threads requested via the MRO_THREADS variable according to how much memory a stage requires when given to the ratio of memory on your nodes. par_include_introns No Whether or not to include intronic reads in the gene expression matrix par_no_target_umi_filter No Whether or not to tirn of CellRanger's target UMI filtering subpipeline par_expect_cells NULL Expected number of cells. By default, CellRanger's auto-estimate algorithm will be used par_force_cells NULL Force the CellRanger count ipeline to use N cells. par_no_bam No Whether or not to skip the bam file generation in the CellRanger pipeline. Step 1: FASTQ to gene expression matrix (HTO track) Parameter Default Description par_automated_library_prep Yes Whether or not to perform automated library prep. Alternatively, you may set this parameter to \"no\" and manually prepare the libraries. par_fastq_directory NULL Path to directory containing the FASTQ files. This directory should only contain FASTQ files for the experiment. par_RNA_run_names NULL The names of the sequencing runs for the RNA assay par_HTO_run_names NULL The names of the sequencing runs for the HTO assay par_seq_run_names NULL The user-selected name for the sequencing run. These names will be used to identify cells in the Seurat objects par_paired_end_seq Yes Whether or not paired-end sequencing was performed id NULL Barcode ID which will be used to track the feature counts name NULL The user-selected name for the barcode identifier read R2 Which RNA sequencing read contains the barcode sequence. This value Will be either R1 or R2. pattern NULL The pattern of the barcode identifiers sequence NULL The nucleotide sequence associated with the barcode identifier par_ref_dir_grch NULL Path to reference genome for FASTQ alignment. 10X Genomics reference genomes are available for download. For more information see the 10X Genomics documentation . par_r1_length NULL Minimum number of bases to retain for R1 sequence of gene expression par_r2_length NULL Minimum number of bases to retain for R2 sequence of gene expression par_mempercode 30 For clusters whose job managers do not support memory requests, it is possible to request memory in the form of cores. This option will scale up the number of threads requested via the MRO_THREADS variable according to how much memory a stage requires when given to the ratio of memory on your nodes. par_include_introns No Whether or not to include intronic reads in the gene expression matrix par_no_target_umi_filter No Whether or not to tirn of CellRanger's target UMI filtering subpipeline par_expect_cells NULL Expected number of cells. By default, CellRanger's auto-estimate algorithm will be used par_force_cells NULL Force the CellRanger count ipeline to use N cells. par_no_bam No Whether or not to skip the bam file generation in the CellRanger pipeline. Step 2: Create Seurat object and remove ambient RNA Parameter Default Description par_save_RNA Yes Whether or not to export an RNA expression matrix par_save_metadata Yes Whether or not to export a metadata dataframe par_ambient_RNA Yes Whether or not to correct the feature-barcode expression matrices for ambient RNA contamination par_min.cells_L 3 Only retain genes expressed in a minimum number of cells par_normalization.method LogNormalize Method to use for normalization par_scale.factor 10000 Scale factor for scaling the data par_selection.method vst Method for choosing the top variable features par_nfeatures 2500 Number of features to select as top variable features Step 3: Quality control and generation of filtered data objects Parameter Default Description par_save_RNA Yes Whether or not to export an RNA expression matrix par_save_metadata Yes Whether or not to export a metadata dataframe par_seurat_object NULL If users already have a Seurat object(s), they may provide the path to a directory that contains an existing Seurat object(s) to initiate the pipeline at Step 3 par_nFeature_RNA_L 300 Only retain cells expressing a minimum number of unique RNA transcripts par_nFeature_RNA_U 10000 Only retain cells expressing a maximum number of unique RNA transcripts par_nCount_RNA_L 300 Only retain cells with a minimum number of total RNA transcripts par_nCount_RNA_U 20000 Only retain cells with a maximum number of total RNA transcripts par_mitochondria_percent_L 0 Only retain cells with a minimum percentage of mitochondrial-encoded genes par_mitochondria_percent_U 20 Only retain cells with a maximum percentage of mitochondrial-encoded genes par_ribosomal_percent_L 0 Only retain cells with a minimum percentage of ribosome genes par_ribosomal_percent_U 100 Only retain cells with a maximum percentage of ribosome genes par_remove_mitochondrial_genes No Whether or not to remove mitochondrial genes par_remove_ribosomal_genes No Whether or not to remove ribosomal genes par_remove_genes NULL If users want to remove specific genes from their data, they may define a list of gene identifiers par_regress_cell_cycle_genes No Whether or not to regress cell cycle genes par_regress_custom_genes No Whether or not to regress a custom list of genes par_regress_genes NULL List of custom genes to regress par_normalization.method LogNormalize Method to use for normalization par_scale.factor 10000 Scale factor for scaling the data par_selection.method vst Method for choosing the top variable features par_nfeatures 2500 Number of features to select as top variable features par_top 10 Number of most variable features to be reported in the csv file par_npcs_pca 30 Total Number of principal components to compute and store for principal component analysis (PCA) Step 4: Doublet removal (standard track) Parameter Default Description par_save_RNA Yes Whether or not to export an RNA expression matrix par_save_metadata Yes Whether or not to export a metadata dataframe par_seurat_object NULL If users already have a Seurat object(s), they may provide the path to a directory that contains an existing Seurat object(s) to initiate the pipeline at Step 4 par_RunUMAP_dims 25 Number of dimensions to use as input features for uniform manifold approximation and projection (UMAP) par_RunUMAP_n.neighbors 45 Number of neighboring points used in local approximations of manifold structure par_dropDN Yes Whether or not to remove predicted doublets from downstream analyses par_PCs 25 The number of statistically significant principal components. Can be informed by elbow plot produced in Step 3 par_pN 0.25 The number of artificial doublets to generate. DoubletFinderr is largely invariant to this parameter. We suggest keeping 0.25 par_sct FALSE Logical representing whether SCTransform was used during original Seurat object pre-processing par_sample_names NULL A list of sample names for each sample in the experiement, corresponding to the expected doublet rates listed in the parameter below. Sample names should be the same as those used to produce the samples_info folder during the setup procedures. par_expected_doublet_rate NULL A vector of expected doublet rates for each sample (e.g. for a 5% expected doublet rate, write 0.05). The expected doublet rates for each sample should be listed in the same order as the sample names in the above parameter. Make sure to have as many expected doublet rates listed as you have samples. Step 4: Demultiplexing and doublet detection (HTO track) Parameter Default Description par_save_RNA Yes Whether or not to export an RNA expression matrix par_save_metadata Yes Whether or not to export a metadata dataframe par_seurat_object NULL If users already have a Seurat object(s), they may provide the path to a directory that contains an existing Seurat object(s) to initiate the pipeline at Step 4 par_normalization.method CLR Method for normalizing the HTO assay par_scale.factor 1000 Scale factor for scaling the HTO assay par_selection.method vst Method for selecting the most variable features in the HTO assay par_nfeatures 5 Number of features to select as top variable features for the HTO assay. This value is dependent on the number of sample specific barcodes used in the experiment par_dims_umap 5 Number of dimensions to use as input features for uniform manifold approximation and projection (UMAP) of HTO assay par_n.neighbor 65 Number of neighboring points to use in local approximations of manifold structure par_dimensionality_reduction Yes Whether or not to perform linear dimensionality reduction on the HTO assay par_npcs_pca 30 Total Number of principal components to compute and store for principal component analysis (PCA) of HTO assay par_dropDN Yes Whether or not to remove predicted doublets and negatives from downstream analyses par_label_dropDN Doublet, Negative Labels used to identify doublet and negative droplets par_quantile 0.9 The quantile to use for droplet classification using MULTIseqDemux par_autoThresh TRUE Whether or not to perform automated threshold finding to define the best quantile for droplet classification using MULTIseqDemux par_maxiter 5 Maximum number of iterations to use if autoThresh = TRUE par_RidgePlot_ncol 3 Number of columns used to display RidgePlots, which visualizes the enrichment of barcode labels across samples par_old_antibody_label NULL If you wish to rename the barcode labels, first list the existing barcode labels in this parameter. old antibody labels can be identified in the \"_old_antibody_label_MULTIseqDemuxHTOcounts\" file produced by running Step 4 msd par_new_antibody_label NULL If you wish to rename the barcode labels, list the new labels corresponding to the old labels listed in the parameter above Step 5: Creation of a single Seurat object from all samples Parameter Default Description par_save_RNA Yes Whether or not to export an RNA expression matrix par_save_metadata Yes Whether or not to export a metadata dataframe par_seurat_object NULL If users already have a Seurat object(s), they may provide the path to a directory that contains an existing Seurat object(s) to initiate the pipeline at Step 5 par_one_seurat No Whether or not the experiment comprises of only one sequencing run. If this parameter is set to \"Yes\", set par_integrate_seurat and par_merge_seurat to \"No\". par_integrate_seurat Yes Whether or not to integrate the samples. If \"Yes\", par_merge_seurat must be \"No\". par_merge_seurat No Whether or not to merge the samples. If \"Yes\", par_integrate_seurat must be \"No\". par_DefaultAssay RNA The assay to perform normalization, scaling, and linear dimensiona reduction on. For most use cases this will be RNA. par_normalization.method LogNormalize Method to use for normalization par_scale.factor 10000 Scale factor for scaling the data par_selection.method vst Method for detecting top variable features par_nfeatures 2500 Number of features to select as top variable features par_FindIntegrationAnchors_dim 25 Which dimensions to use from the canonical correlation analysis (CCA) to specify the neighbor search space par_RunPCA_npcs 30 Total Number of principal components to compute and store for principal component analysis (PCA) par_RunUMAP_dims 25 Number of dimensions to use as input features for uniform manifold approximation and projection (UMAP) par_RunUMAP_n.neighbors 45 Number of neighboring points used in local approximations of manifold structure par_compute_jackstraw No Whether or not to perform JackStraw computation. This computation takes a long time. Step 6: Clustering Parameter Default Description par_save_RNA Yes Whether or not to export an RNA expression matrix par_save_metadata Yes Whether or not to export a metadata dataframe par_seurat_object NULL If users already have a Seurat object, they may provide the path to the Seurat object to initiate the pipeline at Step 6 par_skip_integration No Whether or not the user skipped integration in Step 5 par_FindNeighbors_dims 25 Number of dimensions from linear dimensional reduction used as input to identify neighbours. Can be informed by the elbow and Jackstraw plots produced in Step 5 par_RunUMAP_dims 25 Number of dimensions to use as input features for uniform manifold approximation and projection (UMAP) par_FindNeighbors_k.param 45 Defines k for the k-nearest neighbor algorithm par_FindNeighbors_prune.SNN 1/15 Sets the cutoff for acceptable Jaccard index when computing the neighborhood overlap for the shared nearest-neighbour (SNN) construction par_FindClusters_resolution 0, 0.05, 0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 2.0 Value of the clustering resolution parameter. You may provide multiple resolution values par_compute_ARI Yes Whether or not you want to compute the Adjusted Rand Index (ARI) between clusters at a given clustering resolution par_RI_reps 25 Number of iterations for clustering the data at a given resolution in order to calculate the ARI Step 7: Cluster annotation Annotation tool Parameter Default Description General par_save_RNA Yes Whether or not to export an RNA expression matrix General par_save_metadata Yes Whether or not to export a metadata dataframe General par_seurat_object NULL If users already have a Seurat object, they may provide the path to the Seurat object to initiate the pipeline at Step 7 General par_level_cluster integrated_snn_res.0.75 The cluster resolution that you want to annotate. If you skipped integration in Step 5, use par_level_cluster='RNA_snn_res.0.7', if you want to proceed with a clustering resolution of 0.7. Tool 1 par_run_find_marker Yes Whether or not to find marker genes for each cluster Tool 1 par_run_enrichR No Whether or not to run gene set enrichment analysis (GSEA) on the marker genes for each cluster using the EnrichR tools. Note that the HPC must have access to the internet to run GSEA. Tool 1 par_top_sel 5 Number of top markers to identify based on avg_log2FC Tool 1 par_db Descartes_Cell_Types_and_Tissue_2021, CellMarker_Augmented_2021, Azimuth_Cell_Types_2021 Character vector of EnrichR databases that define cell types. The top marker genes for each cluster will be tested for enrichment across these databases. Tool 2 par_run_module_score Yes Whether or not to compute module score for aggregated expression Tool 2 par_run_visualize_markers Yes Whether or not to visualize the expression of individual genes Tool 2 par_module_score NULL Path to the csv file containing the gene sets for the module score Tool 2 par_select_features_list NULL List of genes whose expression will be visualized individually Tool 2 par_select_features_csv NULL If you want to define multiple lists of features to visualize individually, you can do so with a csv file. The header should contain the list names and all features belonging to the same list should be in the same column. Tool 3 par_reference NULL Path defining the location of the reference Seurat object Tool 3 par_reference_name Reference An arbitrary name for the reference object. This will be used to name the metadata slot. Tool 3 par_level_celltype NULL The name of the metadata column in the reference Seurat object that defines cell types Tool 3 par_FindTransferAnchors_dim 50 Number of dimensions from linear dimensional reduction used to find transfer anchors between the reference and query Seurat objects Tool 3 par_futureglobalsmaxSize 60000 * 1024^2 This will increase your RAM usage so set this number mindfully Annotate par_annotate_resolution integrated_snn_res.0.75 Which clustering resolution you want to annotate Annotate par_name_metadata Celltypes1 The name of the metadata slot that will contain the annotations Annotate par_annotate_labels NULL A list of cluster labels. There must as many labels as clusters at the defined clustering resolution. Please refrain from using \"_\" when annotating. Step 8: Differential gene expression DGE method Parameter Default Description General par_save_RNA Yes Whether or not to export an RNA expression matrix General par_save_metadata Yes Whether or not to export a metadata dataframe General par_seurat_object NULL If users already have a Seurat object, they may provide the path to the Seurat object to initiate the pipeline at Step 7 Add metadata par_merge_meta orig.ident The column from the Seurat metdata that will be used to merge the new metadata. This column must also exist in the submitted csv file contaning new metadata. Add metadata par_metadata NULL csv file containing metadata to be added to the Seurat object Cell-based DGE with all cells par_run_cell_based_all_cells Yes Whether or not to compute cell-based DGE with all cells Cell-based DGE with cell type groups par_run_cell_based_cell_type_groups Yes Whether or not to compute cell-based DGE with cell type groups Sample-based DGE with all cells par_run_sample_based_all_cells Yes Whether or not to compute sample-based DGE with all cells Sample-based DGE with cell type groups par_run_sample_based_cell_type_groups Yes Whether or not to compute sample-based DGE with cell type groups Cell-based DGE par_statistical_method MAST Which statistical framework to use for computing cell-based DGE Differential Gene Expression Contrast Matrices Cell-based DGE using all cells To perform cell-based DGE using all cells, users must fill in the step8_contrast_cell_based_all_cells.txt file located in ~/working_directory/job_info/parameters . The contrast matrix contains the following columns: contast_name: An abritrary name for the contrast meta_data_variable: The metadata slot containing the Sample IDs defined in group1 and group2 group1: A list of sample IDs to be contrasted against the sample IDs listed in group2 group2: A list of sample IDs to be contrasted against the sample IDs listed in group1 Multiple contrasts can be defined in the same file. In addition, multiple samples can be listed under group1 and group 2. For example: contrast_name meta_data_variable group1 group2 Design1 orig.ident Control1,Control2,Control3 Case1,Case2,Case3 Design3 DiseaseStatus HealthyControl Disease Cell-based DGE using cell type groups To perform cell-based DGE using cell type groups, users must fill in the step8_contrast_cell_based_celltype_groups.txt file located in ~/working_directory/job_info/parameters . The contrast matrix contains the following columns: contast_name: An abritrary name for the contrast meta_data_celltype: The metadata slot containing cell type annotations cell_type: The cell type used to compute DGE meta_data_variable: The metadata slot containing the Sample IDs defined in group1 and group2 group1: A list of sample IDs to be contrasted against the sample IDs listed in group2 group2: A list of sample IDs to be contrasted against the sample IDs listed in group1 Multiple contrasts can be defined in the same file. In addition, multiple samples can be listed under group1 and group 2. For example: contrast_name meta_data_celltype cell_type meta_data_variable group1 group2 Design1 Annotation1 Neuron orig.ident Control1,Control2,Control3, Case1,Case2,Case3, Design2 Annotation2 Microglia DiseaseStatus HealthyControl Disease Sample-based DGE using all cells To perform sample-based DGE using all cells, users must fill in the step8_contrast_sample_based_all_cells.txt file located in ~/working_directory/job_info/parameters . The contrast matrix contains the following columns: ContrastName: An abritrary name for the contrast MainContrast: The metadata slot containing the two groups used for the main contrast (e.g. case and control) Sample_ID: The metadata slot containing the Sample IDs of the individual subjects (e.g. sample 1, sample 2, etc.) ContrastName MainContrast SampleID Design DiseaseStatus orig.ident In addition, users may add additional columns if they want to further group their samples. For example, users may wich to group samples by experimental batch: ContrastName MainContrast SampleID Batch Design DiseaseStatus orig.ident Batch_Id In this case, Batch is arbitrary, but Batch_ID must be a metadata slot. Sample-based DGE using cell type groups To perform sample-based DGE using all cells, users must fill in the step8_contrast_sample_based_celltype_groups.txt file located in ~/working_directory/job_info/parameters . The contrast matrix contains the following columns: ContrastName: An abritrary name for the contrast CellType: The metadata slot containing cell type annotations MainContrast: The metadata slot containing the two groups used for the main contrast (e.g. case and control) Sample_ID: The metadata slot containing the Sample IDs of the individual subjects (e.g. sample 1, sample 2, etc.) ContrastName CellType MainContrast SampleID Design Annotation1 DiseaseStatus orig.ident In addition, users may add additional columns if they want to further group their samples. For example, users may wich to group samples by experimental batch: ContrastName CellType MainContrast SampleID Batch Design Annotation1 DiseaseStatus orig.ident Batch_ID In this case, Batch is arbitrary, but Batch_ID must be a metadata slot. Modyfing parameter files The following section illustrates how to modify the parameter files directly from the terminal. For this tutorial, we will use the execution parameters for Step 2 as an example. To begin, navigate to the parameters directory and view its contents: cd ~/working_directory/job_info/parameters ls The following files will be available: step1_par.txt step2_par.txt step3_par.txt step4_par.txt step5_par.txt step6_par.txt step7_par.txt step8_contrast_cell_based_all_cells.txt step8_contrast_cell_based_celltype_groups.txt step8_contrast_sample_based_all_cells.txt step8_contrast_sample_based_celltype_groups.txt step8_par.txt To modify the parameter file corresponding to Step 2 (step2_par.txt) directly in the terminal we will use Nano : nano step2_par.txt This will open step2_par.txt in the terminal and allow the user to modify the parameters. To save the modifications and exit the parameter file, type ctrl+o followed by ctrl+x .","title":"Execution parameters"},{"location":"reference/#adjustable-execution-parameters-for-the-scrnabox-pipeline","text":"Introduction Step parameters Step 1: FASTQ to expression matrix (standard track) Step 1: FASTQ to expression matrix (HTO track) Step 2: Create Seurat object and remove ambient RNA Step 3: Quality control and generation of filtered data objects Step 4: Doublet removal (standard track) Step 4: Demultiplexing and doublet detection (HTO track) Step 5: Creation of a single Seurat object from all samples Step 6: Clustering Step 7: Cluster annotation Step 8: Differential gene expression Differential Gene Expression (DGE) Contrast Matrices Cell-based DGE using all cells Cell-based DGE using cell type groups Sample-based DGE using all cells Sample-based DGE using cell type groups How to modify parameter files","title":"Adjustable execution parameters for the scRNAbox pipeline"},{"location":"reference/#introduction","text":"Prior to running each step of the scRNAbox pipeline, users are strongly encouraged to modify the execution parameters of the analysis using the adjustable, step-specific parameters text files. Upon running Step 0, adjustable text files for each step will be automatically deposited in ~/working_directory/job_info/parameters : parameters \u251c\u2500\u2500 step1_par.txt \u251c\u2500\u2500 step2_par.txt \u251c\u2500\u2500 step3_par.txt \u251c\u2500\u2500 step4_par.txt \u251c\u2500\u2500 step5_par.txt \u251c\u2500\u2500 step6_par.txt \u251c\u2500\u2500 step7_par.txt \u251c\u2500\u2500 step8_contrast_sample_based_all_cells.txt \u251c\u2500\u2500 step8_contrast_sample_based_celltype_groups.txt \u251c\u2500\u2500 step8_contrast_cell_based_all_cells.txt \u251c\u2500\u2500 step8_contrast_cell_based_celltype_groups.txt \u2514\u2500\u2500step8_par.txt To ensure replicability, a summary report file documents the execution parameters for each iteration of each Analytical Step, which is located in ~/working_directory/job_info/summary_report.txt . Note: 1) Parameters that require a character input (e.g. \"Control 1\") must be placed in quotations (\" \" or ' '). 2) Parameters that require a numerical input must not be placed in quotations (e.g. 0.50). 3) Parameters that require a \"yes\" or \"no\" answer are not case-sensitive.","title":"Introduction"},{"location":"reference/#step-parameters","text":"","title":"Step parameters"},{"location":"reference/#step-1-fastq-to-gene-expression-matrix-standard-track","text":"Parameter Default Description par_automated_library_prep No Whether or not to perform automated library prep. Alternatively, you may set this parameter to \"no\" and manually prepare the libraries. par_fastq_directory NULL Path to directory containing the FASTQ files. This directory should only contain FASTQ files for the experiment. par_sample_names NULL The sample names used to name the FASTQ files according to CellRanger nomeclature par_rename_samples Yes Whether or not you want to rename your samples. These names will be used to identify cells in the Seurat objects par_new_sample_names NULL New sample names. Make sure they are defined in the same order as 'par_sample_names' par_paired_end_seq Yes Whether or not paired-end sequencing was performed par_ref_dir_grch NULL Path to reference genome for FASTQ alignment. 10X Genomics reference genomes are available for download. For more information see the 10X Genomics documentation . par_r1_length NULL Minimum number of bases to retain for R1 sequence of gene expression par_r2_length NULL Minimum number of bases to retain for R2 sequence of gene expression par_mempercode 30 For clusters whose job managers do not support memory requests, it is possible to request memory in the form of cores. This option will scale up the number of threads requested via the MRO_THREADS variable according to how much memory a stage requires when given to the ratio of memory on your nodes. par_include_introns No Whether or not to include intronic reads in the gene expression matrix par_no_target_umi_filter No Whether or not to tirn of CellRanger's target UMI filtering subpipeline par_expect_cells NULL Expected number of cells. By default, CellRanger's auto-estimate algorithm will be used par_force_cells NULL Force the CellRanger count ipeline to use N cells. par_no_bam No Whether or not to skip the bam file generation in the CellRanger pipeline.","title":"Step 1: FASTQ to gene expression matrix (standard track)"},{"location":"reference/#step-1-fastq-to-gene-expression-matrix-hto-track","text":"Parameter Default Description par_automated_library_prep Yes Whether or not to perform automated library prep. Alternatively, you may set this parameter to \"no\" and manually prepare the libraries. par_fastq_directory NULL Path to directory containing the FASTQ files. This directory should only contain FASTQ files for the experiment. par_RNA_run_names NULL The names of the sequencing runs for the RNA assay par_HTO_run_names NULL The names of the sequencing runs for the HTO assay par_seq_run_names NULL The user-selected name for the sequencing run. These names will be used to identify cells in the Seurat objects par_paired_end_seq Yes Whether or not paired-end sequencing was performed id NULL Barcode ID which will be used to track the feature counts name NULL The user-selected name for the barcode identifier read R2 Which RNA sequencing read contains the barcode sequence. This value Will be either R1 or R2. pattern NULL The pattern of the barcode identifiers sequence NULL The nucleotide sequence associated with the barcode identifier par_ref_dir_grch NULL Path to reference genome for FASTQ alignment. 10X Genomics reference genomes are available for download. For more information see the 10X Genomics documentation . par_r1_length NULL Minimum number of bases to retain for R1 sequence of gene expression par_r2_length NULL Minimum number of bases to retain for R2 sequence of gene expression par_mempercode 30 For clusters whose job managers do not support memory requests, it is possible to request memory in the form of cores. This option will scale up the number of threads requested via the MRO_THREADS variable according to how much memory a stage requires when given to the ratio of memory on your nodes. par_include_introns No Whether or not to include intronic reads in the gene expression matrix par_no_target_umi_filter No Whether or not to tirn of CellRanger's target UMI filtering subpipeline par_expect_cells NULL Expected number of cells. By default, CellRanger's auto-estimate algorithm will be used par_force_cells NULL Force the CellRanger count ipeline to use N cells. par_no_bam No Whether or not to skip the bam file generation in the CellRanger pipeline.","title":"Step 1: FASTQ to gene expression matrix (HTO track)"},{"location":"reference/#step-2-create-seurat-object-and-remove-ambient-rna","text":"Parameter Default Description par_save_RNA Yes Whether or not to export an RNA expression matrix par_save_metadata Yes Whether or not to export a metadata dataframe par_ambient_RNA Yes Whether or not to correct the feature-barcode expression matrices for ambient RNA contamination par_min.cells_L 3 Only retain genes expressed in a minimum number of cells par_normalization.method LogNormalize Method to use for normalization par_scale.factor 10000 Scale factor for scaling the data par_selection.method vst Method for choosing the top variable features par_nfeatures 2500 Number of features to select as top variable features","title":"Step 2: Create Seurat object and remove ambient RNA"},{"location":"reference/#step-3-quality-control-and-generation-of-filtered-data-objects","text":"Parameter Default Description par_save_RNA Yes Whether or not to export an RNA expression matrix par_save_metadata Yes Whether or not to export a metadata dataframe par_seurat_object NULL If users already have a Seurat object(s), they may provide the path to a directory that contains an existing Seurat object(s) to initiate the pipeline at Step 3 par_nFeature_RNA_L 300 Only retain cells expressing a minimum number of unique RNA transcripts par_nFeature_RNA_U 10000 Only retain cells expressing a maximum number of unique RNA transcripts par_nCount_RNA_L 300 Only retain cells with a minimum number of total RNA transcripts par_nCount_RNA_U 20000 Only retain cells with a maximum number of total RNA transcripts par_mitochondria_percent_L 0 Only retain cells with a minimum percentage of mitochondrial-encoded genes par_mitochondria_percent_U 20 Only retain cells with a maximum percentage of mitochondrial-encoded genes par_ribosomal_percent_L 0 Only retain cells with a minimum percentage of ribosome genes par_ribosomal_percent_U 100 Only retain cells with a maximum percentage of ribosome genes par_remove_mitochondrial_genes No Whether or not to remove mitochondrial genes par_remove_ribosomal_genes No Whether or not to remove ribosomal genes par_remove_genes NULL If users want to remove specific genes from their data, they may define a list of gene identifiers par_regress_cell_cycle_genes No Whether or not to regress cell cycle genes par_regress_custom_genes No Whether or not to regress a custom list of genes par_regress_genes NULL List of custom genes to regress par_normalization.method LogNormalize Method to use for normalization par_scale.factor 10000 Scale factor for scaling the data par_selection.method vst Method for choosing the top variable features par_nfeatures 2500 Number of features to select as top variable features par_top 10 Number of most variable features to be reported in the csv file par_npcs_pca 30 Total Number of principal components to compute and store for principal component analysis (PCA)","title":"Step 3: Quality control and generation of filtered data objects"},{"location":"reference/#step-4-doublet-removal-standard-track","text":"Parameter Default Description par_save_RNA Yes Whether or not to export an RNA expression matrix par_save_metadata Yes Whether or not to export a metadata dataframe par_seurat_object NULL If users already have a Seurat object(s), they may provide the path to a directory that contains an existing Seurat object(s) to initiate the pipeline at Step 4 par_RunUMAP_dims 25 Number of dimensions to use as input features for uniform manifold approximation and projection (UMAP) par_RunUMAP_n.neighbors 45 Number of neighboring points used in local approximations of manifold structure par_dropDN Yes Whether or not to remove predicted doublets from downstream analyses par_PCs 25 The number of statistically significant principal components. Can be informed by elbow plot produced in Step 3 par_pN 0.25 The number of artificial doublets to generate. DoubletFinderr is largely invariant to this parameter. We suggest keeping 0.25 par_sct FALSE Logical representing whether SCTransform was used during original Seurat object pre-processing par_sample_names NULL A list of sample names for each sample in the experiement, corresponding to the expected doublet rates listed in the parameter below. Sample names should be the same as those used to produce the samples_info folder during the setup procedures. par_expected_doublet_rate NULL A vector of expected doublet rates for each sample (e.g. for a 5% expected doublet rate, write 0.05). The expected doublet rates for each sample should be listed in the same order as the sample names in the above parameter. Make sure to have as many expected doublet rates listed as you have samples.","title":"Step 4: Doublet removal (standard track)"},{"location":"reference/#step-4-demultiplexing-and-doublet-detection-hto-track","text":"Parameter Default Description par_save_RNA Yes Whether or not to export an RNA expression matrix par_save_metadata Yes Whether or not to export a metadata dataframe par_seurat_object NULL If users already have a Seurat object(s), they may provide the path to a directory that contains an existing Seurat object(s) to initiate the pipeline at Step 4 par_normalization.method CLR Method for normalizing the HTO assay par_scale.factor 1000 Scale factor for scaling the HTO assay par_selection.method vst Method for selecting the most variable features in the HTO assay par_nfeatures 5 Number of features to select as top variable features for the HTO assay. This value is dependent on the number of sample specific barcodes used in the experiment par_dims_umap 5 Number of dimensions to use as input features for uniform manifold approximation and projection (UMAP) of HTO assay par_n.neighbor 65 Number of neighboring points to use in local approximations of manifold structure par_dimensionality_reduction Yes Whether or not to perform linear dimensionality reduction on the HTO assay par_npcs_pca 30 Total Number of principal components to compute and store for principal component analysis (PCA) of HTO assay par_dropDN Yes Whether or not to remove predicted doublets and negatives from downstream analyses par_label_dropDN Doublet, Negative Labels used to identify doublet and negative droplets par_quantile 0.9 The quantile to use for droplet classification using MULTIseqDemux par_autoThresh TRUE Whether or not to perform automated threshold finding to define the best quantile for droplet classification using MULTIseqDemux par_maxiter 5 Maximum number of iterations to use if autoThresh = TRUE par_RidgePlot_ncol 3 Number of columns used to display RidgePlots, which visualizes the enrichment of barcode labels across samples par_old_antibody_label NULL If you wish to rename the barcode labels, first list the existing barcode labels in this parameter. old antibody labels can be identified in the \"_old_antibody_label_MULTIseqDemuxHTOcounts\" file produced by running Step 4 msd par_new_antibody_label NULL If you wish to rename the barcode labels, list the new labels corresponding to the old labels listed in the parameter above","title":"Step 4: Demultiplexing and doublet detection (HTO track)"},{"location":"reference/#step-5-creation-of-a-single-seurat-object-from-all-samples","text":"Parameter Default Description par_save_RNA Yes Whether or not to export an RNA expression matrix par_save_metadata Yes Whether or not to export a metadata dataframe par_seurat_object NULL If users already have a Seurat object(s), they may provide the path to a directory that contains an existing Seurat object(s) to initiate the pipeline at Step 5 par_one_seurat No Whether or not the experiment comprises of only one sequencing run. If this parameter is set to \"Yes\", set par_integrate_seurat and par_merge_seurat to \"No\". par_integrate_seurat Yes Whether or not to integrate the samples. If \"Yes\", par_merge_seurat must be \"No\". par_merge_seurat No Whether or not to merge the samples. If \"Yes\", par_integrate_seurat must be \"No\". par_DefaultAssay RNA The assay to perform normalization, scaling, and linear dimensiona reduction on. For most use cases this will be RNA. par_normalization.method LogNormalize Method to use for normalization par_scale.factor 10000 Scale factor for scaling the data par_selection.method vst Method for detecting top variable features par_nfeatures 2500 Number of features to select as top variable features par_FindIntegrationAnchors_dim 25 Which dimensions to use from the canonical correlation analysis (CCA) to specify the neighbor search space par_RunPCA_npcs 30 Total Number of principal components to compute and store for principal component analysis (PCA) par_RunUMAP_dims 25 Number of dimensions to use as input features for uniform manifold approximation and projection (UMAP) par_RunUMAP_n.neighbors 45 Number of neighboring points used in local approximations of manifold structure par_compute_jackstraw No Whether or not to perform JackStraw computation. This computation takes a long time.","title":"Step 5: Creation of a single Seurat object from all samples"},{"location":"reference/#step-6-clustering","text":"Parameter Default Description par_save_RNA Yes Whether or not to export an RNA expression matrix par_save_metadata Yes Whether or not to export a metadata dataframe par_seurat_object NULL If users already have a Seurat object, they may provide the path to the Seurat object to initiate the pipeline at Step 6 par_skip_integration No Whether or not the user skipped integration in Step 5 par_FindNeighbors_dims 25 Number of dimensions from linear dimensional reduction used as input to identify neighbours. Can be informed by the elbow and Jackstraw plots produced in Step 5 par_RunUMAP_dims 25 Number of dimensions to use as input features for uniform manifold approximation and projection (UMAP) par_FindNeighbors_k.param 45 Defines k for the k-nearest neighbor algorithm par_FindNeighbors_prune.SNN 1/15 Sets the cutoff for acceptable Jaccard index when computing the neighborhood overlap for the shared nearest-neighbour (SNN) construction par_FindClusters_resolution 0, 0.05, 0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 2.0 Value of the clustering resolution parameter. You may provide multiple resolution values par_compute_ARI Yes Whether or not you want to compute the Adjusted Rand Index (ARI) between clusters at a given clustering resolution par_RI_reps 25 Number of iterations for clustering the data at a given resolution in order to calculate the ARI","title":"Step 6: Clustering"},{"location":"reference/#step-7-cluster-annotation","text":"Annotation tool Parameter Default Description General par_save_RNA Yes Whether or not to export an RNA expression matrix General par_save_metadata Yes Whether or not to export a metadata dataframe General par_seurat_object NULL If users already have a Seurat object, they may provide the path to the Seurat object to initiate the pipeline at Step 7 General par_level_cluster integrated_snn_res.0.75 The cluster resolution that you want to annotate. If you skipped integration in Step 5, use par_level_cluster='RNA_snn_res.0.7', if you want to proceed with a clustering resolution of 0.7. Tool 1 par_run_find_marker Yes Whether or not to find marker genes for each cluster Tool 1 par_run_enrichR No Whether or not to run gene set enrichment analysis (GSEA) on the marker genes for each cluster using the EnrichR tools. Note that the HPC must have access to the internet to run GSEA. Tool 1 par_top_sel 5 Number of top markers to identify based on avg_log2FC Tool 1 par_db Descartes_Cell_Types_and_Tissue_2021, CellMarker_Augmented_2021, Azimuth_Cell_Types_2021 Character vector of EnrichR databases that define cell types. The top marker genes for each cluster will be tested for enrichment across these databases. Tool 2 par_run_module_score Yes Whether or not to compute module score for aggregated expression Tool 2 par_run_visualize_markers Yes Whether or not to visualize the expression of individual genes Tool 2 par_module_score NULL Path to the csv file containing the gene sets for the module score Tool 2 par_select_features_list NULL List of genes whose expression will be visualized individually Tool 2 par_select_features_csv NULL If you want to define multiple lists of features to visualize individually, you can do so with a csv file. The header should contain the list names and all features belonging to the same list should be in the same column. Tool 3 par_reference NULL Path defining the location of the reference Seurat object Tool 3 par_reference_name Reference An arbitrary name for the reference object. This will be used to name the metadata slot. Tool 3 par_level_celltype NULL The name of the metadata column in the reference Seurat object that defines cell types Tool 3 par_FindTransferAnchors_dim 50 Number of dimensions from linear dimensional reduction used to find transfer anchors between the reference and query Seurat objects Tool 3 par_futureglobalsmaxSize 60000 * 1024^2 This will increase your RAM usage so set this number mindfully Annotate par_annotate_resolution integrated_snn_res.0.75 Which clustering resolution you want to annotate Annotate par_name_metadata Celltypes1 The name of the metadata slot that will contain the annotations Annotate par_annotate_labels NULL A list of cluster labels. There must as many labels as clusters at the defined clustering resolution. Please refrain from using \"_\" when annotating.","title":"Step 7: Cluster annotation"},{"location":"reference/#step-8-differential-gene-expression","text":"DGE method Parameter Default Description General par_save_RNA Yes Whether or not to export an RNA expression matrix General par_save_metadata Yes Whether or not to export a metadata dataframe General par_seurat_object NULL If users already have a Seurat object, they may provide the path to the Seurat object to initiate the pipeline at Step 7 Add metadata par_merge_meta orig.ident The column from the Seurat metdata that will be used to merge the new metadata. This column must also exist in the submitted csv file contaning new metadata. Add metadata par_metadata NULL csv file containing metadata to be added to the Seurat object Cell-based DGE with all cells par_run_cell_based_all_cells Yes Whether or not to compute cell-based DGE with all cells Cell-based DGE with cell type groups par_run_cell_based_cell_type_groups Yes Whether or not to compute cell-based DGE with cell type groups Sample-based DGE with all cells par_run_sample_based_all_cells Yes Whether or not to compute sample-based DGE with all cells Sample-based DGE with cell type groups par_run_sample_based_cell_type_groups Yes Whether or not to compute sample-based DGE with cell type groups Cell-based DGE par_statistical_method MAST Which statistical framework to use for computing cell-based DGE","title":"Step 8: Differential gene expression"},{"location":"reference/#differential-gene-expression-contrast-matrices","text":"","title":"Differential Gene Expression Contrast Matrices"},{"location":"reference/#cell-based-dge-using-all-cells","text":"To perform cell-based DGE using all cells, users must fill in the step8_contrast_cell_based_all_cells.txt file located in ~/working_directory/job_info/parameters . The contrast matrix contains the following columns: contast_name: An abritrary name for the contrast meta_data_variable: The metadata slot containing the Sample IDs defined in group1 and group2 group1: A list of sample IDs to be contrasted against the sample IDs listed in group2 group2: A list of sample IDs to be contrasted against the sample IDs listed in group1 Multiple contrasts can be defined in the same file. In addition, multiple samples can be listed under group1 and group 2. For example: contrast_name meta_data_variable group1 group2 Design1 orig.ident Control1,Control2,Control3 Case1,Case2,Case3 Design3 DiseaseStatus HealthyControl Disease","title":"Cell-based DGE using all cells"},{"location":"reference/#cell-based-dge-using-cell-type-groups","text":"To perform cell-based DGE using cell type groups, users must fill in the step8_contrast_cell_based_celltype_groups.txt file located in ~/working_directory/job_info/parameters . The contrast matrix contains the following columns: contast_name: An abritrary name for the contrast meta_data_celltype: The metadata slot containing cell type annotations cell_type: The cell type used to compute DGE meta_data_variable: The metadata slot containing the Sample IDs defined in group1 and group2 group1: A list of sample IDs to be contrasted against the sample IDs listed in group2 group2: A list of sample IDs to be contrasted against the sample IDs listed in group1 Multiple contrasts can be defined in the same file. In addition, multiple samples can be listed under group1 and group 2. For example: contrast_name meta_data_celltype cell_type meta_data_variable group1 group2 Design1 Annotation1 Neuron orig.ident Control1,Control2,Control3, Case1,Case2,Case3, Design2 Annotation2 Microglia DiseaseStatus HealthyControl Disease","title":"Cell-based DGE using cell type groups"},{"location":"reference/#sample-based-dge-using-all-cells","text":"To perform sample-based DGE using all cells, users must fill in the step8_contrast_sample_based_all_cells.txt file located in ~/working_directory/job_info/parameters . The contrast matrix contains the following columns: ContrastName: An abritrary name for the contrast MainContrast: The metadata slot containing the two groups used for the main contrast (e.g. case and control) Sample_ID: The metadata slot containing the Sample IDs of the individual subjects (e.g. sample 1, sample 2, etc.) ContrastName MainContrast SampleID Design DiseaseStatus orig.ident In addition, users may add additional columns if they want to further group their samples. For example, users may wich to group samples by experimental batch: ContrastName MainContrast SampleID Batch Design DiseaseStatus orig.ident Batch_Id In this case, Batch is arbitrary, but Batch_ID must be a metadata slot.","title":"Sample-based DGE using all cells"},{"location":"reference/#sample-based-dge-using-cell-type-groups","text":"To perform sample-based DGE using all cells, users must fill in the step8_contrast_sample_based_celltype_groups.txt file located in ~/working_directory/job_info/parameters . The contrast matrix contains the following columns: ContrastName: An abritrary name for the contrast CellType: The metadata slot containing cell type annotations MainContrast: The metadata slot containing the two groups used for the main contrast (e.g. case and control) Sample_ID: The metadata slot containing the Sample IDs of the individual subjects (e.g. sample 1, sample 2, etc.) ContrastName CellType MainContrast SampleID Design Annotation1 DiseaseStatus orig.ident In addition, users may add additional columns if they want to further group their samples. For example, users may wich to group samples by experimental batch: ContrastName CellType MainContrast SampleID Batch Design Annotation1 DiseaseStatus orig.ident Batch_ID In this case, Batch is arbitrary, but Batch_ID must be a metadata slot.","title":"Sample-based DGE using cell type groups"},{"location":"reference/#modyfing-parameter-files","text":"The following section illustrates how to modify the parameter files directly from the terminal. For this tutorial, we will use the execution parameters for Step 2 as an example. To begin, navigate to the parameters directory and view its contents: cd ~/working_directory/job_info/parameters ls The following files will be available: step1_par.txt step2_par.txt step3_par.txt step4_par.txt step5_par.txt step6_par.txt step7_par.txt step8_contrast_cell_based_all_cells.txt step8_contrast_cell_based_celltype_groups.txt step8_contrast_sample_based_all_cells.txt step8_contrast_sample_based_celltype_groups.txt step8_par.txt To modify the parameter file corresponding to Step 2 (step2_par.txt) directly in the terminal we will use Nano : nano step2_par.txt This will open step2_par.txt in the terminal and allow the user to modify the parameters. To save the modifications and exit the parameter file, type ctrl+o followed by ctrl+x .","title":"Modyfing parameter files"},{"location":"tutorial/","text":"Tutorial This section contains tutorials for different data. standard HTO Data1 Data2","title":"Tutorial"},{"location":"tutorial/#tutorial","text":"This section contains tutorials for different data.","title":"Tutorial"},{"location":"tutorial/#standard","text":"","title":"standard"},{"location":"tutorial/#hto","text":"","title":"HTO"},{"location":"tutorial/#data1","text":"","title":"Data1"},{"location":"tutorial/#data2","text":"","title":"Data2"}]}