{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to scRNAbox's documentation! ScRNAbox is a single-cell RNA sequencing (scRNAseq) pipeline specifically designed for analyzing data under a High-Performance Computing (HPC) systems using the Slurm Workload Manager . ScRNAbox provides two distinct, yet highly comparable Analysis Tracks: Standard scRNAseq Cell Hashtag scRNAseq The Standard Analysis Track is designed for experiments where each sample is captured and sequenced separately, while the Cell Hashtag Analysis Track is designed for multiplexed experiments, whereby samples are tagged with sample-specific barcodes, pooled, and sequenced together. The Cell Hashtag Analysis Track is distinguished by an additional sample demultiplexing Step that assigns cells to their sample-of-origin via the sample-specific barcodes. For instructions on how to run each Analytical Step of the Standard scRNAseq and Cell Hashtag scRNAseq Analysis Track please see the respective tutorials. For a demonstration that leverages the datasets used as the application cases in the manuscript please see Dataset1: Smajic et al. and Datset2: Stoeckius et al. for the Standard scRNAseq and Cell Hashtag scRNAseq Analysis Track, respectively. Contents Installation Tutorial: Standard scRNAseq Cell Hashtag scRNAseq Processed Data Dataset1: Smajic et al. Datset2: Stoeckius et al. FAQ Reference","title":"Home"},{"location":"#welcome-to-scrnaboxs-documentation","text":"ScRNAbox is a single-cell RNA sequencing (scRNAseq) pipeline specifically designed for analyzing data under a High-Performance Computing (HPC) systems using the Slurm Workload Manager . ScRNAbox provides two distinct, yet highly comparable Analysis Tracks: Standard scRNAseq Cell Hashtag scRNAseq The Standard Analysis Track is designed for experiments where each sample is captured and sequenced separately, while the Cell Hashtag Analysis Track is designed for multiplexed experiments, whereby samples are tagged with sample-specific barcodes, pooled, and sequenced together. The Cell Hashtag Analysis Track is distinguished by an additional sample demultiplexing Step that assigns cells to their sample-of-origin via the sample-specific barcodes. For instructions on how to run each Analytical Step of the Standard scRNAseq and Cell Hashtag scRNAseq Analysis Track please see the respective tutorials. For a demonstration that leverages the datasets used as the application cases in the manuscript please see Dataset1: Smajic et al. and Datset2: Stoeckius et al. for the Standard scRNAseq and Cell Hashtag scRNAseq Analysis Track, respectively.","title":"Welcome to scRNAbox's documentation!"},{"location":"#contents","text":"Installation Tutorial: Standard scRNAseq Cell Hashtag scRNAseq Processed Data Dataset1: Smajic et al. Datset2: Stoeckius et al. FAQ Reference","title":"Contents"},{"location":"Acknowledgement/","text":"Acknowledgement The pipeline is done as part Dark Genome project, it is written by Saeid Amiri with associate of Rhalena Thomas, Sali Farhan, and Michael Fiorini at Neuro Bioinformatics Core. Copyright belongs MNI BIOINFO CORE .","title":"- Acknowledgement"},{"location":"Acknowledgement/#acknowledgement","text":"The pipeline is done as part Dark Genome project, it is written by Saeid Amiri with associate of Rhalena Thomas, Sali Farhan, and Michael Fiorini at Neuro Bioinformatics Core. Copyright belongs MNI BIOINFO CORE .","title":"Acknowledgement"},{"location":"Dataset1/","text":"Dataset1 Contents Introduction From step 2 From step 3 From step 4 From Step 5: integration From Step 6: Clustering Introduction This guide provides a concise introduction to analyzing data using the Scrnabox pipeline. The scrnabox.slurm pipeline is primarily designed to initiate Step 1, which involves running cellranger on fastq data. However, it can also be utilized with processed data, where some of the steps have already been completed. The following section explains how to use the pipeline for analyzing processed data. To begin, you need to set up the pipeline for analysis and determine the starting step based on your requirements. From Step 2 If the cellranger is already run the raw data, copy the results under ${SCRNABOX_PWD}/step1 , then follow the step2 to analyze data bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 2 From step 3 If the seurat objects are available and you want to run QC and filter cell ; save the seurate objects under ${SCRNABOX_PWD}/step2/objs and run the following codes, bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 3 \\ --nFeature_RNA_L 1000 \\ --nCount_RNA_U 65000 \\ --mitochondria_percent_U 25 From step 4 If the QC and filtering is already done, you can save under ${SCRNABOX_PWD}/step3/objs and run the following codes to get the hashtag labels by running the following code bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 4 \\ --msd T Add the old label and its new corresponding label in '${SCRNABOX_PWD}/job_output/parameters/step4_par.txt'. Run the following to run the demuplixing bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 4 From Step 5: Integration If you want to integrate the surate objects, just save them in ${SCRNABOX_PWD}/step4/objs and follow Srep 5 bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 5 From Step 6: Clustering In this step, you need to have just one seurat object which should be save in ${SCRNABOX_PWD}/step5/objs bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 6","title":"- Dataset1"},{"location":"Dataset1/#dataset1","text":"","title":"Dataset1"},{"location":"Dataset1/#contents","text":"Introduction From step 2 From step 3 From step 4 From Step 5: integration From Step 6: Clustering","title":"Contents"},{"location":"Dataset1/#introduction","text":"This guide provides a concise introduction to analyzing data using the Scrnabox pipeline. The scrnabox.slurm pipeline is primarily designed to initiate Step 1, which involves running cellranger on fastq data. However, it can also be utilized with processed data, where some of the steps have already been completed. The following section explains how to use the pipeline for analyzing processed data. To begin, you need to set up the pipeline for analysis and determine the starting step based on your requirements.","title":"Introduction"},{"location":"Dataset1/#from-step-2","text":"If the cellranger is already run the raw data, copy the results under ${SCRNABOX_PWD}/step1 , then follow the step2 to analyze data bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 2","title":"From Step 2"},{"location":"Dataset1/#from-step-3","text":"If the seurat objects are available and you want to run QC and filter cell ; save the seurate objects under ${SCRNABOX_PWD}/step2/objs and run the following codes, bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 3 \\ --nFeature_RNA_L 1000 \\ --nCount_RNA_U 65000 \\ --mitochondria_percent_U 25","title":"From step 3"},{"location":"Dataset1/#from-step-4","text":"If the QC and filtering is already done, you can save under ${SCRNABOX_PWD}/step3/objs and run the following codes to get the hashtag labels by running the following code bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 4 \\ --msd T Add the old label and its new corresponding label in '${SCRNABOX_PWD}/job_output/parameters/step4_par.txt'. Run the following to run the demuplixing bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 4","title":"From step 4"},{"location":"Dataset1/#from-step-5-integration","text":"If you want to integrate the surate objects, just save them in ${SCRNABOX_PWD}/step4/objs and follow Srep 5 bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 5","title":"From Step 5: Integration"},{"location":"Dataset1/#from-step-6-clustering","text":"In this step, you need to have just one seurat object which should be save in ${SCRNABOX_PWD}/step5/objs bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 6","title":"From Step 6: Clustering"},{"location":"Dataset2/","text":"Dataset2 Contents Introduction From step 2 From step 3 From step 4 From Step 5: integration From Step 6: Clustering Introduction This guide provides a concise introduction to analyzing data using the Scrnabox pipeline. The scrnabox.slurm pipeline is primarily designed to initiate Step 1, which involves running cellranger on fastq data. However, it can also be utilized with processed data, where some of the steps have already been completed. The following section explains how to use the pipeline for analyzing processed data. To begin, you need to set up the pipeline for analysis and determine the starting step based on your requirements. From Step 2 If the cellranger is already run the raw data, copy the results under ${SCRNABOX_PWD}/step1 , then follow the step2 to analyze data bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 2 From step 3 If the seurat objects are available and you want to run QC and filter cell ; save the seurate objects under ${SCRNABOX_PWD}/step2/objs and run the following codes, bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 3 \\ --nFeature_RNA_L 1000 \\ --nCount_RNA_U 65000 \\ --mitochondria_percent_U 25 From step 4 If the QC and filtering is already done, you can save under ${SCRNABOX_PWD}/step3/objs and run the following codes to get the hashtag labels by running the following code bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 4 \\ --msd T Add the old label and its new corresponding label in '${SCRNABOX_PWD}/job_output/parameters/step4_par.txt'. Run the following to run the demuplixing bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 4 From Step 5: Integration If you want to integrate the surate objects, just save them in ${SCRNABOX_PWD}/step4/objs and follow Srep 5 bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 5 From Step 6: Clustering In this step, you need to have just one seurat object which should be save in ${SCRNABOX_PWD}/step5/objs bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 6","title":"- Dataset2"},{"location":"Dataset2/#dataset2","text":"","title":"Dataset2"},{"location":"Dataset2/#contents","text":"Introduction From step 2 From step 3 From step 4 From Step 5: integration From Step 6: Clustering","title":"Contents"},{"location":"Dataset2/#introduction","text":"This guide provides a concise introduction to analyzing data using the Scrnabox pipeline. The scrnabox.slurm pipeline is primarily designed to initiate Step 1, which involves running cellranger on fastq data. However, it can also be utilized with processed data, where some of the steps have already been completed. The following section explains how to use the pipeline for analyzing processed data. To begin, you need to set up the pipeline for analysis and determine the starting step based on your requirements.","title":"Introduction"},{"location":"Dataset2/#from-step-2","text":"If the cellranger is already run the raw data, copy the results under ${SCRNABOX_PWD}/step1 , then follow the step2 to analyze data bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 2","title":"From Step 2"},{"location":"Dataset2/#from-step-3","text":"If the seurat objects are available and you want to run QC and filter cell ; save the seurate objects under ${SCRNABOX_PWD}/step2/objs and run the following codes, bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 3 \\ --nFeature_RNA_L 1000 \\ --nCount_RNA_U 65000 \\ --mitochondria_percent_U 25","title":"From step 3"},{"location":"Dataset2/#from-step-4","text":"If the QC and filtering is already done, you can save under ${SCRNABOX_PWD}/step3/objs and run the following codes to get the hashtag labels by running the following code bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 4 \\ --msd T Add the old label and its new corresponding label in '${SCRNABOX_PWD}/job_output/parameters/step4_par.txt'. Run the following to run the demuplixing bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 4","title":"From step 4"},{"location":"Dataset2/#from-step-5-integration","text":"If you want to integrate the surate objects, just save them in ${SCRNABOX_PWD}/step4/objs and follow Srep 5 bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 5","title":"From Step 5: Integration"},{"location":"Dataset2/#from-step-6-clustering","text":"In this step, you need to have just one seurat object which should be save in ${SCRNABOX_PWD}/step5/objs bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 6","title":"From Step 6: Clustering"},{"location":"FAQ/","text":"Frequently asked questions Possibility to consider multiple control How skip the integration step Can we run without cellraanger Possibility to consider multiple control User can redefine the genotype; in the step8, add /job_info/parameters/step8_par.txt , add new_genotype='YES and redefine the labels: new_genotype='YES' old_antibody_label=c('B0251-TotalSeqB','B0252-TotalSeqB','B0253-TotalSeqB','B0254-TotalSeqB','B0255-TotalSeqB','B0256-TotalSeqB') new_antibody_label=c('AIW002','SNCA-A53T','GBA-KO','Parkin-KO','PINK1-KO','SNCA-KO') How to skip the integration step If you have a sole sample, there is no need for the integration step; once you run step 4, go to step 6 and add par_skip_step5='YES' to the step 6 parameter, /job_info/parameters/step6_par.txt . Can we run without cellraanger. if you have the matrix file, .......","title":"FAQ"},{"location":"FAQ/#frequently-asked-questions","text":"Possibility to consider multiple control How skip the integration step Can we run without cellraanger","title":"Frequently asked questions"},{"location":"FAQ/#possibility-to-consider-multiple-control","text":"User can redefine the genotype; in the step8, add /job_info/parameters/step8_par.txt , add new_genotype='YES and redefine the labels: new_genotype='YES' old_antibody_label=c('B0251-TotalSeqB','B0252-TotalSeqB','B0253-TotalSeqB','B0254-TotalSeqB','B0255-TotalSeqB','B0256-TotalSeqB') new_antibody_label=c('AIW002','SNCA-A53T','GBA-KO','Parkin-KO','PINK1-KO','SNCA-KO')","title":"Possibility to consider multiple control"},{"location":"FAQ/#how-to-skip-the-integration-step","text":"If you have a sole sample, there is no need for the integration step; once you run step 4, go to step 6 and add par_skip_step5='YES' to the step 6 parameter, /job_info/parameters/step6_par.txt .","title":"How to skip the integration step"},{"location":"FAQ/#can-we-run-without-cellraanger","text":"if you have the matrix file, .......","title":"Can we run without cellraanger."},{"location":"HTO/","text":"ScRNAbox pipeline: Cell Hashtag scRNAseq Analysis Track Contents Introduction Setup Step 1: FASTQ pre-processing Step 2: Create Seurat object Step 3: Quality control and filtering Step 4: Demultiplexing and doublet removal Step 5: Integration and linear dimensional reduction Step 6: Clustering step 7: Cluster annotation step 8: Differential gene expression contrasts Integrating Seurat objects Introduction This guide provides instructions for analyzing single-cell RNA sequencing (scRNAseq) data using the Cell Hashtag Analysis Track of the scRNAbox pipeline. The Cell Hashtag Analysis Track is designed for multiplexed scRNAseq experiments, whereby samples are tagged with sample-specific barcodes, pooled, and sequenced together; thus, users should have FASTQ files that contain scRNAseq data from multiple samples. If instead samples were sequenced separately, resulting in unique FASTQ files for each sample, users should leverage the Standard scRNAseq Analysis Track. The main component of the scRNAbox pipeline is scrnabox.slurm , which is an open-source pipeline for scRNAseq analysis that is specifically designed to run on high-performance computing (HPC) systems using the Slurm Workload Manager . scrnabox.slurm outlines the Analytical Steps involved in a comprehensive scRNAseq analysis workflow, including FASTQ pre-processing, quality control and filtering, clustering, cluster annotation, and differential gene expression contrasts. The Analytical Steps involved in the Cell Hashtag Analysis Track of the scRNAbox pipeline are outlined in the figure below. Note: This tutorial assumes that scrnabox.slurm , cellranger , R , and the required R packages have already been installed onto the HPC system. If this is not the case, please visit Installation to do so before proceeding. If the required packages are installed, you can proceed to Setup . Setup Before running the pipeline, create a dedicated folder for the analysis (hereafter referred to as the working directory). Then, define the path of the working directory ( SCRNABOX_PWD= ) and the path to scrnabox.slurm ( SCRNABOX_HOME= ). For example: mkdir ~/working_directory cd ~/working_directory export SCRNABOX_HOME=~/scrnabox.slurm export SCRNABOX_PWD=~/working_directory For a description of the options for running scrnabox.slurm and to ensure that the path was properly defined, run the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh -h If the pipeline has been installed properly, the above command should return the folllowing: mandatory arguments: -d (--dir) = Working directory (where all the outputs will be printed) (give full path) --steps = Specify what steps, e.g., 2 to run just step 2, 2-4, run steps 2 through 4) optional arguments: -h (--help) = See helps regarding the pipeline options. --method = Choose what scRNA method you want to use; use HTO and SCRNA for for hashtag nad Standard scRNA, respectively. --nFeature_RNA_L = Lower threshold of number of unique RNA transcripts for each cell, it filters nFeature_RNA > nFeature_RNA_L. --nFeature_RNA_U = Upper threshold of number of unique RNA transcripts for each cell, it filters --nFeature_RNA_U. --nCount_RNA_L = Lower threshold for nCount_RNA, it filters nCount_RNA > nCount_RNA_L --nCount_RNA_U = Upper threshold for nCount_RNA, it filters nCount_RNA < nCount_RNA_U --mitochondria_percent_L = Lower threshold for the amount of mitochondrial transcript, it is in percent, mitochondria_percent > mitochondria_percent_L. --mitochondria_percent_U = Upper threshold for the amount of mitochondrial transcript, it is in percent, mitochondria_percent < mitochondria_percent_U. --log10GenesPerUMI_U = Upper threshold for the log number of genes per UMI for each cell, it is in percent,log10GenesPerUMI=log10(nFeature_RNA)/log10(nCount_RNA). mitochondria_percent < log10GenesPerUMI_U. --log10GenesPerUMI_L = Lower threshold for the log number of genes per UMI for each cell, log10GenesPerUMI=log10(nFeature_RNA)/log10(nCount_RNA). mitochondria_percent > log10GenesPerUMI_L. --msd = you can get the hashtag labels by running the following code --marker = Find marker. --sinfo = Do you need sample info? --fta = FindTransferAnchors --enrich = Annotation --dgelist = creates a DGEListobject from a table of counts obtained from seurate objects. --genotype = Run the genotype contrast. --celltype = Run the Genotype-cell contrast. --cont = You can directly call the contrast to the pipeline. --seulist = You can directly call the list of seurat objects to the pipeline. Next, run the pipeline initiation Step ( --steps 0 ) and define the Standard scRNAseq Analysis Track ( --method HTO ) using the following command from the working directory: cd ~/working_directory bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 0 \\ --method HTO After running the pipeline initiation Step, the structure of the working directory should be as follows: \u251c\u2500\u2500 working_directory \u251c\u2500\u2500 job_info \u251c\u2500\u2500 configs \u251c\u2500\u2500 logs \u251c\u2500\u2500 parameters The configs/ directory contains the scrnabox_config.ini file which allows users to specify their job allocations (memory, threads, and walltime) for each Analytical Step using the Slurm Workload Manager; The logs/ directory records the events of each Analytical Step; The parameters/ directory contains adjustable, Step-specific text files which allow users to define the execution parameters for each Analytical Step. Next, navigate to the scrnabox_config.ini file in ~/working_directory/job_info/configs to define the path to the R library ( R_LIB_PATH= ), the version of R ( R_VERSION= ), and the path to CellRanger ( MODULECELLRANGER= ). For example: MODULECELLRANGER=mugqic/cellranger/5.0.1 R_VERSION=4.2.1 R_LIB_PATH=Path_to_R_library Finally, in preparation for Step 1 (FASTQ pre-processing with CellRanger) users must create library.csv and feature_ref.csv files for each of their sequencing runs. library.csv The library.csv file defines the necessary information of the FASTQ files for the experiment, including the gene expression and antibody assays. The structure of the library.csv file should be: fastqs,sample,library_type ~/fastqs/,CTRL1_GEX,Gene Expression ~/fastqs/,CTRL1_HTO,Antibody Capture The fastqs column defines the path to the directory that contains the FASTQ files for the experiment. The sample column defines the sample name of the corresponding FASTQ file. Please note that FASTQ files must be named according to standard CellRanger nomenclature. For example, \"CTRL1_S1_L001_R1_001.fastq\". For more information please visit CellRanger's documentation . The library_type column defines the assay type. For the Cell Hashtag Analysis track, each sequencing run should have a \"Gene Expression\" and \"Antibody Capture\" assay. For more information, please visit CellRanger's documentation For example, if the experiment comprises three sequencing runs the following steps should be taken: 1) Navigate to the working directory and create a samples_info folder: cd ~/working_directory mkdir samples_info 2) Navigate to the samples_info folder and create a folder for each sequencing run: cd samples_info mkdir run1 mkdir run2 mkdir run3 3) Navigate to the folder for each sequencing and create the library.csv file. After performing steps 1-3 above, the structure of the samples_info folder for an experiment with three sequencing runs should be: \u251c\u2500\u2500 working_directory \u251c\u2500\u2500 samples_info \u251c\u2500\u2500 run1 \u251c\u2500\u2500 library.csv \u251c\u2500\u2500 run2 \u251c\u2500\u2500 library.csv \u251c\u2500\u2500 run3 \u251c\u2500\u2500 library.csv feature_ref.csv The feature_ref.csv file defines the necessary information for processing the sample-specific barcodes that will eventually be used to demultiplex the pooled samples. For example, if there are four samples pooled together with four unique barcode identifiers, the structure of the feature_ref.csv file should be: id,name,read,pattern,sequence,feature_type Hash1,B0251_TotalSeqB,R2,5PNNNNNNNNNN(BC),GTCAACTCTTTAGCG,Antibody Capture Hash2,B0252_TotalSeqB,R2,5PNNNNNNNNNN(BC),TGATGGCCTATTGGG,Antibody Capture Hash3,B0253_TotalSeqB,R2,5PNNNNNNNNNN(BC),TTCCGCCTCTCTTTG,Antibody Capture Hash4,B0254_TotalSeqB,R2,5PNNNNNNNNNN(BC),AGTAAGTTCAGCGTA,Antibody Capture The id column defines the barcode ID which will be used to track the feature counts. The name column defines the arbitrary name for the barcode identifier. The read column defines which RNA sequencing read contains the barcode sequence. This value Will be either R1 or R2. The pattern column defines the pattern of the barcode identifiers. For more information please visit the 10X Genomics documentation The sequence column defines nucleotide sequence associated with the barcode identifier. The feature_type column defines the type of feature used for sample identification. Please ensure that the feature_type in the feature_ref.csv file matches a library_type in the library.csv file. For more information regarding the preparation of the feature_ref.csv , please see CellRanger's documentation . feature_ref.csv files can be prepared the same way as the library.csv files. After producing the feature_ref.csv for each sequncing run, the structure of the samples_info folder for an experiment with three sequencing runs should be: \u251c\u2500\u2500 working_directory \u251c\u2500\u2500 samples_info \u251c\u2500\u2500 run1 \u251c\u2500\u2500 library.csv \u251c\u2500\u2500 feature_ref.csv \u251c\u2500\u2500 run2 \u251c\u2500\u2500 library.csv \u251c\u2500\u2500 feature_ref.csv \u251c\u2500\u2500 run3 \u251c\u2500\u2500 library.csv \u251c\u2500\u2500 feature_ref.csv Upon completing the above steps to setup the pipeline, users can run their analysis. Please note that if you do not have access to FASTQ files for your experiment, you may intiate the pipeline at which ever Analytical Step takes your data object as input. In the case where FASTQ files are not available, users do not have to create the samples_info folder. For more information see Processed Data . scRNAbox Analytical Steps Specific Analytical Steps are called using the --steps flag. The output of each Analytical Step is deposited into its respective folder within the working directory (e.g. ~/working_directory/step1 ). Prior to running each Analytical Step, users are strongly encouraged to modify the execution parameters of the analysis using the adjustable, Step-specific parameters text files. The parameters text files are located in ~/working_directory/job_info/parameters . For instructions on how to modify these text files please see FAQ . To ensure replicability, a summary report file documents the execution parameters for each iteration of each analytical Step, which is located in ~/working_directory/job_info/summary_report.txt . For detailed descriptions of each Analytical Step please see our pre-print manuscript. Step 1: FASTQ pre-processing In this step, feature-barcode expression matrices are generated from FASTQ files using the CellRanger counts pipeline. Given that CellRanger runs a user interface, it is recommended to run Step 1 in a 'screen'. The following parameters are adjustable for Step 1: Parameter Default Description REF_DIR_GRCH NULL Path to reference genome for FASTQ alignment. 10X Genomics reference genomes are available for download. For more information see their documentation . R1LENGTH NULL Minimum number of bases to retain for R1 sequence of gene expression MEMPERCORE 30 For clusters whose job managers do not support memory requests, it is possible to request memory in the form of cores. This option will scale up the number of threads requested via the MRO_THREADS variable according to how much memory a stage requires when given to the ratio of memory on your nodes. To run Step 1, use the following command: screen -S run_scrnabox bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 1 The resulting output files are deposited into ~/working_directory/step1 Parameter names need to be updated. Step 2: Create Seurat object In this step, CellRanger-generated feature-barcode expression matrices are transformed into Seurat objects. Genes expressed in less than a minimum number of cells and cells expressing less than a minimum number of genes can be filtered. The following parameters are adjustable for Step 2: Parameter Default Description Save_RNA No Whether or not to export an RNA expression matrix Save_metadata No Whether or not to export a metadata dataframe count_matrices NULL If users skipped Step 1, the may provide the path to a directory that contains existing feature-barcode expression matrices to initiate the pipeline at Step 2 min.cells_L 0 Only retain genes expressed in a minimum number of cells min.features_L 0 Only retain cells expressing a minimum number of genes To run Step 2, use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 2 The resulting output files are deposited into ~/working_directory/step2 Parameter names need to be updated and the code for ambient RNA detection must be added. Step 3: Quality control and filtering Low quality cells are filtered based on the user-defined thresholds for the number of genes detected per cell, number of unique transcripts detected per cell, percentage of mitochondrial-encoded transcripts, and percentage of ribosomal-encoded transcripts. Mitochondrial- and ribosomal-encoded genes can be filtered out, as well as a custom user-defined list of genes. Finally, normalization and scaling is performed on the individual Seurat objects prior to cell-cycle scoring. The following parameters are adjustable for Step 3: Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_seurat_object NULL If users skipped Steps 1 and 2, the may provide the path to a directory that contains existing Seurat objects to initiate the pipeline at Step 3 par_nFeature_RNA_L NULL Only retain cells expressing a minimum number of genes par_nFeature_RNA_U NULL Only retain cells expressing a maximum number of genes par_nCount_RNA_L NULL Only retain cells with a minimum number of unique transcripts par_nCount_RNA_U NULL Only retain cells with a maximum number of unique transcripts par_mitochondria_percent_L NULL Only retain cells with a minimum percentage of mitochondrial genes par_mitochondria_percent_U NULL Only retain cells with a maximum percentage of mitochondrial genes par_ribosomal_percent_L NULL Only retain cells with a minimum percentage of ribosomal genes par_ribosomal_percent_U NULL Only retain cells with a maximum percentage of ribosomal genes par_log10GenesPerUMI_L NULL Only retain cells with a minimum number of genes per unique molecular identifier par_log10GenesPerUMI_U NULL Only retain cells with a maximum number of genes per unique molecular identifier par_remove_mitochondrial_genes Yes Whether or not to remove mitochondrial genes par_remove_ribosomal_genes Yes Whether or not to remove ribosomal genes par_remove_genes NULL If users want to remove specific genes from their data, they may define a list of gene identifiers par_normalization.method LogNormalize Method to use for normalization par_scale.factor 10000 Scale factor for scaling the data par_selection.method vst Method for choosing the top variable features par_nfeatures 2500 Number of features to select as top variable features par_top 10 Number of most variable features to be reported in the csv file par_npcs_pca 30 Total Number of principal components to compute and store for principal component analysis (PCA) par_cells 500 Number of cells to include in Seurat's dimheatmap function par_dims 12 Number of dimensions to include in Seurat's dimheatmap function par_dims_umap 10 Number of dimensions to use as input features for uniform manifold approximation and projection (UMAP) par_n.neighbors 65 Number of neighboring points to use in local approximations of manifold structure To run Step 3, use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 3 The resulting output files are deposited into ~/working_directory/step3 Step 4: Demultiplexing and doublet removal Seurat\u2019s implementation (MULTIseqDemux) of the tag assignment algorithm outlined in Multi-seq is used to demultiplex pooled samples and identify doublets according to the expression matrices of the sample-specific barcodes (McGinnis et al 2019). The following parameters are adjustable for Step 4: Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_normalization.method CLR Method for normalizing the HTO assay par_scale.factor 1000 Scale factor for scaling the HTO assay par_selection.method vst Method for selecting the most variable features in the HTO assay par_nfeatures 5 Number of features to select as top variable features for the HTO assay. This value is dependent on the number of sample specific barcodes used in the experiment par_dims_umap 5 Number of dimensions to use as input features for uniform manifold approximation and projection (UMAP) of HTO assay par_n.neighbor 65 Number of neighboring points to use in local approximations of manifold structure par_dimensionality_reduction Yes Whether or not to perform linear dimensionality reduction on the HTO assay par_npcs_pca 30 Total Number of principal components to compute and store for principal component analysis (PCA) of HTO assay par_dropDN Yes Whether or not to remove predicted doublets and negatives from downstream analyses par_label_dropDN Doublet, Negative Labels used to identify doublet and negative droplets par_quantile 0.9 The quantile to use for droplet classification using MULTIseqDemux par_autoThresh TRUE Whether or not to perform automated threshold finding to define the best quantile for droplet classification using MULTIseqDemux par_maxiter 5 Maximum number of iterations to use if autoThresh = TRUE par_RidgePlot_ncol 3 Number of columns used to display RidgePlots, which visualizes the enrichment of barcode labels across samples par_old_antibody_label NULL If you wish to rename the barcode labels, first list the existing barcode labels in this parameter. old antibody labels can be identified in the \"_old_antibody_label_MULTIseqDemuxHTOcounts\" file produced by running Step 4 msd par_new_antibody_label NULL If you wish to rename the barcode labels, list the new labels corresponding to the old labels listed in the parameter above To perform demultiplexing and doublet detection, the first step is to obtain the barcode labels used in the analysis by running the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 4 \\ --msd T The names of the existing barcode labels can be revised to be more descriptive in the execution parameters of this Step (par_old_antibody_label; par_new_antibody_label) Next, perform demultiplexing and doublet detection by running the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 4 The resulting output files are deposited into ~/working_directory/step4 Step 5: Integration and linear dimensional reduction Individual Seurat objects are integrated to enable the joint analysis across sequencing runs using Seurat's integration algorithm (Stuart et al. 2019); if experiments are limited to a single sequencing run, the integration Step can be bypassed. Normalization, scaling, and Linear dimensional reduction is then performed on the resulting Seurat object to inform the optimal parameters for clustering in Step 6. The following parameters are adjustable for Step 5: Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_skip_integration No Whether or not to skip integration. This is applicable for experiments that comprises of only one sequencing run. par_FindIntegrationAnchors_dim 25 Which dimensions to use from the canonical correlation analysis (CCA) to specify the neighbor search space par_DefaultAssay RNA The assay to perform normalization, scaling, and linear dimensiona reduction on. For most use cases this will be RNA. par_normalization.method LogNormalize Method to use for normalization par_scale.factor 1000 Scale factor for scaling the data par_selection.method vst Method for detecting top variable features par_nfeatures 2500 Number of features to select as top variable features par_RunUMAP_n.neighbors 65 Number of neighboring points used in local approximations of manifold structure par_RunPCA_npcs 30 Total Number of principal components to compute and store for principal component analysis (PCA) par_RunUMAP_dims 10 Number of dimensions to use as input features for uniform manifold approximation and projection (UMAP) par_compute_jackstraw No Whether or not to perform JackStraw computation. This computation takes a long time. To run Step 5, use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 5 The resulting output files are deposited into ~/working_directory/step5 Step 6: Clustering Clustering is performed to define groups of cells with similar expression profiles using the graph-based clustering approach implemented in the Seurat framework (Macosko et al. 2015). The following parameters are adjustable for Step 6: Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_skip_step5 No Whether or not the user skipped integration in Step 5 par_FindNeighbors_dims 30 Number of dimensions from linear dimensional reduction used as input to identify neighbours. Can be informed by the elbow and Jackstraw plots produced in Step 5 par_FindNeighbors_k.param 60 Defines k for the k-nearest neighbor algorithm par_FindNeighbors_prune.SNN 1/15 Sets the cutoff for acceptable Jaccard index when computing the neighborhood overlap for the shared nearest-neighbour (SNN) construction par_FindClusters_resolution 0.1 to 0.9, in intervals of 0.1 Value of the clustering resolution parameter. You may provide multiple resolution values par_compute_ARI Yes Whether or not you want to compute the Adjusted Rand Index (ARI) between clusters at a given clustering resolution par_RI_reps 100 Number of iterations for clustering the data at a given resolution in order to calculate the ARI To run Step 6, use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 6 The resulting output files are deposited into ~/working_directory/step6 Step 7: Cluster annotation Cell populations, or clusters, with similar expression profiles are annotated to define cell types by three distinct methods: Method 1. Cluster marker gene set enrichment analysis (GSEA) : Seurat's FindAllMarkers function is used to identify differentially expressed marker genes (DEG) by the Wilcoxon rank-sum test (Macosko et al. 2015). DEGs in the positive direction (Log2 fold-change > 0.00) are then tested for enrichment across user-defined gene set libraries that define cell types using the EnrichR tool (Chen et al. 2013). Method 2. Module score : Seurat\u2019s implementation ( AddModuleScore ) of Tirosh et al.\u2019s algorithm is used to comparatively quantify the expression of gene sets across clusters at the single-cell level (Tirosh et al. 2016). Users must define their desired gene sets in the parameters file of Step 7. Gene sets should be defined in a csv file, where the column names correspond to the arbitrary name of the gene set and the corresponding rows define the genes in the gene set. For example: gene_set_1 gene_set_2 gene_set_3 CLDN5 IFITM3 TM4SF1 ANGPT2 EGFL7 IGFBP FLT1 A2M GIMAP7 DEPP1 SOD2 EMP2 TMSB10 PODXL B2M HLA-E VWF BST2 SLCO4A1 PECAM1 BSG TGM2 SLC2A3 PARP14 IFI27 TSC22D1 NFKBIA MT2A HLA-B ID3 EPAS1 IFITM2 Method 3. Reference-based annotation : Seurat's FindTransferAnchors and TransferData functions are used to leverage cell-type annotations from a reference Seurat object and generate annotation predictions for the query dataset (Macosko et al. 2015). User's must define the location of their referene Seurat object in the parameters file of Step 7. In addition, scRNAbox allows users to visualize the expression of select features at the cluster or cell level via a user-provided list of gene identifiers in order to further inform the cellular species that make up specific clusters. The following parameters are adjustable for Step 7: Parameter Default Description (the cluster annotation method associated with the parameter is shown) par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_level_cluster integrated_snn_res.0.7 The cluster resolution that you want to use for downstream analyses. If you skipped integration in Step 5, use par_level_cluster='RNA_snn_res.0.7', if you want to proceed with a clustering resolution of 0.7 par_level_genotype MULTI_ID_Lables Name of the metadata column in your Seurat object that describes the sample names par_top_sel 5 Method 1: Number of top markers to identify based on avg_log2FC par_db Descartes_Cell_Types_and_Tissue_2021, CellMarker_Augmented_2021, Azimuth_Cell_Types_2021 Method 1: Character vector of EnrichR databases that define cell types. The top marker genes for each cluster will be tested for enrichment across these databases. par_compute_module_score Yes Method 2: Whether or not to perform the module score computation par_compute_module_score Yes Method 2: Whether or not to perform the module score computation par_module_score NULL Method 2: Path defining the location of the directory that contains the csv file of the gene sets used to compute the module score par_reference NULL Method 3: Path defining the location of the reference Seurat object par_level_celltype NULL Method 3: The name of the metadata column in the reference Seurat object that defines cell types par_FindTransferAnchors_dim 10 Method 3: Number of dimensions from linear dimensional reduction used to find transfer anchors between the reference and query Seurat objects par_futureglobalsmaxSize 50000 * 1024^2 Method 3: This will increase your RAM usage so set this number mindfully par_visualize_select_features No Visualize select features: Whether or not to visualize select features par_select_features NULL Visualize select features: list of gene identifiers to visualize the expression of select features To identify cluster marker genes ( Method 1 ), compute the module score for user-defined gene sets ( Method 2 ), and visualize select features , use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --marker T Then, to test the top cluster marker genes for enrichment across gene set libraries that define cell types ( Method 1 ), use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --enrich T Please note that in order to test the cluster marker genes for enrichment across EnrichR libraries, the HPC must have access to the internet. If your HPC cannot access the internet, it is possible to run the enrichment step on your local machine directly in R. To do so, begin by downloading the Step 6 Seurat RDS object ( ~/working_directory/step6/objs6/seu_step6.rds ) and cluster marker RDS object ( ~/working_directory/step7/info7/marker/ClusterMarkers.rds ) to your computer using the following commands: scp username@beluga.computecanada.ca:~/working_directory/step7/info7/marker/ClusterMarkers.rds ~/Desktop/working_directory scp username@beluga.computecanada.ca:~/working_directory/step6/objs6/seu_step6.rds ~/Desktop/working_directory Then run the follwing code in R: SCRNABOX_PWD <- \"~/Desktop/working_directory\" dir.create(\"SCRNABOX_PWD/step7/annot\") level_cluster='integrated_snn_res.0.7' ClusterMarkers='SCRNABOX_PWD/step7/info7/ClusterMarkers.rds' PWD='SCRNABOX_PWD/step7/annot/' PSUE='SCRNABOX_PWD/step6/objs6/seu_step6.rds' top_sel=5 db <- c('Descartes_Cell_Types_and_Tissue_2021','CellMarker_Augmented_2021','Azimuth_Cell_Types_2021') scrnaboxR::annotation(level_cluster,ClusterMarkers,PWD,PSUE,top_sel,db) To perform reference-based annotation ( Method 3 ), run the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --fta T The resulting output files are deposited into ~/working_directory/step7 . Step 8: Differential gene expression contrasts This step performs differetial gene expression (DGE) analyses according to user-defined contrasts. Contrast can be performed between samples (e.g. case vs control; sample-sample contrasts ) or between samples, stratified by cell type (e.g. case vs control for excitatory neurons only; sample-cell contrasts ). The following parameters are adjustable for Step 8: Parameter Default Description (the cluster annotation method associated with the parameter is shown) par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_level_cluster integrated_snn_res.0.7 The cluster resolution that you used in the cluster annotation module. If you skipped integration in Step 5, use par_level_cluster='RNA_snn_res.0.7', if you want to proceed with a clustering resolution of 0.7 par_step8_clus_label NULL List of user-currated cluster labels obtained from the annotation module. Make sure to have the same number of labels as clusters at the desired clustering resolution. par_new_genotype yes Whether or not you want to add new sample labels to simplify the contrasts. For example, you may wish to set both control1 and control2 as control. par_old_antibody_label NULL list of old sample labels (i.e. those used to create the samples_info folder in the setup procedures) par_new_antibody_label NULL list of new sample labels corresponding to the old sample labels defined in the parameter above The first step of the DGE contrasts module is to create a DGEListobject. This step may require alot of RAM, we suggest 3*size(seu_int_clu.rds). Users can adjust the RAM in the scrnabox_config.ini file located in ~/working_directory/job_info/configs . To create a DGEListobject, run the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --dgelist T The next step is to perform DGE contrasts. As mentioned, useers can perform sample-sample contrasts or sample-cell contrasts To perform sample-sample contrasts , users must first modify the step8_contrast_genotype.txt contrast matrix located in ~/working_directory/job_info/parameters . The contrast matrix comprises three columns that define the arbitrary name of the contrast (cont_name), the control sample (control), and the case sample (versus). For example: cont_name control versus design1 control case1,case2,case3,case4,case5 design2 control case1 design3 control case2 design4 control case3 design5 control case4 design6 control case5 design7 control case1,case2,case3,case4 design8 control case1,case2,case3 design9 control case1,case2 To perform sample-sample contrasts , run the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --genotype T To perform sample-cell contrasts , users must first modify the step8_contrast_celltype.txt contrast matrix located in ~/working_directory/job_info/parameters . The contrast matrix comprises four columns that define the arbitrary name of the contrast (cont_name), the cell type (cell), the control sample (control), and the case sample (versus). For example: cont_name cell control versus design1 excitatory_neuron control case1,case2,case3,case4,case5 design2 excitatory_neuron control case1 design3 excitatory_neuron control case2 design4 excitatory_neuron control case3 design5 excitatory_neuron control case4 design6 excitatory_neuron control case5 design7 excitatory_neuron control case1,case2,case3,case4 design8 excitatory_neuron control case1,case2,case3 design9 excitatory_neuron control case1,case2 To perform sample-cell contrasts , run the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --celltype T The resulting output files are deposited into ~/working_directory/step8 . Note: that if you have a large number of contrasts to run, it may be more efficient to split them up and submit batch jobs instead. Integrating seurat objects To combine different seurat objects, you can run the following codes. LISTOFSEU=~/list.txt bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps integrate \\ --seulist ${LISTOFSEU} LISTOFSEU includes the path of seurate files, put them in different lines. By default, the pipeline standardize the seurat objects before integrating, you can change the default in ${SCRNABOX_PWD}/job_info/parameters/stepint_par.txt .","title":"- Cell hashtags"},{"location":"HTO/#scrnabox-pipeline-cell-hashtag-scrnaseq-analysis-track","text":"","title":"ScRNAbox pipeline: Cell Hashtag scRNAseq Analysis Track"},{"location":"HTO/#contents","text":"Introduction Setup Step 1: FASTQ pre-processing Step 2: Create Seurat object Step 3: Quality control and filtering Step 4: Demultiplexing and doublet removal Step 5: Integration and linear dimensional reduction Step 6: Clustering step 7: Cluster annotation step 8: Differential gene expression contrasts Integrating Seurat objects","title":"Contents"},{"location":"HTO/#introduction","text":"This guide provides instructions for analyzing single-cell RNA sequencing (scRNAseq) data using the Cell Hashtag Analysis Track of the scRNAbox pipeline. The Cell Hashtag Analysis Track is designed for multiplexed scRNAseq experiments, whereby samples are tagged with sample-specific barcodes, pooled, and sequenced together; thus, users should have FASTQ files that contain scRNAseq data from multiple samples. If instead samples were sequenced separately, resulting in unique FASTQ files for each sample, users should leverage the Standard scRNAseq Analysis Track. The main component of the scRNAbox pipeline is scrnabox.slurm , which is an open-source pipeline for scRNAseq analysis that is specifically designed to run on high-performance computing (HPC) systems using the Slurm Workload Manager . scrnabox.slurm outlines the Analytical Steps involved in a comprehensive scRNAseq analysis workflow, including FASTQ pre-processing, quality control and filtering, clustering, cluster annotation, and differential gene expression contrasts. The Analytical Steps involved in the Cell Hashtag Analysis Track of the scRNAbox pipeline are outlined in the figure below. Note: This tutorial assumes that scrnabox.slurm , cellranger , R , and the required R packages have already been installed onto the HPC system. If this is not the case, please visit Installation to do so before proceeding. If the required packages are installed, you can proceed to Setup .","title":"Introduction"},{"location":"HTO/#setup","text":"Before running the pipeline, create a dedicated folder for the analysis (hereafter referred to as the working directory). Then, define the path of the working directory ( SCRNABOX_PWD= ) and the path to scrnabox.slurm ( SCRNABOX_HOME= ). For example: mkdir ~/working_directory cd ~/working_directory export SCRNABOX_HOME=~/scrnabox.slurm export SCRNABOX_PWD=~/working_directory For a description of the options for running scrnabox.slurm and to ensure that the path was properly defined, run the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh -h If the pipeline has been installed properly, the above command should return the folllowing: mandatory arguments: -d (--dir) = Working directory (where all the outputs will be printed) (give full path) --steps = Specify what steps, e.g., 2 to run just step 2, 2-4, run steps 2 through 4) optional arguments: -h (--help) = See helps regarding the pipeline options. --method = Choose what scRNA method you want to use; use HTO and SCRNA for for hashtag nad Standard scRNA, respectively. --nFeature_RNA_L = Lower threshold of number of unique RNA transcripts for each cell, it filters nFeature_RNA > nFeature_RNA_L. --nFeature_RNA_U = Upper threshold of number of unique RNA transcripts for each cell, it filters --nFeature_RNA_U. --nCount_RNA_L = Lower threshold for nCount_RNA, it filters nCount_RNA > nCount_RNA_L --nCount_RNA_U = Upper threshold for nCount_RNA, it filters nCount_RNA < nCount_RNA_U --mitochondria_percent_L = Lower threshold for the amount of mitochondrial transcript, it is in percent, mitochondria_percent > mitochondria_percent_L. --mitochondria_percent_U = Upper threshold for the amount of mitochondrial transcript, it is in percent, mitochondria_percent < mitochondria_percent_U. --log10GenesPerUMI_U = Upper threshold for the log number of genes per UMI for each cell, it is in percent,log10GenesPerUMI=log10(nFeature_RNA)/log10(nCount_RNA). mitochondria_percent < log10GenesPerUMI_U. --log10GenesPerUMI_L = Lower threshold for the log number of genes per UMI for each cell, log10GenesPerUMI=log10(nFeature_RNA)/log10(nCount_RNA). mitochondria_percent > log10GenesPerUMI_L. --msd = you can get the hashtag labels by running the following code --marker = Find marker. --sinfo = Do you need sample info? --fta = FindTransferAnchors --enrich = Annotation --dgelist = creates a DGEListobject from a table of counts obtained from seurate objects. --genotype = Run the genotype contrast. --celltype = Run the Genotype-cell contrast. --cont = You can directly call the contrast to the pipeline. --seulist = You can directly call the list of seurat objects to the pipeline. Next, run the pipeline initiation Step ( --steps 0 ) and define the Standard scRNAseq Analysis Track ( --method HTO ) using the following command from the working directory: cd ~/working_directory bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 0 \\ --method HTO After running the pipeline initiation Step, the structure of the working directory should be as follows: \u251c\u2500\u2500 working_directory \u251c\u2500\u2500 job_info \u251c\u2500\u2500 configs \u251c\u2500\u2500 logs \u251c\u2500\u2500 parameters The configs/ directory contains the scrnabox_config.ini file which allows users to specify their job allocations (memory, threads, and walltime) for each Analytical Step using the Slurm Workload Manager; The logs/ directory records the events of each Analytical Step; The parameters/ directory contains adjustable, Step-specific text files which allow users to define the execution parameters for each Analytical Step. Next, navigate to the scrnabox_config.ini file in ~/working_directory/job_info/configs to define the path to the R library ( R_LIB_PATH= ), the version of R ( R_VERSION= ), and the path to CellRanger ( MODULECELLRANGER= ). For example: MODULECELLRANGER=mugqic/cellranger/5.0.1 R_VERSION=4.2.1 R_LIB_PATH=Path_to_R_library Finally, in preparation for Step 1 (FASTQ pre-processing with CellRanger) users must create library.csv and feature_ref.csv files for each of their sequencing runs.","title":"Setup"},{"location":"HTO/#librarycsv","text":"The library.csv file defines the necessary information of the FASTQ files for the experiment, including the gene expression and antibody assays. The structure of the library.csv file should be: fastqs,sample,library_type ~/fastqs/,CTRL1_GEX,Gene Expression ~/fastqs/,CTRL1_HTO,Antibody Capture The fastqs column defines the path to the directory that contains the FASTQ files for the experiment. The sample column defines the sample name of the corresponding FASTQ file. Please note that FASTQ files must be named according to standard CellRanger nomenclature. For example, \"CTRL1_S1_L001_R1_001.fastq\". For more information please visit CellRanger's documentation . The library_type column defines the assay type. For the Cell Hashtag Analysis track, each sequencing run should have a \"Gene Expression\" and \"Antibody Capture\" assay. For more information, please visit CellRanger's documentation For example, if the experiment comprises three sequencing runs the following steps should be taken: 1) Navigate to the working directory and create a samples_info folder: cd ~/working_directory mkdir samples_info 2) Navigate to the samples_info folder and create a folder for each sequencing run: cd samples_info mkdir run1 mkdir run2 mkdir run3 3) Navigate to the folder for each sequencing and create the library.csv file. After performing steps 1-3 above, the structure of the samples_info folder for an experiment with three sequencing runs should be: \u251c\u2500\u2500 working_directory \u251c\u2500\u2500 samples_info \u251c\u2500\u2500 run1 \u251c\u2500\u2500 library.csv \u251c\u2500\u2500 run2 \u251c\u2500\u2500 library.csv \u251c\u2500\u2500 run3 \u251c\u2500\u2500 library.csv","title":"library.csv"},{"location":"HTO/#feature_refcsv","text":"The feature_ref.csv file defines the necessary information for processing the sample-specific barcodes that will eventually be used to demultiplex the pooled samples. For example, if there are four samples pooled together with four unique barcode identifiers, the structure of the feature_ref.csv file should be: id,name,read,pattern,sequence,feature_type Hash1,B0251_TotalSeqB,R2,5PNNNNNNNNNN(BC),GTCAACTCTTTAGCG,Antibody Capture Hash2,B0252_TotalSeqB,R2,5PNNNNNNNNNN(BC),TGATGGCCTATTGGG,Antibody Capture Hash3,B0253_TotalSeqB,R2,5PNNNNNNNNNN(BC),TTCCGCCTCTCTTTG,Antibody Capture Hash4,B0254_TotalSeqB,R2,5PNNNNNNNNNN(BC),AGTAAGTTCAGCGTA,Antibody Capture The id column defines the barcode ID which will be used to track the feature counts. The name column defines the arbitrary name for the barcode identifier. The read column defines which RNA sequencing read contains the barcode sequence. This value Will be either R1 or R2. The pattern column defines the pattern of the barcode identifiers. For more information please visit the 10X Genomics documentation The sequence column defines nucleotide sequence associated with the barcode identifier. The feature_type column defines the type of feature used for sample identification. Please ensure that the feature_type in the feature_ref.csv file matches a library_type in the library.csv file. For more information regarding the preparation of the feature_ref.csv , please see CellRanger's documentation . feature_ref.csv files can be prepared the same way as the library.csv files. After producing the feature_ref.csv for each sequncing run, the structure of the samples_info folder for an experiment with three sequencing runs should be: \u251c\u2500\u2500 working_directory \u251c\u2500\u2500 samples_info \u251c\u2500\u2500 run1 \u251c\u2500\u2500 library.csv \u251c\u2500\u2500 feature_ref.csv \u251c\u2500\u2500 run2 \u251c\u2500\u2500 library.csv \u251c\u2500\u2500 feature_ref.csv \u251c\u2500\u2500 run3 \u251c\u2500\u2500 library.csv \u251c\u2500\u2500 feature_ref.csv Upon completing the above steps to setup the pipeline, users can run their analysis. Please note that if you do not have access to FASTQ files for your experiment, you may intiate the pipeline at which ever Analytical Step takes your data object as input. In the case where FASTQ files are not available, users do not have to create the samples_info folder. For more information see Processed Data .","title":"feature_ref.csv"},{"location":"HTO/#scrnabox-analytical-steps","text":"Specific Analytical Steps are called using the --steps flag. The output of each Analytical Step is deposited into its respective folder within the working directory (e.g. ~/working_directory/step1 ). Prior to running each Analytical Step, users are strongly encouraged to modify the execution parameters of the analysis using the adjustable, Step-specific parameters text files. The parameters text files are located in ~/working_directory/job_info/parameters . For instructions on how to modify these text files please see FAQ . To ensure replicability, a summary report file documents the execution parameters for each iteration of each analytical Step, which is located in ~/working_directory/job_info/summary_report.txt . For detailed descriptions of each Analytical Step please see our pre-print manuscript.","title":"scRNAbox Analytical Steps"},{"location":"HTO/#step-1-fastq-pre-processing","text":"In this step, feature-barcode expression matrices are generated from FASTQ files using the CellRanger counts pipeline. Given that CellRanger runs a user interface, it is recommended to run Step 1 in a 'screen'. The following parameters are adjustable for Step 1: Parameter Default Description REF_DIR_GRCH NULL Path to reference genome for FASTQ alignment. 10X Genomics reference genomes are available for download. For more information see their documentation . R1LENGTH NULL Minimum number of bases to retain for R1 sequence of gene expression MEMPERCORE 30 For clusters whose job managers do not support memory requests, it is possible to request memory in the form of cores. This option will scale up the number of threads requested via the MRO_THREADS variable according to how much memory a stage requires when given to the ratio of memory on your nodes. To run Step 1, use the following command: screen -S run_scrnabox bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 1 The resulting output files are deposited into ~/working_directory/step1 Parameter names need to be updated.","title":"Step 1: FASTQ pre-processing"},{"location":"HTO/#step-2-create-seurat-object","text":"In this step, CellRanger-generated feature-barcode expression matrices are transformed into Seurat objects. Genes expressed in less than a minimum number of cells and cells expressing less than a minimum number of genes can be filtered. The following parameters are adjustable for Step 2: Parameter Default Description Save_RNA No Whether or not to export an RNA expression matrix Save_metadata No Whether or not to export a metadata dataframe count_matrices NULL If users skipped Step 1, the may provide the path to a directory that contains existing feature-barcode expression matrices to initiate the pipeline at Step 2 min.cells_L 0 Only retain genes expressed in a minimum number of cells min.features_L 0 Only retain cells expressing a minimum number of genes To run Step 2, use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 2 The resulting output files are deposited into ~/working_directory/step2 Parameter names need to be updated and the code for ambient RNA detection must be added.","title":"Step 2: Create Seurat object"},{"location":"HTO/#step-3-quality-control-and-filtering","text":"Low quality cells are filtered based on the user-defined thresholds for the number of genes detected per cell, number of unique transcripts detected per cell, percentage of mitochondrial-encoded transcripts, and percentage of ribosomal-encoded transcripts. Mitochondrial- and ribosomal-encoded genes can be filtered out, as well as a custom user-defined list of genes. Finally, normalization and scaling is performed on the individual Seurat objects prior to cell-cycle scoring. The following parameters are adjustable for Step 3: Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_seurat_object NULL If users skipped Steps 1 and 2, the may provide the path to a directory that contains existing Seurat objects to initiate the pipeline at Step 3 par_nFeature_RNA_L NULL Only retain cells expressing a minimum number of genes par_nFeature_RNA_U NULL Only retain cells expressing a maximum number of genes par_nCount_RNA_L NULL Only retain cells with a minimum number of unique transcripts par_nCount_RNA_U NULL Only retain cells with a maximum number of unique transcripts par_mitochondria_percent_L NULL Only retain cells with a minimum percentage of mitochondrial genes par_mitochondria_percent_U NULL Only retain cells with a maximum percentage of mitochondrial genes par_ribosomal_percent_L NULL Only retain cells with a minimum percentage of ribosomal genes par_ribosomal_percent_U NULL Only retain cells with a maximum percentage of ribosomal genes par_log10GenesPerUMI_L NULL Only retain cells with a minimum number of genes per unique molecular identifier par_log10GenesPerUMI_U NULL Only retain cells with a maximum number of genes per unique molecular identifier par_remove_mitochondrial_genes Yes Whether or not to remove mitochondrial genes par_remove_ribosomal_genes Yes Whether or not to remove ribosomal genes par_remove_genes NULL If users want to remove specific genes from their data, they may define a list of gene identifiers par_normalization.method LogNormalize Method to use for normalization par_scale.factor 10000 Scale factor for scaling the data par_selection.method vst Method for choosing the top variable features par_nfeatures 2500 Number of features to select as top variable features par_top 10 Number of most variable features to be reported in the csv file par_npcs_pca 30 Total Number of principal components to compute and store for principal component analysis (PCA) par_cells 500 Number of cells to include in Seurat's dimheatmap function par_dims 12 Number of dimensions to include in Seurat's dimheatmap function par_dims_umap 10 Number of dimensions to use as input features for uniform manifold approximation and projection (UMAP) par_n.neighbors 65 Number of neighboring points to use in local approximations of manifold structure To run Step 3, use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 3 The resulting output files are deposited into ~/working_directory/step3","title":"Step 3: Quality control and filtering"},{"location":"HTO/#step-4-demultiplexing-and-doublet-removal","text":"Seurat\u2019s implementation (MULTIseqDemux) of the tag assignment algorithm outlined in Multi-seq is used to demultiplex pooled samples and identify doublets according to the expression matrices of the sample-specific barcodes (McGinnis et al 2019). The following parameters are adjustable for Step 4: Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_normalization.method CLR Method for normalizing the HTO assay par_scale.factor 1000 Scale factor for scaling the HTO assay par_selection.method vst Method for selecting the most variable features in the HTO assay par_nfeatures 5 Number of features to select as top variable features for the HTO assay. This value is dependent on the number of sample specific barcodes used in the experiment par_dims_umap 5 Number of dimensions to use as input features for uniform manifold approximation and projection (UMAP) of HTO assay par_n.neighbor 65 Number of neighboring points to use in local approximations of manifold structure par_dimensionality_reduction Yes Whether or not to perform linear dimensionality reduction on the HTO assay par_npcs_pca 30 Total Number of principal components to compute and store for principal component analysis (PCA) of HTO assay par_dropDN Yes Whether or not to remove predicted doublets and negatives from downstream analyses par_label_dropDN Doublet, Negative Labels used to identify doublet and negative droplets par_quantile 0.9 The quantile to use for droplet classification using MULTIseqDemux par_autoThresh TRUE Whether or not to perform automated threshold finding to define the best quantile for droplet classification using MULTIseqDemux par_maxiter 5 Maximum number of iterations to use if autoThresh = TRUE par_RidgePlot_ncol 3 Number of columns used to display RidgePlots, which visualizes the enrichment of barcode labels across samples par_old_antibody_label NULL If you wish to rename the barcode labels, first list the existing barcode labels in this parameter. old antibody labels can be identified in the \"_old_antibody_label_MULTIseqDemuxHTOcounts\" file produced by running Step 4 msd par_new_antibody_label NULL If you wish to rename the barcode labels, list the new labels corresponding to the old labels listed in the parameter above To perform demultiplexing and doublet detection, the first step is to obtain the barcode labels used in the analysis by running the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 4 \\ --msd T The names of the existing barcode labels can be revised to be more descriptive in the execution parameters of this Step (par_old_antibody_label; par_new_antibody_label) Next, perform demultiplexing and doublet detection by running the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 4 The resulting output files are deposited into ~/working_directory/step4","title":"Step 4: Demultiplexing and doublet removal"},{"location":"HTO/#step-5-integration-and-linear-dimensional-reduction","text":"Individual Seurat objects are integrated to enable the joint analysis across sequencing runs using Seurat's integration algorithm (Stuart et al. 2019); if experiments are limited to a single sequencing run, the integration Step can be bypassed. Normalization, scaling, and Linear dimensional reduction is then performed on the resulting Seurat object to inform the optimal parameters for clustering in Step 6. The following parameters are adjustable for Step 5: Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_skip_integration No Whether or not to skip integration. This is applicable for experiments that comprises of only one sequencing run. par_FindIntegrationAnchors_dim 25 Which dimensions to use from the canonical correlation analysis (CCA) to specify the neighbor search space par_DefaultAssay RNA The assay to perform normalization, scaling, and linear dimensiona reduction on. For most use cases this will be RNA. par_normalization.method LogNormalize Method to use for normalization par_scale.factor 1000 Scale factor for scaling the data par_selection.method vst Method for detecting top variable features par_nfeatures 2500 Number of features to select as top variable features par_RunUMAP_n.neighbors 65 Number of neighboring points used in local approximations of manifold structure par_RunPCA_npcs 30 Total Number of principal components to compute and store for principal component analysis (PCA) par_RunUMAP_dims 10 Number of dimensions to use as input features for uniform manifold approximation and projection (UMAP) par_compute_jackstraw No Whether or not to perform JackStraw computation. This computation takes a long time. To run Step 5, use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 5 The resulting output files are deposited into ~/working_directory/step5","title":"Step 5: Integration and linear dimensional reduction"},{"location":"HTO/#step-6-clustering","text":"Clustering is performed to define groups of cells with similar expression profiles using the graph-based clustering approach implemented in the Seurat framework (Macosko et al. 2015). The following parameters are adjustable for Step 6: Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_skip_step5 No Whether or not the user skipped integration in Step 5 par_FindNeighbors_dims 30 Number of dimensions from linear dimensional reduction used as input to identify neighbours. Can be informed by the elbow and Jackstraw plots produced in Step 5 par_FindNeighbors_k.param 60 Defines k for the k-nearest neighbor algorithm par_FindNeighbors_prune.SNN 1/15 Sets the cutoff for acceptable Jaccard index when computing the neighborhood overlap for the shared nearest-neighbour (SNN) construction par_FindClusters_resolution 0.1 to 0.9, in intervals of 0.1 Value of the clustering resolution parameter. You may provide multiple resolution values par_compute_ARI Yes Whether or not you want to compute the Adjusted Rand Index (ARI) between clusters at a given clustering resolution par_RI_reps 100 Number of iterations for clustering the data at a given resolution in order to calculate the ARI To run Step 6, use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 6 The resulting output files are deposited into ~/working_directory/step6","title":"Step 6: Clustering"},{"location":"HTO/#step-7-cluster-annotation","text":"Cell populations, or clusters, with similar expression profiles are annotated to define cell types by three distinct methods: Method 1. Cluster marker gene set enrichment analysis (GSEA) : Seurat's FindAllMarkers function is used to identify differentially expressed marker genes (DEG) by the Wilcoxon rank-sum test (Macosko et al. 2015). DEGs in the positive direction (Log2 fold-change > 0.00) are then tested for enrichment across user-defined gene set libraries that define cell types using the EnrichR tool (Chen et al. 2013). Method 2. Module score : Seurat\u2019s implementation ( AddModuleScore ) of Tirosh et al.\u2019s algorithm is used to comparatively quantify the expression of gene sets across clusters at the single-cell level (Tirosh et al. 2016). Users must define their desired gene sets in the parameters file of Step 7. Gene sets should be defined in a csv file, where the column names correspond to the arbitrary name of the gene set and the corresponding rows define the genes in the gene set. For example: gene_set_1 gene_set_2 gene_set_3 CLDN5 IFITM3 TM4SF1 ANGPT2 EGFL7 IGFBP FLT1 A2M GIMAP7 DEPP1 SOD2 EMP2 TMSB10 PODXL B2M HLA-E VWF BST2 SLCO4A1 PECAM1 BSG TGM2 SLC2A3 PARP14 IFI27 TSC22D1 NFKBIA MT2A HLA-B ID3 EPAS1 IFITM2 Method 3. Reference-based annotation : Seurat's FindTransferAnchors and TransferData functions are used to leverage cell-type annotations from a reference Seurat object and generate annotation predictions for the query dataset (Macosko et al. 2015). User's must define the location of their referene Seurat object in the parameters file of Step 7. In addition, scRNAbox allows users to visualize the expression of select features at the cluster or cell level via a user-provided list of gene identifiers in order to further inform the cellular species that make up specific clusters. The following parameters are adjustable for Step 7: Parameter Default Description (the cluster annotation method associated with the parameter is shown) par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_level_cluster integrated_snn_res.0.7 The cluster resolution that you want to use for downstream analyses. If you skipped integration in Step 5, use par_level_cluster='RNA_snn_res.0.7', if you want to proceed with a clustering resolution of 0.7 par_level_genotype MULTI_ID_Lables Name of the metadata column in your Seurat object that describes the sample names par_top_sel 5 Method 1: Number of top markers to identify based on avg_log2FC par_db Descartes_Cell_Types_and_Tissue_2021, CellMarker_Augmented_2021, Azimuth_Cell_Types_2021 Method 1: Character vector of EnrichR databases that define cell types. The top marker genes for each cluster will be tested for enrichment across these databases. par_compute_module_score Yes Method 2: Whether or not to perform the module score computation par_compute_module_score Yes Method 2: Whether or not to perform the module score computation par_module_score NULL Method 2: Path defining the location of the directory that contains the csv file of the gene sets used to compute the module score par_reference NULL Method 3: Path defining the location of the reference Seurat object par_level_celltype NULL Method 3: The name of the metadata column in the reference Seurat object that defines cell types par_FindTransferAnchors_dim 10 Method 3: Number of dimensions from linear dimensional reduction used to find transfer anchors between the reference and query Seurat objects par_futureglobalsmaxSize 50000 * 1024^2 Method 3: This will increase your RAM usage so set this number mindfully par_visualize_select_features No Visualize select features: Whether or not to visualize select features par_select_features NULL Visualize select features: list of gene identifiers to visualize the expression of select features To identify cluster marker genes ( Method 1 ), compute the module score for user-defined gene sets ( Method 2 ), and visualize select features , use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --marker T Then, to test the top cluster marker genes for enrichment across gene set libraries that define cell types ( Method 1 ), use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --enrich T Please note that in order to test the cluster marker genes for enrichment across EnrichR libraries, the HPC must have access to the internet. If your HPC cannot access the internet, it is possible to run the enrichment step on your local machine directly in R. To do so, begin by downloading the Step 6 Seurat RDS object ( ~/working_directory/step6/objs6/seu_step6.rds ) and cluster marker RDS object ( ~/working_directory/step7/info7/marker/ClusterMarkers.rds ) to your computer using the following commands: scp username@beluga.computecanada.ca:~/working_directory/step7/info7/marker/ClusterMarkers.rds ~/Desktop/working_directory scp username@beluga.computecanada.ca:~/working_directory/step6/objs6/seu_step6.rds ~/Desktop/working_directory Then run the follwing code in R: SCRNABOX_PWD <- \"~/Desktop/working_directory\" dir.create(\"SCRNABOX_PWD/step7/annot\") level_cluster='integrated_snn_res.0.7' ClusterMarkers='SCRNABOX_PWD/step7/info7/ClusterMarkers.rds' PWD='SCRNABOX_PWD/step7/annot/' PSUE='SCRNABOX_PWD/step6/objs6/seu_step6.rds' top_sel=5 db <- c('Descartes_Cell_Types_and_Tissue_2021','CellMarker_Augmented_2021','Azimuth_Cell_Types_2021') scrnaboxR::annotation(level_cluster,ClusterMarkers,PWD,PSUE,top_sel,db) To perform reference-based annotation ( Method 3 ), run the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --fta T The resulting output files are deposited into ~/working_directory/step7 .","title":"Step 7: Cluster annotation"},{"location":"HTO/#step-8-differential-gene-expression-contrasts","text":"This step performs differetial gene expression (DGE) analyses according to user-defined contrasts. Contrast can be performed between samples (e.g. case vs control; sample-sample contrasts ) or between samples, stratified by cell type (e.g. case vs control for excitatory neurons only; sample-cell contrasts ). The following parameters are adjustable for Step 8: Parameter Default Description (the cluster annotation method associated with the parameter is shown) par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_level_cluster integrated_snn_res.0.7 The cluster resolution that you used in the cluster annotation module. If you skipped integration in Step 5, use par_level_cluster='RNA_snn_res.0.7', if you want to proceed with a clustering resolution of 0.7 par_step8_clus_label NULL List of user-currated cluster labels obtained from the annotation module. Make sure to have the same number of labels as clusters at the desired clustering resolution. par_new_genotype yes Whether or not you want to add new sample labels to simplify the contrasts. For example, you may wish to set both control1 and control2 as control. par_old_antibody_label NULL list of old sample labels (i.e. those used to create the samples_info folder in the setup procedures) par_new_antibody_label NULL list of new sample labels corresponding to the old sample labels defined in the parameter above The first step of the DGE contrasts module is to create a DGEListobject. This step may require alot of RAM, we suggest 3*size(seu_int_clu.rds). Users can adjust the RAM in the scrnabox_config.ini file located in ~/working_directory/job_info/configs . To create a DGEListobject, run the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --dgelist T The next step is to perform DGE contrasts. As mentioned, useers can perform sample-sample contrasts or sample-cell contrasts To perform sample-sample contrasts , users must first modify the step8_contrast_genotype.txt contrast matrix located in ~/working_directory/job_info/parameters . The contrast matrix comprises three columns that define the arbitrary name of the contrast (cont_name), the control sample (control), and the case sample (versus). For example: cont_name control versus design1 control case1,case2,case3,case4,case5 design2 control case1 design3 control case2 design4 control case3 design5 control case4 design6 control case5 design7 control case1,case2,case3,case4 design8 control case1,case2,case3 design9 control case1,case2 To perform sample-sample contrasts , run the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --genotype T To perform sample-cell contrasts , users must first modify the step8_contrast_celltype.txt contrast matrix located in ~/working_directory/job_info/parameters . The contrast matrix comprises four columns that define the arbitrary name of the contrast (cont_name), the cell type (cell), the control sample (control), and the case sample (versus). For example: cont_name cell control versus design1 excitatory_neuron control case1,case2,case3,case4,case5 design2 excitatory_neuron control case1 design3 excitatory_neuron control case2 design4 excitatory_neuron control case3 design5 excitatory_neuron control case4 design6 excitatory_neuron control case5 design7 excitatory_neuron control case1,case2,case3,case4 design8 excitatory_neuron control case1,case2,case3 design9 excitatory_neuron control case1,case2 To perform sample-cell contrasts , run the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --celltype T The resulting output files are deposited into ~/working_directory/step8 . Note: that if you have a large number of contrasts to run, it may be more efficient to split them up and submit batch jobs instead.","title":"Step 8: Differential gene expression contrasts"},{"location":"HTO/#integrating-seurat-objects","text":"To combine different seurat objects, you can run the following codes. LISTOFSEU=~/list.txt bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps integrate \\ --seulist ${LISTOFSEU} LISTOFSEU includes the path of seurate files, put them in different lines. By default, the pipeline standardize the seurat objects before integrating, you can change the default in ${SCRNABOX_PWD}/job_info/parameters/stepint_par.txt .","title":"Integrating seurat objects"},{"location":"LICENSE/","text":"License MIT License Copyright (c) 2022 The Neuro Bioinformatics Core Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"- License"},{"location":"LICENSE/#license","text":"MIT License Copyright (c) 2022 The Neuro Bioinformatics Core Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"PROC/","text":"ScRNA pipline Contents Introduction From step 2 From step 3 From step 4 From Step 5: integration From Step 6: Clustering Introduction This guide provides a concise introduction to analyzing data using the Scrnabox pipeline. The scrnabox.slurm pipeline is primarily designed to initiate Step 1, which involves running cellranger on fastq data. However, it can also be utilized with processed data, where some of the steps have already been completed. The following section explains how to use the pipeline for analyzing processed data. To begin, you need to set up the pipeline for analysis and determine the starting step based on your requirements. From Step 2 If the cellranger is already run the raw data, copy the results under ${SCRNABOX_PWD}/step1 , then follow the step2 to analyze data bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 2 From step 3 If the seurat objects are available and you want to run QC and filter cell ; save the seurate objects under ${SCRNABOX_PWD}/step2/objs and run the following codes, bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 3 \\ --nFeature_RNA_L 1000 \\ --nCount_RNA_U 65000 \\ --mitochondria_percent_U 25 From step 4 If the QC and filtering is already done, you can save under ${SCRNABOX_PWD}/step3/objs and run the following codes to get the hashtag labels by running the following code bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 4 \\ --msd T Add the old label and its new corresponding label in '${SCRNABOX_PWD}/job_output/parameters/step4_par.txt'. Run the following to run the demuplixing bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 4 From Step 5: Integration If you want to integrate the surate objects, just save them in ${SCRNABOX_PWD}/step4/objs and follow Srep 5 bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 5 From Step 6: Clustering In this step, you need to have just one seurat object which should be save in ${SCRNABOX_PWD}/step5/objs bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 6","title":"- Processed Data"},{"location":"PROC/#scrna-pipline","text":"","title":"ScRNA  pipline"},{"location":"PROC/#contents","text":"Introduction From step 2 From step 3 From step 4 From Step 5: integration From Step 6: Clustering","title":"Contents"},{"location":"PROC/#introduction","text":"This guide provides a concise introduction to analyzing data using the Scrnabox pipeline. The scrnabox.slurm pipeline is primarily designed to initiate Step 1, which involves running cellranger on fastq data. However, it can also be utilized with processed data, where some of the steps have already been completed. The following section explains how to use the pipeline for analyzing processed data. To begin, you need to set up the pipeline for analysis and determine the starting step based on your requirements.","title":"Introduction"},{"location":"PROC/#from-step-2","text":"If the cellranger is already run the raw data, copy the results under ${SCRNABOX_PWD}/step1 , then follow the step2 to analyze data bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 2","title":"From Step 2"},{"location":"PROC/#from-step-3","text":"If the seurat objects are available and you want to run QC and filter cell ; save the seurate objects under ${SCRNABOX_PWD}/step2/objs and run the following codes, bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 3 \\ --nFeature_RNA_L 1000 \\ --nCount_RNA_U 65000 \\ --mitochondria_percent_U 25","title":"From step 3"},{"location":"PROC/#from-step-4","text":"If the QC and filtering is already done, you can save under ${SCRNABOX_PWD}/step3/objs and run the following codes to get the hashtag labels by running the following code bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 4 \\ --msd T Add the old label and its new corresponding label in '${SCRNABOX_PWD}/job_output/parameters/step4_par.txt'. Run the following to run the demuplixing bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 4","title":"From step 4"},{"location":"PROC/#from-step-5-integration","text":"If you want to integrate the surate objects, just save them in ${SCRNABOX_PWD}/step4/objs and follow Srep 5 bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 5","title":"From Step 5: Integration"},{"location":"PROC/#from-step-6-clustering","text":"In this step, you need to have just one seurat object which should be save in ${SCRNABOX_PWD}/step5/objs bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 6","title":"From Step 6: Clustering"},{"location":"SCRNA/","text":"ScRNAbox pipeline: Standard scRNAseq Analysis Track Contents Introduction Setup Step 1: FASTQ pre-processing Step 2: Ambient RNA removal and create Seurat object Step 3: Quality control and filtering Step 4: Doublet removal Step 5: Integration and linear dimensional reduction Step 6: Clustering step 7: Cluster annotation step 8: Differential gene expression contrasts Integrating Seurat objects Introduction This guide provides instructions for analyzing single-cell RNA sequencing (scRNAseq) data using the Standard Analysis Track of the scRNAbox pipeline. The Standard Analysis Track is designed for scRNAseq experiments where each sample is captured and sequenced separately; thus, users should have unique FASTQ files for each of the samples in their experiment. If instead samples were pooled prior to sequencing, resulting in FASTQ files comprising scRNAseq data of multiple samples, users should leverage the Cell Hashtag scRNAseq Analysis Track. The main component of the scRNAbox pipeline is scrnabox.slurm , which is an open-source pipeline for scRNAseq analysis that is specifically designed to run on high-performance computing (HPC) systems using the Slurm Workload Manager . scrnabox.slurm outlines the Analytical Steps involved in a comprehensive scRNAseq analysis workflow, including FASTQ pre-processing, quality control and filtering, clustering, cluster annotation, and differential gene expression contrasts. The Analytical Steps involved in the Standard Analysis Track of the scRNAbox pipeline are outlined in the figure below. Note: This tutorial assumes that scrnabox.slurm , cellranger , R , and the required R packages have already been installed onto the HPC system. If this is not the case, please visit Installation to do so before proceeding. If the required packages are installed, you can proceed to Setup . Setup Before running the pipeline, create a dedicated folder for the analysis (hereafter referred to as the working directory). Then, define the path of the working directory ( SCRNABOX_PWD= ) and the path to scrnabox.slurm ( SCRNABOX_HOME= ). For example: mkdir ~/working_directory cd ~/working_directory export SCRNABOX_HOME=~/scrnabox.slurm export SCRNABOX_PWD=~/working_directory For a description of the options for running scrnabox.slurm and to ensure that the path was properly defined, run the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh -h If the pipeline has been installed properly, the above command should return the folllowing: mandatory arguments: -d (--dir) = Working directory (where all the outputs will be printed) (give full path) --steps = Specify what steps, e.g., 2 to run just step 2, 2-4, run steps 2 through 4) optional arguments: -h (--help) = See helps regarding the pipeline options. --method = Choose what scRNA method you want to use; use HTO and SCRNA for for hashtag nad Standard scRNA, respectively. --nFeature_RNA_L = Lower threshold of number of unique RNA transcripts for each cell, it filters nFeature_RNA > nFeature_RNA_L. --nFeature_RNA_U = Upper threshold of number of unique RNA transcripts for each cell, it filters --nFeature_RNA_U. --nCount_RNA_L = Lower threshold for nCount_RNA, it filters nCount_RNA > nCount_RNA_L --nCount_RNA_U = Upper threshold for nCount_RNA, it filters nCount_RNA < nCount_RNA_U --mitochondria_percent_L = Lower threshold for the amount of mitochondrial transcript, it is in percent, mitochondria_percent > mitochondria_percent_L. --mitochondria_percent_U = Upper threshold for the amount of mitochondrial transcript, it is in percent, mitochondria_percent < mitochondria_percent_U. --log10GenesPerUMI_U = Upper threshold for the log number of genes per UMI for each cell, it is in percent,log10GenesPerUMI=log10(nFeature_RNA)/log10(nCount_RNA). mitochondria_percent < log10GenesPerUMI_U. --log10GenesPerUMI_L = Lower threshold for the log number of genes per UMI for each cell, log10GenesPerUMI=log10(nFeature_RNA)/log10(nCount_RNA). mitochondria_percent > log10GenesPerUMI_L. --msd = you can get the hashtag labels by running the following code --marker = Find marker. --sinfo = Do you need sample info? --fta = FindTransferAnchors --enrich = Annotation --dgelist = creates a DGEListobject from a table of counts obtained from seurate objects. --genotype = Run the genotype contrast. --celltype = Run the Genotype-cell contrast. --cont = You can directly call the contrast to the pipeline. --seulist = You can directly call the list of seurat objects to the pipeline. Next, run the pipeline initiation Step ( --steps 0 ) and define the Standard scRNAseq Analysis Track ( --method SCRNA ) using the following command from the working directory: cd ~/working_directory bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 0 \\ --method SCRNA After running the pipeline initiation Step, the structure of the working directory should be as follows: \u251c\u2500\u2500 working_directory \u251c\u2500\u2500 job_info \u251c\u2500\u2500 configs \u251c\u2500\u2500 logs \u251c\u2500\u2500 parameters The configs/ directory contains the scrnabox_config.ini file which allows users to specify their job allocations (memory, threads, and walltime) for each Analytical Step using the Slurm Workload Manager; The logs/ directory records the events of each Analytical Step; The parameters/ directory contains adjustable, Step-specific text files which allow users to define the execution parameters for each Analytical Step. Next, navigate to the scrnabox_config.ini file in ~/working_directory/job_info/configs to define the path to the R library ( R_LIB_PATH= ), the version of R ( R_VERSION= ), and the path to CellRanger ( MODULECELLRANGER= ). For example: MODULECELLRANGER=mugqic/cellranger/5.0.1 R_VERSION=4.2.1 R_LIB_PATH=Path_to_R_library Finally, in preparation for Step 1 (FASTQ pre-processing with CellRanger) users must create library.csv files for each of their samples, which defines the necessary information of the FASTQ files for the experiment. The structure of the library.csv file should be: fastqs,sample,library_type ~/fastqs/,CTRL1,Gene Expression The fastqs column defines the path to the directory that contains the FASTQ files for the experiment. The sample column defines the sample name of the corresponding FASTQ file. Please note that FASTQ files must be named according to standard CellRanger nomenclature. For example, \"CTRL1_S1_L001_R1_001.fastq\". For more information please visit CellRanger's documentation . The library_type column defines the assay type. For The Standard Analysis Track of scRNAbox, library_type will always be \"Gene Expression\". For example, if the experiment comprises four samples (two controls and two cases) the following steps should be taken: 1) Navigate to the working directory and create a samples_info folder: cd ~/working_directory mkdir samples_info 2) Navigate to the samples_info folder and create a folder for each sample. Please note that the sample names used here will eventually be used to define samples in the Seurat object, so choose them wisely: cd samples_info mkdir control1 mkdir control2 mkdir case1 mkdir case2 3) Navigate to the folder for each sample and create the library.csv file. After performing steps 1-3 above, the structure of the samples_info folder for an experiment with four samples should be: \u251c\u2500\u2500 working_directory \u251c\u2500\u2500 samples_info \u251c\u2500\u2500 control1 \u251c\u2500\u2500 library.csv \u251c\u2500\u2500 control2 \u251c\u2500\u2500 library.csv \u251c\u2500\u2500 case1 \u251c\u2500\u2500 library.csv \u251c\u2500\u2500 case2 \u251c\u2500\u2500 library.csv Upon completing the above steps to setup the pipeline, users can run their analysis. Please note that if you do not have access to FASTQ files for your experiment, you may intiate the pipeline at which ever Analytical Step takes your data object as input. In the case where FASTQ files are not available, users do not have to create the samples_info folder. For more information see Processed Data . scRNAbox Analytical Steps Specific Analytical Steps are called using the --steps flag. The output of each Analytical Step is deposited into its respective folder within the working directory (e.g. ~/working_directory/step1 ). Prior to running each Analytical Step, users are strongly encouraged to modify the execution parameters of the analysis using the adjustable, Step-specific parameters text files. The parameters text files are located in ~/working_directory/job_info/parameters . For instructions on how to modify these text files please see FAQ . To ensure replicability, a summary report file documents the execution parameters for each iteration of each analytical Step, which is located in ~/working_directory/job_info/summary_report.txt . For detailed descriptions of each Analytical Step please see our pre-print manuscript. Step 1: FASTQ pre-processing In this step, feature-barcode expression matrices are generated from FASTQ files using the CellRanger counts pipeline. Given that CellRanger runs a user interface, it is recommended to run Step 1 in a 'screen'. The following parameters are adjustable for Step 1: Parameter Default Description REF_DIR_GRCH NULL Path to reference genome for FASTQ alignment. 10X Genomics reference genomes are available for download. For more information see their documentation . R1LENGTH NULL Minimum number of bases to retain for R1 sequence of gene expression MEMPERCORE 30 For clusters whose job managers do not support memory requests, it is possible to request memory in the form of cores. This option will scale up the number of threads requested via the MRO_THREADS variable according to how much memory a stage requires when given to the ratio of memory on your nodes. To run Step 1, use the following command: screen -S run_scrnabox bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 1 The resulting output files are deposited into ~/working_directory/step1 Parameter names need to be updated. Step 2: Ambient RNA removal and create Seurat object In this step, the ambient RNA rate is estimated and the gene expression profiles are corrected for RNA contamination (optional) using SoupX (Young et al. 2020). Then, CellRanger- or SoupX-generated feature-barcode expression matrices are transformed into Seurat objects. Genes expressed in less than a minimum number of cells and cells expressing less than a minimum number of genes can be filtered. The following parameters are adjustable for Step 2: Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_ambient_RNA Yes Whether or not to correct the feature-barcode expression matrices for ambient RNA contamination par_count_matrices NULL If users skipped Step 1, the may provide the path to a directory that contains existing feature-barcode expression matrices to initiate the pipeline at Step 2 par_min.cells_L 0 Only retain genes expressed in a minimum number of cells par_min.features_L 0 Only retain cells expressing a minimum number of genes To run Step 2, use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 2 The resulting output files are deposited into ~/working_directory/step2 Step 3: Quality control and filtering Low quality cells are filtered based on the user-defined thresholds for the number of genes detected per cell, number of unique transcripts detected per cell, percentage of mitochondrial-encoded transcripts, and percentage of ribosomal-encoded transcripts. Mitochondrial- and ribosomal-encoded genes can be filtered out, as well as a custom user-defined list of genes. Finally, normalization and scaling is performed on the individual Seurat objects prior to cell-cycle scoring. The following parameters are adjustable for Step 3: Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_seurat_object NULL If users skipped Steps 1 and 2, the may provide the path to a directory that contains existing Seurat objects to initiate the pipeline at Step 3 par_nFeature_RNA_L NULL Only retain cells expressing a minimum number of genes par_nFeature_RNA_U NULL Only retain cells expressing a maximum number of genes par_nCount_RNA_L NULL Only retain cells with a minimum number of unique transcripts par_nCount_RNA_U NULL Only retain cells with a maximum number of unique transcripts par_mitochondria_percent_L NULL Only retain cells with a minimum percentage of mitochondrial genes par_mitochondria_percent_U NULL Only retain cells with a maximum percentage of mitochondrial genes par_ribosomal_percent_L NULL Only retain cells with a minimum percentage of ribosomal genes par_ribosomal_percent_U NULL Only retain cells with a maximum percentage of ribosomal genes par_log10GenesPerUMI_L NULL Only retain cells with a minimum number of genes per unique molecular identifier par_log10GenesPerUMI_U NULL Only retain cells with a maximum number of genes per unique molecular identifier par_remove_mitochondrial_genes Yes Whether or not to remove mitochondrial genes par_remove_ribosomal_genes Yes Whether or not to remove ribosomal genes par_remove_genes NULL If users want to remove specific genes from their data, they may define a list of gene identifiers par_normalization.method LogNormalize Method to use for normalization par_scale.factor 10000 Scale factor for scaling the data par_selection.method vst Method for choosing the top variable features par_nfeatures 2500 Number of features to select as top variable features par_top 10 Number of most variable features to be reported in the csv file par_npcs_pca 30 Total Number of principal components to compute and store for principal component analysis (PCA) par_cells 500 Number of cells to include in Seurat's dimheatmap function par_dims 12 Number of dimensions to include in Seurat's dimheatmap function par_dims_umap 10 Number of dimensions to use as input features for uniform manifold approximation and projection (UMAP) par_n.neighbors 65 Number of neighboring points to use in local approximations of manifold structure To run Step 3, use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 3 The resulting output files are deposited into ~/working_directory/step3 Step 4: Doublet removal Doublets are identified and removed from downstream analysis (optional) using the DoubletFinder tool (McGinnis et al. 2019). The following parameters are adjustable for Step 4: Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_dropDN Yes Whether or not to remove predicted doublets from downstream analyses par_PCs 20 The number of statistically significant principal components. Can be informed by elbow plot produced in Step 3 par_pN 0.25 The number of artificial doublets to generate. DoubletFinderr is largely invariant to this parameter. We suggest keeping 0.25 par_sct FALSE Logical representing whether SCTransform was used during original Seurat object pre-processing par_sample_names NULL A list of sample names for each sample in the experiement, corresponding to the expected doublet rates listed in the parameter below. Sample names should be the same as those used to produce the samples_info folder during the setup procedures. par_expected_doublet_rate NULL A list of expected doublet rates for each sample, corresponding to the sample names listed in the above parameter To run Step 4, use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 4 The resulting output files are deposited into ~/working_directory/step4 Step 5: Integration and linear dimensional reduction Individual Seurat objects are integrated to enable the joint analysis across samples runs using Seurat's integration algorithm (Stuart et al. 2019); if experiments are limited to a single sequencing run, the integration Step can be bypassed. Normalization, scaling, and Linear dimensional reduction is then performed on the resulting Seurat object to inform the optimal parameters for clustering in Step 6. The following parameters are adjustable for Step 5: Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_skip_integration No Whether or not to skip integration. This is applicable for experiments that comprises of only one sequencing run. par_FindIntegrationAnchors_dim 25 Which dimensions to use from the canonical correlation analysis (CCA) to specify the neighbor search space par_DefaultAssay RNA The assay to perform normalization, scaling, and linear dimensiona reduction on. For most use cases this will be RNA. par_normalization.method LogNormalize Method to use for normalization par_selection.method vst Method for detecting top variable features par_nfeatures 2500 Number of features to select as top variable features par_RunUMAP_n.neighbors 65 Number of neighboring points used in local approximations of manifold structure par_RunPCA_npcs 30 Total Number of principal components to compute and store for principal component analysis (PCA) par_RunUMAP_dims 10 Number of dimensions to use as input features for uniform manifold approximation and projection (UMAP) par_compute_jackstraw No Whether or not to perform JackStraw computation. This computation takes a long time. To run Step 5, use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 5 The resulting output files are deposited into ~/working_directory/step5 Step 6: Clustering Clustering is performed to define groups of cells with similar expression profiles using the graph-based clustering approach implemented in the Seurat framework (Macosko et al. 2015). The following parameters are adjustable for Step 6: Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_skip_step5 No Whether or not the user skipped integration in Step 5 par_FindNeighbors_dims 30 Number of dimensions from linear dimensional reduction used as input to identify neighbours. Can be informed by the elbow and Jackstraw plots produced in Step 5 par_FindNeighbors_k.param 60 Defines k for the k-nearest neighbor algorithm par_FindNeighbors_prune.SNN 1/15 Sets the cutoff for acceptable Jaccard index when computing the neighborhood overlap for the shared nearest-neighbour (SNN) construction par_FindClusters_resolution 0.1 to 0.9, in intervals of 0.1 Value of the clustering resolution parameter. You may provide multiple resolution values par_compute_ARI Yes Whether or not you want to compute the Adjusted Rand Index (ARI) between clusters at a given clustering resolution par_RI_reps 100 Number of iterations for clustering the data at a given resolution in order to calculate the ARI To run Step 6, use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 6 The resulting output files are deposited into ~/working_directory/step6 Step 7: Cluster annotation Cell populations, or clusters, with similar expression profiles are annotated to define cell types by three distinct methods: Method 1. Cluster marker gene set enrichment analysis (GSEA) : Seurat's FindAllMarkers function is used to identify differentially expressed marker genes (DEG) by the Wilcoxon rank-sum test (Macosko et al. 2015). DEGs in the positive direction (Log2 fold-change > 0.00) are then tested for enrichment across user-defined gene set libraries that define cell types using the EnrichR tool (Chen et al. 2013). Method 2. Module score : Seurat\u2019s implementation ( AddModuleScore ) of Tirosh et al.\u2019s algorithm is used to comparatively quantify the expression of gene sets across clusters at the single-cell level (Tirosh et al. 2016). Users must define their desired gene sets in the parameters file of Step 7. Gene sets should be defined in a csv file, where the column names correspond to the arbitrary name of the gene set and the corresponding rows define the genes in the gene set. For example: gene_set_1 gene_set_2 gene_set_3 CLDN5 IFITM3 TM4SF1 ANGPT2 EGFL7 IGFBP FLT1 A2M GIMAP7 DEPP1 SOD2 EMP2 TMSB10 PODXL B2M HLA-E VWF BST2 SLCO4A1 PECAM1 BSG TGM2 SLC2A3 PARP14 IFI27 TSC22D1 NFKBIA MT2A HLA-B ID3 EPAS1 IFITM2 Method 3. Reference-based annotation : Seurat's FindTransferAnchors and TransferData functions are used to leverage cell-type annotations from a reference Seurat object and generate annotation predictions for the query dataset (Macosko et al. 2015). User's must define the location of their referene Seurat object in the parameters file of Step 7. In addition, scRNAbox allows users to visualize the expression of select features at the cluster or cell level via a user-provided list of gene identifiers in order to further inform the cellular species that make up specific clusters. The following parameters are adjustable for Step 7: Parameter Default Description (the cluster annotation method associated with the parameter is shown) par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_level_cluster integrated_snn_res.0.7 The cluster resolution that you want to use for downstream analyses. If you skipped integration in Step 5, use par_level_cluster='RNA_snn_res.0.7', if you want to proceed with a clustering resolution of 0.7 par_top_sel 5 Method 1: Number of top markers to identify based on avg_log2FC par_db Descartes_Cell_Types_and_Tissue_2021, CellMarker_Augmented_2021, Azimuth_Cell_Types_2021 Method 1: Character vector of EnrichR databases that define cell types. The top marker genes for each cluster will be tested for enrichment across these databases. par_compute_module_score Yes Method 2: Whether or not to perform the module score computation par_compute_module_score Yes Method 2: Whether or not to perform the module score computation par_module_score NULL Method 2: Path defining the location of the directory that contains the csv file of the gene sets used to compute the module score par_reference NULL Method 3: Path defining the location of the reference Seurat object par_level_celltype NULL Method 3: The name of the metadata column in the reference Seurat object that defines cell types par_FindTransferAnchors_dim 10 Method 3: Number of dimensions from linear dimensional reduction used to find transfer anchors between the reference and query Seurat objects par_futureglobalsmaxSize 50000 * 1024^2 Method 3: This will increase your RAM usage so set this number mindfully par_visualize_select_features No Visualize select features: Whether or not to visualize select features par_select_features NULL Visualize select features: list of gene identifiers to visualize the expression of select features To identify cluster marker genes ( Method 1 ), compute the module score for user-defined gene sets ( Method 2 ), and visualize select features , use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --marker T Then, to test the top cluster marker genes for enrichment across gene set libraries that define cell types ( Method 1 ), use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --enrich T Please note that in order to test the cluster marker genes for enrichment across EnrichR libraries, the HPC must have access to the internet. If your HPC cannot access the internet, it is possible to run the enrichment step on your local machine directly in R. To do so, begin by downloading the Step 6 Seurat RDS object ( ~/working_directory/step6/objs6/seu_step6.rds ) and cluster marker RDS object ( ~/working_directory/step7/info7/marker/ClusterMarkers.rds ) to your computer using the following commands scp username@beluga.computecanada.ca:~/working_directory/step7/info7/marker/ClusterMarkers.rds ~/Desktop/working_directory scp username@beluga.computecanada.ca:~/working_directory/step6/objs6/seu_step6.rds ~/Desktop/working_directory Then run the follwing code in R: SCRNABOX_PWD <- \"~/Desktop/working_directory\" dir.create(\"SCRNABOX_PWD/step7/annot\") level_cluster='integrated_snn_res.0.7' ClusterMarkers='SCRNABOX_PWD/step7/info7/ClusterMarkers.rds' PWD='SCRNABOX_PWD/step7/annot/' PSUE='SCRNABOX_PWD/step6/objs6/seu_step6.rds' top_sel=5 db <- c('Descartes_Cell_Types_and_Tissue_2021','CellMarker_Augmented_2021','Azimuth_Cell_Types_2021') scrnaboxR::annotation(level_cluster,ClusterMarkers,PWD,PSUE,top_sel,db) To perform reference-based annotation ( Method 3 ), run the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --fta T The resulting output files are deposited into ~/working_directory/step7 . Step 8: Differential gene expression contrasts This step performs differetial gene expression (DGE) analyses according to user-defined contrasts. Contrast can be performed between samples (e.g. case vs control; sample-sample contrasts ) or between samples, stratified by cell type (e.g. case vs control for excitatory neurons only; sample-cell contrasts ). The following parameters are adjustable for Step 8: Parameter Default Description (the cluster annotation method associated with the parameter is shown) par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_level_cluster integrated_snn_res.0.7 The cluster resolution that you used in the cluster annotation module. If you skipped integration in Step 5, use par_level_cluster='RNA_snn_res.0.7', if you want to proceed with a clustering resolution of 0.7 par_step8_clus_label NULL List of user-currated cluster labels obtained from the annotation module. Make sure to have the same number of labels as clusters at the desired clustering resolution. par_new_genotype yes Whether or not you want to add new sample labels to simplify the contrasts. For example, you may wish to set both control1 and control2 as control. par_old_sample_label NULL list of old sample labels (i.e. those used to create the samples_info folder in the setup procedures) par_new_sample_label NULL list of new sample labels corresponding to the old sample labels defined in the parameter above The first step of the DGE contrasts module is to create a DGEListobject. This step may require alot of RAM, we suggest 3*size(seu_int_clu.rds). Users can adjust the RAM in the scrnabox_config.ini file located in ~/working_directory/job_info/configs . To create a DGEListobject, run the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --dgelist T The next step is to perform DGE contrasts. As mentioned, useers can perform sample-sample contrasts or sample-cell contrasts To perform sample-sample contrasts , users must first modify the step8_contrast_genotype.txt contrast matrix located in ~/working_directory/job_info/parameters . The contrast matrix comprises three columns that define the arbitrary name of the contrast (cont_name), the control sample (control), and the case sample (versus). For example: cont_name control versus design1 control case1,case2,case3,case4,case5 design2 control case1 design3 control case2 design4 control case3 design5 control case4 design6 control case5 design7 control case1,case2,case3,case4 design8 control case1,case2,case3 design9 control case1,case2 To perform sample-sample contrasts , run the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --genotype T To perform sample-cell contrasts , users must first modify the step8_contrast_celltype.txt contrast matrix located in ~/working_directory/job_info/parameters . The contrast matrix comprises four columns that define the arbitrary name of the contrast (cont_name), the cell type (cell), the control sample (control), and the case sample (versus). For example: cont_name cell control versus design1 excitatory_neuron control case1,case2,case3,case4,case5 design2 excitatory_neuron control case1 design3 excitatory_neuron control case2 design4 excitatory_neuron control case3 design5 excitatory_neuron control case4 design6 excitatory_neuron control case5 design7 excitatory_neuron control case1,case2,case3,case4 design8 excitatory_neuron control case1,case2,case3 design9 excitatory_neuron control case1,case2 To perform sample-cell contrasts , run the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --celltype T The resulting output files are deposited into ~/working_directory/step8 . Note: that if you have a large number of contrasts to run, it may be more efficient to split them up and submit batch jobs instead. Integrating Seurat objects To combine different seurat objects, you can run the following codes. LISTOFSEU=~/list.txt bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps integrate \\ --seulist ${LISTOFSEU} \\ LISTOFSEU includes the path of seurate files, put them in different lines. By default, the pipeline standardize the seurat objects before integrating, you can change the default in ${SCRNABOX_PWD}/job_output/parameters/stepint_par.txt .","title":"- Standard scRNA"},{"location":"SCRNA/#scrnabox-pipeline-standard-scrnaseq-analysis-track","text":"","title":"ScRNAbox pipeline: Standard scRNAseq Analysis Track"},{"location":"SCRNA/#contents","text":"Introduction Setup Step 1: FASTQ pre-processing Step 2: Ambient RNA removal and create Seurat object Step 3: Quality control and filtering Step 4: Doublet removal Step 5: Integration and linear dimensional reduction Step 6: Clustering step 7: Cluster annotation step 8: Differential gene expression contrasts Integrating Seurat objects","title":"Contents"},{"location":"SCRNA/#introduction","text":"This guide provides instructions for analyzing single-cell RNA sequencing (scRNAseq) data using the Standard Analysis Track of the scRNAbox pipeline. The Standard Analysis Track is designed for scRNAseq experiments where each sample is captured and sequenced separately; thus, users should have unique FASTQ files for each of the samples in their experiment. If instead samples were pooled prior to sequencing, resulting in FASTQ files comprising scRNAseq data of multiple samples, users should leverage the Cell Hashtag scRNAseq Analysis Track. The main component of the scRNAbox pipeline is scrnabox.slurm , which is an open-source pipeline for scRNAseq analysis that is specifically designed to run on high-performance computing (HPC) systems using the Slurm Workload Manager . scrnabox.slurm outlines the Analytical Steps involved in a comprehensive scRNAseq analysis workflow, including FASTQ pre-processing, quality control and filtering, clustering, cluster annotation, and differential gene expression contrasts. The Analytical Steps involved in the Standard Analysis Track of the scRNAbox pipeline are outlined in the figure below. Note: This tutorial assumes that scrnabox.slurm , cellranger , R , and the required R packages have already been installed onto the HPC system. If this is not the case, please visit Installation to do so before proceeding. If the required packages are installed, you can proceed to Setup .","title":"Introduction"},{"location":"SCRNA/#setup","text":"Before running the pipeline, create a dedicated folder for the analysis (hereafter referred to as the working directory). Then, define the path of the working directory ( SCRNABOX_PWD= ) and the path to scrnabox.slurm ( SCRNABOX_HOME= ). For example: mkdir ~/working_directory cd ~/working_directory export SCRNABOX_HOME=~/scrnabox.slurm export SCRNABOX_PWD=~/working_directory For a description of the options for running scrnabox.slurm and to ensure that the path was properly defined, run the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh -h If the pipeline has been installed properly, the above command should return the folllowing: mandatory arguments: -d (--dir) = Working directory (where all the outputs will be printed) (give full path) --steps = Specify what steps, e.g., 2 to run just step 2, 2-4, run steps 2 through 4) optional arguments: -h (--help) = See helps regarding the pipeline options. --method = Choose what scRNA method you want to use; use HTO and SCRNA for for hashtag nad Standard scRNA, respectively. --nFeature_RNA_L = Lower threshold of number of unique RNA transcripts for each cell, it filters nFeature_RNA > nFeature_RNA_L. --nFeature_RNA_U = Upper threshold of number of unique RNA transcripts for each cell, it filters --nFeature_RNA_U. --nCount_RNA_L = Lower threshold for nCount_RNA, it filters nCount_RNA > nCount_RNA_L --nCount_RNA_U = Upper threshold for nCount_RNA, it filters nCount_RNA < nCount_RNA_U --mitochondria_percent_L = Lower threshold for the amount of mitochondrial transcript, it is in percent, mitochondria_percent > mitochondria_percent_L. --mitochondria_percent_U = Upper threshold for the amount of mitochondrial transcript, it is in percent, mitochondria_percent < mitochondria_percent_U. --log10GenesPerUMI_U = Upper threshold for the log number of genes per UMI for each cell, it is in percent,log10GenesPerUMI=log10(nFeature_RNA)/log10(nCount_RNA). mitochondria_percent < log10GenesPerUMI_U. --log10GenesPerUMI_L = Lower threshold for the log number of genes per UMI for each cell, log10GenesPerUMI=log10(nFeature_RNA)/log10(nCount_RNA). mitochondria_percent > log10GenesPerUMI_L. --msd = you can get the hashtag labels by running the following code --marker = Find marker. --sinfo = Do you need sample info? --fta = FindTransferAnchors --enrich = Annotation --dgelist = creates a DGEListobject from a table of counts obtained from seurate objects. --genotype = Run the genotype contrast. --celltype = Run the Genotype-cell contrast. --cont = You can directly call the contrast to the pipeline. --seulist = You can directly call the list of seurat objects to the pipeline. Next, run the pipeline initiation Step ( --steps 0 ) and define the Standard scRNAseq Analysis Track ( --method SCRNA ) using the following command from the working directory: cd ~/working_directory bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 0 \\ --method SCRNA After running the pipeline initiation Step, the structure of the working directory should be as follows: \u251c\u2500\u2500 working_directory \u251c\u2500\u2500 job_info \u251c\u2500\u2500 configs \u251c\u2500\u2500 logs \u251c\u2500\u2500 parameters The configs/ directory contains the scrnabox_config.ini file which allows users to specify their job allocations (memory, threads, and walltime) for each Analytical Step using the Slurm Workload Manager; The logs/ directory records the events of each Analytical Step; The parameters/ directory contains adjustable, Step-specific text files which allow users to define the execution parameters for each Analytical Step. Next, navigate to the scrnabox_config.ini file in ~/working_directory/job_info/configs to define the path to the R library ( R_LIB_PATH= ), the version of R ( R_VERSION= ), and the path to CellRanger ( MODULECELLRANGER= ). For example: MODULECELLRANGER=mugqic/cellranger/5.0.1 R_VERSION=4.2.1 R_LIB_PATH=Path_to_R_library Finally, in preparation for Step 1 (FASTQ pre-processing with CellRanger) users must create library.csv files for each of their samples, which defines the necessary information of the FASTQ files for the experiment. The structure of the library.csv file should be: fastqs,sample,library_type ~/fastqs/,CTRL1,Gene Expression The fastqs column defines the path to the directory that contains the FASTQ files for the experiment. The sample column defines the sample name of the corresponding FASTQ file. Please note that FASTQ files must be named according to standard CellRanger nomenclature. For example, \"CTRL1_S1_L001_R1_001.fastq\". For more information please visit CellRanger's documentation . The library_type column defines the assay type. For The Standard Analysis Track of scRNAbox, library_type will always be \"Gene Expression\". For example, if the experiment comprises four samples (two controls and two cases) the following steps should be taken: 1) Navigate to the working directory and create a samples_info folder: cd ~/working_directory mkdir samples_info 2) Navigate to the samples_info folder and create a folder for each sample. Please note that the sample names used here will eventually be used to define samples in the Seurat object, so choose them wisely: cd samples_info mkdir control1 mkdir control2 mkdir case1 mkdir case2 3) Navigate to the folder for each sample and create the library.csv file. After performing steps 1-3 above, the structure of the samples_info folder for an experiment with four samples should be: \u251c\u2500\u2500 working_directory \u251c\u2500\u2500 samples_info \u251c\u2500\u2500 control1 \u251c\u2500\u2500 library.csv \u251c\u2500\u2500 control2 \u251c\u2500\u2500 library.csv \u251c\u2500\u2500 case1 \u251c\u2500\u2500 library.csv \u251c\u2500\u2500 case2 \u251c\u2500\u2500 library.csv Upon completing the above steps to setup the pipeline, users can run their analysis. Please note that if you do not have access to FASTQ files for your experiment, you may intiate the pipeline at which ever Analytical Step takes your data object as input. In the case where FASTQ files are not available, users do not have to create the samples_info folder. For more information see Processed Data .","title":"Setup"},{"location":"SCRNA/#scrnabox-analytical-steps","text":"Specific Analytical Steps are called using the --steps flag. The output of each Analytical Step is deposited into its respective folder within the working directory (e.g. ~/working_directory/step1 ). Prior to running each Analytical Step, users are strongly encouraged to modify the execution parameters of the analysis using the adjustable, Step-specific parameters text files. The parameters text files are located in ~/working_directory/job_info/parameters . For instructions on how to modify these text files please see FAQ . To ensure replicability, a summary report file documents the execution parameters for each iteration of each analytical Step, which is located in ~/working_directory/job_info/summary_report.txt . For detailed descriptions of each Analytical Step please see our pre-print manuscript.","title":"scRNAbox Analytical Steps"},{"location":"SCRNA/#step-1-fastq-pre-processing","text":"In this step, feature-barcode expression matrices are generated from FASTQ files using the CellRanger counts pipeline. Given that CellRanger runs a user interface, it is recommended to run Step 1 in a 'screen'. The following parameters are adjustable for Step 1: Parameter Default Description REF_DIR_GRCH NULL Path to reference genome for FASTQ alignment. 10X Genomics reference genomes are available for download. For more information see their documentation . R1LENGTH NULL Minimum number of bases to retain for R1 sequence of gene expression MEMPERCORE 30 For clusters whose job managers do not support memory requests, it is possible to request memory in the form of cores. This option will scale up the number of threads requested via the MRO_THREADS variable according to how much memory a stage requires when given to the ratio of memory on your nodes. To run Step 1, use the following command: screen -S run_scrnabox bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 1 The resulting output files are deposited into ~/working_directory/step1 Parameter names need to be updated.","title":"Step 1: FASTQ pre-processing"},{"location":"SCRNA/#step-2-ambient-rna-removal-and-create-seurat-object","text":"In this step, the ambient RNA rate is estimated and the gene expression profiles are corrected for RNA contamination (optional) using SoupX (Young et al. 2020). Then, CellRanger- or SoupX-generated feature-barcode expression matrices are transformed into Seurat objects. Genes expressed in less than a minimum number of cells and cells expressing less than a minimum number of genes can be filtered. The following parameters are adjustable for Step 2: Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_ambient_RNA Yes Whether or not to correct the feature-barcode expression matrices for ambient RNA contamination par_count_matrices NULL If users skipped Step 1, the may provide the path to a directory that contains existing feature-barcode expression matrices to initiate the pipeline at Step 2 par_min.cells_L 0 Only retain genes expressed in a minimum number of cells par_min.features_L 0 Only retain cells expressing a minimum number of genes To run Step 2, use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 2 The resulting output files are deposited into ~/working_directory/step2","title":"Step 2: Ambient RNA removal and create Seurat object"},{"location":"SCRNA/#step-3-quality-control-and-filtering","text":"Low quality cells are filtered based on the user-defined thresholds for the number of genes detected per cell, number of unique transcripts detected per cell, percentage of mitochondrial-encoded transcripts, and percentage of ribosomal-encoded transcripts. Mitochondrial- and ribosomal-encoded genes can be filtered out, as well as a custom user-defined list of genes. Finally, normalization and scaling is performed on the individual Seurat objects prior to cell-cycle scoring. The following parameters are adjustable for Step 3: Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_seurat_object NULL If users skipped Steps 1 and 2, the may provide the path to a directory that contains existing Seurat objects to initiate the pipeline at Step 3 par_nFeature_RNA_L NULL Only retain cells expressing a minimum number of genes par_nFeature_RNA_U NULL Only retain cells expressing a maximum number of genes par_nCount_RNA_L NULL Only retain cells with a minimum number of unique transcripts par_nCount_RNA_U NULL Only retain cells with a maximum number of unique transcripts par_mitochondria_percent_L NULL Only retain cells with a minimum percentage of mitochondrial genes par_mitochondria_percent_U NULL Only retain cells with a maximum percentage of mitochondrial genes par_ribosomal_percent_L NULL Only retain cells with a minimum percentage of ribosomal genes par_ribosomal_percent_U NULL Only retain cells with a maximum percentage of ribosomal genes par_log10GenesPerUMI_L NULL Only retain cells with a minimum number of genes per unique molecular identifier par_log10GenesPerUMI_U NULL Only retain cells with a maximum number of genes per unique molecular identifier par_remove_mitochondrial_genes Yes Whether or not to remove mitochondrial genes par_remove_ribosomal_genes Yes Whether or not to remove ribosomal genes par_remove_genes NULL If users want to remove specific genes from their data, they may define a list of gene identifiers par_normalization.method LogNormalize Method to use for normalization par_scale.factor 10000 Scale factor for scaling the data par_selection.method vst Method for choosing the top variable features par_nfeatures 2500 Number of features to select as top variable features par_top 10 Number of most variable features to be reported in the csv file par_npcs_pca 30 Total Number of principal components to compute and store for principal component analysis (PCA) par_cells 500 Number of cells to include in Seurat's dimheatmap function par_dims 12 Number of dimensions to include in Seurat's dimheatmap function par_dims_umap 10 Number of dimensions to use as input features for uniform manifold approximation and projection (UMAP) par_n.neighbors 65 Number of neighboring points to use in local approximations of manifold structure To run Step 3, use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 3 The resulting output files are deposited into ~/working_directory/step3","title":"Step 3: Quality control and filtering"},{"location":"SCRNA/#step-4-doublet-removal","text":"Doublets are identified and removed from downstream analysis (optional) using the DoubletFinder tool (McGinnis et al. 2019). The following parameters are adjustable for Step 4: Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_dropDN Yes Whether or not to remove predicted doublets from downstream analyses par_PCs 20 The number of statistically significant principal components. Can be informed by elbow plot produced in Step 3 par_pN 0.25 The number of artificial doublets to generate. DoubletFinderr is largely invariant to this parameter. We suggest keeping 0.25 par_sct FALSE Logical representing whether SCTransform was used during original Seurat object pre-processing par_sample_names NULL A list of sample names for each sample in the experiement, corresponding to the expected doublet rates listed in the parameter below. Sample names should be the same as those used to produce the samples_info folder during the setup procedures. par_expected_doublet_rate NULL A list of expected doublet rates for each sample, corresponding to the sample names listed in the above parameter To run Step 4, use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 4 The resulting output files are deposited into ~/working_directory/step4","title":"Step 4: Doublet removal"},{"location":"SCRNA/#step-5-integration-and-linear-dimensional-reduction","text":"Individual Seurat objects are integrated to enable the joint analysis across samples runs using Seurat's integration algorithm (Stuart et al. 2019); if experiments are limited to a single sequencing run, the integration Step can be bypassed. Normalization, scaling, and Linear dimensional reduction is then performed on the resulting Seurat object to inform the optimal parameters for clustering in Step 6. The following parameters are adjustable for Step 5: Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_skip_integration No Whether or not to skip integration. This is applicable for experiments that comprises of only one sequencing run. par_FindIntegrationAnchors_dim 25 Which dimensions to use from the canonical correlation analysis (CCA) to specify the neighbor search space par_DefaultAssay RNA The assay to perform normalization, scaling, and linear dimensiona reduction on. For most use cases this will be RNA. par_normalization.method LogNormalize Method to use for normalization par_selection.method vst Method for detecting top variable features par_nfeatures 2500 Number of features to select as top variable features par_RunUMAP_n.neighbors 65 Number of neighboring points used in local approximations of manifold structure par_RunPCA_npcs 30 Total Number of principal components to compute and store for principal component analysis (PCA) par_RunUMAP_dims 10 Number of dimensions to use as input features for uniform manifold approximation and projection (UMAP) par_compute_jackstraw No Whether or not to perform JackStraw computation. This computation takes a long time. To run Step 5, use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 5 The resulting output files are deposited into ~/working_directory/step5","title":"Step 5: Integration and linear dimensional reduction"},{"location":"SCRNA/#step-6-clustering","text":"Clustering is performed to define groups of cells with similar expression profiles using the graph-based clustering approach implemented in the Seurat framework (Macosko et al. 2015). The following parameters are adjustable for Step 6: Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_skip_step5 No Whether or not the user skipped integration in Step 5 par_FindNeighbors_dims 30 Number of dimensions from linear dimensional reduction used as input to identify neighbours. Can be informed by the elbow and Jackstraw plots produced in Step 5 par_FindNeighbors_k.param 60 Defines k for the k-nearest neighbor algorithm par_FindNeighbors_prune.SNN 1/15 Sets the cutoff for acceptable Jaccard index when computing the neighborhood overlap for the shared nearest-neighbour (SNN) construction par_FindClusters_resolution 0.1 to 0.9, in intervals of 0.1 Value of the clustering resolution parameter. You may provide multiple resolution values par_compute_ARI Yes Whether or not you want to compute the Adjusted Rand Index (ARI) between clusters at a given clustering resolution par_RI_reps 100 Number of iterations for clustering the data at a given resolution in order to calculate the ARI To run Step 6, use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 6 The resulting output files are deposited into ~/working_directory/step6","title":"Step 6: Clustering"},{"location":"SCRNA/#step-7-cluster-annotation","text":"Cell populations, or clusters, with similar expression profiles are annotated to define cell types by three distinct methods: Method 1. Cluster marker gene set enrichment analysis (GSEA) : Seurat's FindAllMarkers function is used to identify differentially expressed marker genes (DEG) by the Wilcoxon rank-sum test (Macosko et al. 2015). DEGs in the positive direction (Log2 fold-change > 0.00) are then tested for enrichment across user-defined gene set libraries that define cell types using the EnrichR tool (Chen et al. 2013). Method 2. Module score : Seurat\u2019s implementation ( AddModuleScore ) of Tirosh et al.\u2019s algorithm is used to comparatively quantify the expression of gene sets across clusters at the single-cell level (Tirosh et al. 2016). Users must define their desired gene sets in the parameters file of Step 7. Gene sets should be defined in a csv file, where the column names correspond to the arbitrary name of the gene set and the corresponding rows define the genes in the gene set. For example: gene_set_1 gene_set_2 gene_set_3 CLDN5 IFITM3 TM4SF1 ANGPT2 EGFL7 IGFBP FLT1 A2M GIMAP7 DEPP1 SOD2 EMP2 TMSB10 PODXL B2M HLA-E VWF BST2 SLCO4A1 PECAM1 BSG TGM2 SLC2A3 PARP14 IFI27 TSC22D1 NFKBIA MT2A HLA-B ID3 EPAS1 IFITM2 Method 3. Reference-based annotation : Seurat's FindTransferAnchors and TransferData functions are used to leverage cell-type annotations from a reference Seurat object and generate annotation predictions for the query dataset (Macosko et al. 2015). User's must define the location of their referene Seurat object in the parameters file of Step 7. In addition, scRNAbox allows users to visualize the expression of select features at the cluster or cell level via a user-provided list of gene identifiers in order to further inform the cellular species that make up specific clusters. The following parameters are adjustable for Step 7: Parameter Default Description (the cluster annotation method associated with the parameter is shown) par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_level_cluster integrated_snn_res.0.7 The cluster resolution that you want to use for downstream analyses. If you skipped integration in Step 5, use par_level_cluster='RNA_snn_res.0.7', if you want to proceed with a clustering resolution of 0.7 par_top_sel 5 Method 1: Number of top markers to identify based on avg_log2FC par_db Descartes_Cell_Types_and_Tissue_2021, CellMarker_Augmented_2021, Azimuth_Cell_Types_2021 Method 1: Character vector of EnrichR databases that define cell types. The top marker genes for each cluster will be tested for enrichment across these databases. par_compute_module_score Yes Method 2: Whether or not to perform the module score computation par_compute_module_score Yes Method 2: Whether or not to perform the module score computation par_module_score NULL Method 2: Path defining the location of the directory that contains the csv file of the gene sets used to compute the module score par_reference NULL Method 3: Path defining the location of the reference Seurat object par_level_celltype NULL Method 3: The name of the metadata column in the reference Seurat object that defines cell types par_FindTransferAnchors_dim 10 Method 3: Number of dimensions from linear dimensional reduction used to find transfer anchors between the reference and query Seurat objects par_futureglobalsmaxSize 50000 * 1024^2 Method 3: This will increase your RAM usage so set this number mindfully par_visualize_select_features No Visualize select features: Whether or not to visualize select features par_select_features NULL Visualize select features: list of gene identifiers to visualize the expression of select features To identify cluster marker genes ( Method 1 ), compute the module score for user-defined gene sets ( Method 2 ), and visualize select features , use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --marker T Then, to test the top cluster marker genes for enrichment across gene set libraries that define cell types ( Method 1 ), use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --enrich T Please note that in order to test the cluster marker genes for enrichment across EnrichR libraries, the HPC must have access to the internet. If your HPC cannot access the internet, it is possible to run the enrichment step on your local machine directly in R. To do so, begin by downloading the Step 6 Seurat RDS object ( ~/working_directory/step6/objs6/seu_step6.rds ) and cluster marker RDS object ( ~/working_directory/step7/info7/marker/ClusterMarkers.rds ) to your computer using the following commands scp username@beluga.computecanada.ca:~/working_directory/step7/info7/marker/ClusterMarkers.rds ~/Desktop/working_directory scp username@beluga.computecanada.ca:~/working_directory/step6/objs6/seu_step6.rds ~/Desktop/working_directory Then run the follwing code in R: SCRNABOX_PWD <- \"~/Desktop/working_directory\" dir.create(\"SCRNABOX_PWD/step7/annot\") level_cluster='integrated_snn_res.0.7' ClusterMarkers='SCRNABOX_PWD/step7/info7/ClusterMarkers.rds' PWD='SCRNABOX_PWD/step7/annot/' PSUE='SCRNABOX_PWD/step6/objs6/seu_step6.rds' top_sel=5 db <- c('Descartes_Cell_Types_and_Tissue_2021','CellMarker_Augmented_2021','Azimuth_Cell_Types_2021') scrnaboxR::annotation(level_cluster,ClusterMarkers,PWD,PSUE,top_sel,db) To perform reference-based annotation ( Method 3 ), run the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --fta T The resulting output files are deposited into ~/working_directory/step7 .","title":"Step 7: Cluster annotation"},{"location":"SCRNA/#step-8-differential-gene-expression-contrasts","text":"This step performs differetial gene expression (DGE) analyses according to user-defined contrasts. Contrast can be performed between samples (e.g. case vs control; sample-sample contrasts ) or between samples, stratified by cell type (e.g. case vs control for excitatory neurons only; sample-cell contrasts ). The following parameters are adjustable for Step 8: Parameter Default Description (the cluster annotation method associated with the parameter is shown) par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_level_cluster integrated_snn_res.0.7 The cluster resolution that you used in the cluster annotation module. If you skipped integration in Step 5, use par_level_cluster='RNA_snn_res.0.7', if you want to proceed with a clustering resolution of 0.7 par_step8_clus_label NULL List of user-currated cluster labels obtained from the annotation module. Make sure to have the same number of labels as clusters at the desired clustering resolution. par_new_genotype yes Whether or not you want to add new sample labels to simplify the contrasts. For example, you may wish to set both control1 and control2 as control. par_old_sample_label NULL list of old sample labels (i.e. those used to create the samples_info folder in the setup procedures) par_new_sample_label NULL list of new sample labels corresponding to the old sample labels defined in the parameter above The first step of the DGE contrasts module is to create a DGEListobject. This step may require alot of RAM, we suggest 3*size(seu_int_clu.rds). Users can adjust the RAM in the scrnabox_config.ini file located in ~/working_directory/job_info/configs . To create a DGEListobject, run the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --dgelist T The next step is to perform DGE contrasts. As mentioned, useers can perform sample-sample contrasts or sample-cell contrasts To perform sample-sample contrasts , users must first modify the step8_contrast_genotype.txt contrast matrix located in ~/working_directory/job_info/parameters . The contrast matrix comprises three columns that define the arbitrary name of the contrast (cont_name), the control sample (control), and the case sample (versus). For example: cont_name control versus design1 control case1,case2,case3,case4,case5 design2 control case1 design3 control case2 design4 control case3 design5 control case4 design6 control case5 design7 control case1,case2,case3,case4 design8 control case1,case2,case3 design9 control case1,case2 To perform sample-sample contrasts , run the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --genotype T To perform sample-cell contrasts , users must first modify the step8_contrast_celltype.txt contrast matrix located in ~/working_directory/job_info/parameters . The contrast matrix comprises four columns that define the arbitrary name of the contrast (cont_name), the cell type (cell), the control sample (control), and the case sample (versus). For example: cont_name cell control versus design1 excitatory_neuron control case1,case2,case3,case4,case5 design2 excitatory_neuron control case1 design3 excitatory_neuron control case2 design4 excitatory_neuron control case3 design5 excitatory_neuron control case4 design6 excitatory_neuron control case5 design7 excitatory_neuron control case1,case2,case3,case4 design8 excitatory_neuron control case1,case2,case3 design9 excitatory_neuron control case1,case2 To perform sample-cell contrasts , run the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --celltype T The resulting output files are deposited into ~/working_directory/step8 . Note: that if you have a large number of contrasts to run, it may be more efficient to split them up and submit batch jobs instead.","title":"Step 8: Differential gene expression contrasts"},{"location":"SCRNA/#integrating-seurat-objects","text":"To combine different seurat objects, you can run the following codes. LISTOFSEU=~/list.txt bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps integrate \\ --seulist ${LISTOFSEU} \\ LISTOFSEU includes the path of seurate files, put them in different lines. By default, the pipeline standardize the seurat objects before integrating, you can change the default in ${SCRNABOX_PWD}/job_output/parameters/stepint_par.txt .","title":"Integrating Seurat objects"},{"location":"about/","text":"Coming soon","title":"Coming soon"},{"location":"about/#coming-soon","text":"","title":"Coming soon"},{"location":"changelog/","text":"Changelog v0.1.1 This is the initial release. v0.1.2 Deployed on 2023-08-23 -- new features Possibility to consider multiple control Works with sole sample v0.1.25 Supposed to add Complete the documentation Add CellBender","title":"- Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#v011","text":"This is the initial release.","title":"v0.1.1"},{"location":"changelog/#v012","text":"Deployed on 2023-08-23 -- new features Possibility to consider multiple control Works with sole sample","title":"v0.1.2"},{"location":"changelog/#v0125","text":"Supposed to add Complete the documentation Add CellBender","title":"v0.1.25"},{"location":"contributing/","text":"Contributing This is an early version, any contribute or suggestion is appreciated, it is supposed to be an easy-to-use pipline for scRNA analysis, so you can directly contact with Saeid Amiri or Rhalena Thomas . If you encounter any issue , please file its Github repository.","title":"- Contributing"},{"location":"contributing/#contributing","text":"This is an early version, any contribute or suggestion is appreciated, it is supposed to be an easy-to-use pipline for scRNA analysis, so you can directly contact with Saeid Amiri or Rhalena Thomas . If you encounter any issue , please file its Github repository.","title":"Contributing"},{"location":"installation/","text":"Installation scrnabox.slurm is written in bash and can be used with any Slurm system. To download the latest version of scrnabox.slurm (v0.1.35) run the following command: wget https://github.com/neurobioinfo/scrnabox/releases/download/v0.1.35/scrnabox.slurm.zip unzip scrnabox.slurm.zip For a description of the options for running scrnabox.slurm run the following command: bash ./scrnabox.slurm/launch_scrnabox.sh -h scrnabox.slurm requires that cellranger and R are also installed on the HPC system. In addition, the following R packages must be loaded: 'Seurat','ggplot2', 'dplyr', 'foreach', 'doParallel', 'Matrix', 'DoubletFinder','cowplot','clustree' . Then, install the 'scrnaboxR' R package by running the following command: devtools::install_github(\"neurobioinfo/scrnabox/scrnaboxR\") Please note that all R packages must be loaded to a common R library. Shown below is an example of how to load packages into a common library in R. R_LIB_PATH=\u201cPath_to_R_library\u201d .libPaths(R_LIB_PATH) devtools::install_github(\"neurobioinfo/scrnabox/scrnaboxR\") Upon installing scrnabox.slurm , cellranger , R , and the required R packages, users can run the pipeline initiation Step and define their desired Analysis Track (SCRNA or HTO for Standard scRNAseq or Cell Hashtag scRNAseq, respectively) using the following command: bash ./scrnabox.slurm/launch_scrnabox.sh \\ -d ./working_directory \\ --steps 0 \\ --method SCRNA After initiating the pipeline, the structure of the working directory should be as follows: \u251c\u2500\u2500 working_directory \u251c\u2500\u2500 job_info \u251c\u2500\u2500 configs \u251c\u2500\u2500 logs \u251c\u2500\u2500 parameters The configs/ directory contains the scrnabox_config.ini file which allows users to specify their job allocations (memory, threads, and walltime) for each Analytical Step using the Slurm Workload Manager The logs/ directory records the events of each Analytical Step The parameters/ directory contains adjustable, Step-specific text files which allow users to define the execution parameters for each Analytical Step Users must then navigate to the scrnabox_config.ini file in ~/working_directory/job_info/configs to define the location of their R library ( R_LIB_PATH= ), their version of R ( R_VERSION= ), and the location of CellRanger ( MODULECELLRANGER= ). For example: MODULECELLRANGER=mugqic/cellranger/5.0.1 R_VERSION=4.2.1 R_LIB_PATH=Path_to_R_library Upon completing the installation procedures, users can proceed with the scRNAbox pipeline using either the Standard scRNAseq Analysis Track or Cell Hashtag scRNAseq Analysis Track .","title":"Installation"},{"location":"installation/#installation","text":"scrnabox.slurm is written in bash and can be used with any Slurm system. To download the latest version of scrnabox.slurm (v0.1.35) run the following command: wget https://github.com/neurobioinfo/scrnabox/releases/download/v0.1.35/scrnabox.slurm.zip unzip scrnabox.slurm.zip For a description of the options for running scrnabox.slurm run the following command: bash ./scrnabox.slurm/launch_scrnabox.sh -h scrnabox.slurm requires that cellranger and R are also installed on the HPC system. In addition, the following R packages must be loaded: 'Seurat','ggplot2', 'dplyr', 'foreach', 'doParallel', 'Matrix', 'DoubletFinder','cowplot','clustree' . Then, install the 'scrnaboxR' R package by running the following command: devtools::install_github(\"neurobioinfo/scrnabox/scrnaboxR\") Please note that all R packages must be loaded to a common R library. Shown below is an example of how to load packages into a common library in R. R_LIB_PATH=\u201cPath_to_R_library\u201d .libPaths(R_LIB_PATH) devtools::install_github(\"neurobioinfo/scrnabox/scrnaboxR\") Upon installing scrnabox.slurm , cellranger , R , and the required R packages, users can run the pipeline initiation Step and define their desired Analysis Track (SCRNA or HTO for Standard scRNAseq or Cell Hashtag scRNAseq, respectively) using the following command: bash ./scrnabox.slurm/launch_scrnabox.sh \\ -d ./working_directory \\ --steps 0 \\ --method SCRNA After initiating the pipeline, the structure of the working directory should be as follows: \u251c\u2500\u2500 working_directory \u251c\u2500\u2500 job_info \u251c\u2500\u2500 configs \u251c\u2500\u2500 logs \u251c\u2500\u2500 parameters The configs/ directory contains the scrnabox_config.ini file which allows users to specify their job allocations (memory, threads, and walltime) for each Analytical Step using the Slurm Workload Manager The logs/ directory records the events of each Analytical Step The parameters/ directory contains adjustable, Step-specific text files which allow users to define the execution parameters for each Analytical Step Users must then navigate to the scrnabox_config.ini file in ~/working_directory/job_info/configs to define the location of their R library ( R_LIB_PATH= ), their version of R ( R_VERSION= ), and the location of CellRanger ( MODULECELLRANGER= ). For example: MODULECELLRANGER=mugqic/cellranger/5.0.1 R_VERSION=4.2.1 R_LIB_PATH=Path_to_R_library Upon completing the installation procedures, users can proceed with the scRNAbox pipeline using either the Standard scRNAseq Analysis Track or Cell Hashtag scRNAseq Analysis Track .","title":"Installation"},{"location":"reference/","text":"Adjustable execution parameters for the scRNAbox pipeline Standard scRNAseq Analysis Track Cell Hashtag scRNAseq Analysis Track Standard scRNAseq Analysis Track Step 1 Parameter Default Description REF_DIR_GRCH NULL Path to reference genome for FASTQ alignment. 10X Genomics reference genomes are available for download. For more information see their documentation . R1LENGTH NULL Minimum number of bases to retain for R1 sequence of gene expression MEMPERCORE 30 For clusters whose job managers do not support memory requests, it is possible to request memory in the form of cores. This option will scale up the number of threads requested via the MRO_THREADS variable according to how much memory a stage requires when given to the ratio of memory on your nodes. Step 2 Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_ambient_RNA Yes Whether or not to correct the feature-barcode expression matrices for ambient RNA contamination par_count_matrices NULL If users skipped Step 1, the may provide the path to a directory that contains existing feature-barcode expression matrices to initiate the pipeline at Step 2 par_min.cells_L 0 Only retain genes expressed in a minimum number of cells par_min.features_L 0 Only retain cells expressing a minimum number of genes Step 3 Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_seurat_object NULL If users skipped Steps 1 and 2, the may provide the path to a directory that contains existing Seurat objects to initiate the pipeline at Step 3 par_nFeature_RNA_L NULL Only retain cells expressing a minimum number of genes par_nFeature_RNA_U NULL Only retain cells expressing a maximum number of genes par_nCount_RNA_L NULL Only retain cells with a minimum number of unique transcripts par_nCount_RNA_U NULL Only retain cells with a maximum number of unique transcripts par_mitochondria_percent_L NULL Only retain cells with a minimum percentage of mitochondrial genes par_mitochondria_percent_U NULL Only retain cells with a maximum percentage of mitochondrial genes par_ribosomal_percent_L NULL Only retain cells with a minimum percentage of ribosomal genes par_ribosomal_percent_U NULL Only retain cells with a maximum percentage of ribosomal genes par_log10GenesPerUMI_L NULL Only retain cells with a minimum number of genes per unique molecular identifier par_log10GenesPerUMI_U NULL Only retain cells with a maximum number of genes per unique molecular identifier par_remove_mitochondrial_genes Yes Whether or not to remove mitochondrial genes par_remove_ribosomal_genes Yes Whether or not to remove ribosomal genes par_remove_genes NULL If users want to remove specific genes from their data, they may define a list of gene identifiers par_normalization.method LogNormalize Method to use for normalization par_scale.factor 10000 Scale factor for scaling the data par_selection.method vst Method for choosing the top variable features par_nfeatures 2500 Number of features to select as top variable features par_top 10 Number of most variable features to be reported in the csv file par_npcs_pca 30 Total Number of principal components to compute and store for principal component analysis (PCA) par_cells 500 Number of cells to include in Seurat's dimheatmap function par_dims 12 Number of dimensions to include in Seurat's dimheatmap function par_dims_umap 10 Number of dimensions to use as input features for uniform manifold approximation and projection (UMAP) par_n.neighbors 65 Number of neighboring points to use in local approximations of manifold structure Step 4 Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_dropDN Yes Whether or not to remove predicted doublets from downstream analyses par_PCs 20 The number of statistically significant principal components. Can be informed by elbow plot produced in Step 3 par_pN 0.25 The number of artificial doublets to generate. DoubletFinderr is largely invariant to this parameter. We suggest keeping 0.25 par_sct FALSE Logical representing whether SCTransform was used during original Seurat object pre-processing par_sample_names NULL A list of sample names for each sample in the experiement, corresponding to the expected doublet rates listed in the parameter below. Sample names should be the same as those used to produce the samples_info folder during the setup procedures. par_expected_doublet_rate NULL A list of expected doublet rates for each sample, corresponding to the sample names listed in the above parameter Step 5 Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_skip_integration No Whether or not to skip integration. This is applicable for experiments that comprises of only one sequencing run. par_FindIntegrationAnchors_dim 25 Which dimensions to use from the canonical correlation analysis (CCA) to specify the neighbor search space par_DefaultAssay RNA The assay to perform normalization, scaling, and linear dimensiona reduction on. For most use cases this will be RNA. par_normalization.method LogNormalize Method to use for normalization par_selection.method vst Method for detecting top variable features par_nfeatures 2500 Number of features to select as top variable features par_RunUMAP_n.neighbors 65 Number of neighboring points used in local approximations of manifold structure par_RunPCA_npcs 30 Total Number of principal components to compute and store for principal component analysis (PCA) par_RunUMAP_dims 10 Number of dimensions to use as input features for uniform manifold approximation and projection (UMAP) par_compute_jackstraw No Whether or not to perform JackStraw computation. This computation takes a long time. Step 6 Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_skip_step5 No Whether or not the user skipped integration in Step 5 par_FindNeighbors_dims 30 Number of dimensions from linear dimensional reduction used as input to identify neighbours. Can be informed by the elbow and Jackstraw plots produced in Step 5 par_FindNeighbors_k.param 60 Defines k for the k-nearest neighbor algorithm par_FindNeighbors_prune.SNN 1/15 Sets the cutoff for acceptable Jaccard index when computing the neighborhood overlap for the shared nearest-neighbour (SNN) construction par_FindClusters_resolution 0.1 to 0.9, in intervals of 0.1 Value of the clustering resolution parameter. You may provide multiple resolution values par_compute_ARI Yes Whether or not you want to compute the Adjusted Rand Index (ARI) between clusters at a given clustering resolution par_RI_reps 100 Number of iterations for clustering the data at a given resolution in order to calculate the ARI Step 7 Parameter Default Description (the cluster annotation method associated with the parameter is shown) par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_level_cluster integrated_snn_res.0.7 The cluster resolution that you want to use for downstream analyses. If you skipped integration in Step 5, use par_level_cluster='RNA_snn_res.0.7', if you want to proceed with a clustering resolution of 0.7 par_top_sel 5 Method 1: Number of top markers to identify based on avg_log2FC par_db Descartes_Cell_Types_and_Tissue_2021, CellMarker_Augmented_2021, Azimuth_Cell_Types_2021 Method 1: Character vector of EnrichR databases that define cell types. The top marker genes for each cluster will be tested for enrichment across these databases. par_compute_module_score Yes Method 2: Whether or not to perform the module score computation par_compute_module_score Yes Method 2: Whether or not to perform the module score computation par_module_score NULL Method 2: Path defining the location of the directory that contains the csv file of the gene sets used to compute the module score par_reference NULL Method 3: Path defining the location of the reference Seurat object par_level_celltype NULL Method 3: The name of the metadata column in the reference Seurat object that defines cell types par_FindTransferAnchors_dim 10 Method 3: Number of dimensions from linear dimensional reduction used to find transfer anchors between the reference and query Seurat objects par_futureglobalsmaxSize 50000 * 1024^2 Method 3: This will increase your RAM usage so set this number mindfully par_visualize_select_features No Visualize select features: Whether or not to visualize select features par_select_features NULL Visualize select features: list of gene identifiers to visualize the expression of select features Step 8 Parameter Default Description (the cluster annotation method associated with the parameter is shown) par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_level_cluster integrated_snn_res.0.7 The cluster resolution that you used in the cluster annotation module. If you skipped integration in Step 5, use par_level_cluster='RNA_snn_res.0.7', if you want to proceed with a clustering resolution of 0.7 par_step8_clus_label NULL List of user-currated cluster labels obtained from the annotation module. Make sure to have the same number of labels as clusters at the desired clustering resolution. par_new_genotype yes Whether or not you want to add new sample labels to simplify the contrasts. For example, you may wish to set both control1 and control2 as control. par_old_sample_label NULL list of old sample labels (i.e. those used to create the samples_info folder in the setup procedures) par_new_sample_label NULL list of new sample labels corresponding to the old sample labels defined in the parameter above Cell Hashtag scRNAseq Analysis Track Step 1 Parameter Default Description REF_DIR_GRCH NULL Path to reference genome for FASTQ alignment. 10X Genomics reference genomes are available for download. For more information see their documentation . R1LENGTH NULL Minimum number of bases to retain for R1 sequence of gene expression MEMPERCORE 30 For clusters whose job managers do not support memory requests, it is possible to request memory in the form of cores. This option will scale up the number of threads requested via the MRO_THREADS variable according to how much memory a stage requires when given to the ratio of memory on your nodes. Step 2 Parameter Default Description Save_RNA No Whether or not to export an RNA expression matrix Save_metadata No Whether or not to export a metadata dataframe count_matrices NULL If users skipped Step 1, the may provide the path to a directory that contains existing feature-barcode expression matrices to initiate the pipeline at Step 2 min.cells_L 0 Only retain genes expressed in a minimum number of cells min.features_L 0 Only retain cells expressing a minimum number of genes Step 3 Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_seurat_object NULL If users skipped Steps 1 and 2, the may provide the path to a directory that contains existing Seurat objects to initiate the pipeline at Step 3 par_nFeature_RNA_L NULL Only retain cells expressing a minimum number of genes par_nFeature_RNA_U NULL Only retain cells expressing a maximum number of genes par_nCount_RNA_L NULL Only retain cells with a minimum number of unique transcripts par_nCount_RNA_U NULL Only retain cells with a maximum number of unique transcripts par_mitochondria_percent_L NULL Only retain cells with a minimum percentage of mitochondrial genes par_mitochondria_percent_U NULL Only retain cells with a maximum percentage of mitochondrial genes par_ribosomal_percent_L NULL Only retain cells with a minimum percentage of ribosomal genes par_ribosomal_percent_U NULL Only retain cells with a maximum percentage of ribosomal genes par_log10GenesPerUMI_L NULL Only retain cells with a minimum number of genes per unique molecular identifier par_log10GenesPerUMI_U NULL Only retain cells with a maximum number of genes per unique molecular identifier par_remove_mitochondrial_genes Yes Whether or not to remove mitochondrial genes par_remove_ribosomal_genes Yes Whether or not to remove ribosomal genes par_remove_genes NULL If users want to remove specific genes from their data, they may define a list of gene identifiers par_normalization.method LogNormalize Method to use for normalization par_scale.factor 10000 Scale factor for scaling the data par_selection.method vst Method for choosing the top variable features par_nfeatures 2500 Number of features to select as top variable features par_top 10 Number of most variable features to be reported in the csv file par_npcs_pca 30 Total Number of principal components to compute and store for principal component analysis (PCA) par_cells 500 Number of cells to include in Seurat's dimheatmap function par_dims 12 Number of dimensions to include in Seurat's dimheatmap function par_dims_umap 10 Number of dimensions to use as input features for uniform manifold approximation and projection (UMAP) par_n.neighbors 65 Number of neighboring points to use in local approximations of manifold structure Step 4 Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_normalization.method CLR Method for normalizing the HTO assay par_scale.factor 1000 Scale factor for scaling the HTO assay par_selection.method vst Method for selecting the most variable features in the HTO assay par_nfeatures 5 Number of features to select as top variable features for the HTO assay. This value is dependent on the number of sample specific barcodes used in the experiment par_dims_umap 5 Number of dimensions to use as input features for uniform manifold approximation and projection (UMAP) of HTO assay par_n.neighbor 65 Number of neighboring points to use in local approximations of manifold structure par_dimensionality_reduction Yes Whether or not to perform linear dimensionality reduction on the HTO assay par_npcs_pca 30 Total Number of principal components to compute and store for principal component analysis (PCA) of HTO assay par_dropDN Yes Whether or not to remove predicted doublets and negatives from downstream analyses par_label_dropDN Doublet, Negative Labels used to identify doublet and negative droplets par_quantile 0.9 The quantile to use for droplet classification using MULTIseqDemux par_autoThresh TRUE Whether or not to perform automated threshold finding to define the best quantile for droplet classification using MULTIseqDemux par_maxiter 5 Maximum number of iterations to use if autoThresh = TRUE par_RidgePlot_ncol 3 Number of columns used to display RidgePlots, which visualizes the enrichment of barcode labels across samples par_old_antibody_label NULL If you wish to rename the barcode labels, first list the existing barcode labels in this parameter. old antibody labels can be identified in the \"_old_antibody_label_MULTIseqDemuxHTOcounts\" file produced by running Step 4 msd par_new_antibody_label NULL If you wish to rename the barcode labels, list the new labels corresponding to the old labels listed in the parameter above Step 5 Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_skip_integration No Whether or not to skip integration. This is applicable for experiments that comprises of only one sequencing run. par_FindIntegrationAnchors_dim 25 Which dimensions to use from the canonical correlation analysis (CCA) to specify the neighbor search space par_DefaultAssay RNA The assay to perform normalization, scaling, and linear dimensiona reduction on. For most use cases this will be RNA. par_normalization.method LogNormalize Method to use for normalization par_scale.factor 1000 Scale factor for scaling the data par_selection.method vst Method for detecting top variable features par_nfeatures 2500 Number of features to select as top variable features par_RunUMAP_n.neighbors 65 Number of neighboring points used in local approximations of manifold structure par_RunPCA_npcs 30 Total Number of principal components to compute and store for principal component analysis (PCA) par_RunUMAP_dims 10 Number of dimensions to use as input features for uniform manifold approximation and projection (UMAP) par_compute_jackstraw No Whether or not to perform JackStraw computation. This computation takes a long time. Step 6 Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_skip_step5 No Whether or not the user skipped integration in Step 5 par_FindNeighbors_dims 30 Number of dimensions from linear dimensional reduction used as input to identify neighbours. Can be informed by the elbow and Jackstraw plots produced in Step 5 par_FindNeighbors_k.param 60 Defines k for the k-nearest neighbor algorithm par_FindNeighbors_prune.SNN 1/15 Sets the cutoff for acceptable Jaccard index when computing the neighborhood overlap for the shared nearest-neighbour (SNN) construction par_FindClusters_resolution 0.1 to 0.9, in intervals of 0.1 Value of the clustering resolution parameter. You may provide multiple resolution values par_compute_ARI Yes Whether or not you want to compute the Adjusted Rand Index (ARI) between clusters at a given clustering resolution par_RI_reps 100 Number of iterations for clustering the data at a given resolution in order to calculate the ARI Step 7 Parameter Default Description (the cluster annotation method associated with the parameter is shown) par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_level_cluster integrated_snn_res.0.7 The cluster resolution that you want to use for downstream analyses. If you skipped integration in Step 5, use par_level_cluster='RNA_snn_res.0.7', if you want to proceed with a clustering resolution of 0.7 par_level_genotype MULTI_ID_Lables Name of the metadata column in your Seurat object that describes the sample names par_top_sel 5 Method 1: Number of top markers to identify based on avg_log2FC par_db Descartes_Cell_Types_and_Tissue_2021, CellMarker_Augmented_2021, Azimuth_Cell_Types_2021 Method 1: Character vector of EnrichR databases that define cell types. The top marker genes for each cluster will be tested for enrichment across these databases. par_compute_module_score Yes Method 2: Whether or not to perform the module score computation par_compute_module_score Yes Method 2: Whether or not to perform the module score computation par_module_score NULL Method 2: Path defining the location of the directory that contains the csv file of the gene sets used to compute the module score par_reference NULL Method 3: Path defining the location of the reference Seurat object par_level_celltype NULL Method 3: The name of the metadata column in the reference Seurat object that defines cell types par_FindTransferAnchors_dim 10 Method 3: Number of dimensions from linear dimensional reduction used to find transfer anchors between the reference and query Seurat objects par_futureglobalsmaxSize 50000 * 1024^2 Method 3: This will increase your RAM usage so set this number mindfully par_visualize_select_features No Visualize select features: Whether or not to visualize select features par_select_features NULL Visualize select features: list of gene identifiers to visualize the expression of select features Step 8 Parameter Default Description (the cluster annotation method associated with the parameter is shown) par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_level_cluster integrated_snn_res.0.7 The cluster resolution that you used in the cluster annotation module. If you skipped integration in Step 5, use par_level_cluster='RNA_snn_res.0.7', if you want to proceed with a clustering resolution of 0.7 par_step8_clus_label NULL List of user-currated cluster labels obtained from the annotation module. Make sure to have the same number of labels as clusters at the desired clustering resolution. par_new_genotype yes Whether or not you want to add new sample labels to simplify the contrasts. For example, you may wish to set both control1 and control2 as control. par_old_antibody_label NULL list of old sample labels (i.e. those used to create the samples_info folder in the setup procedures) par_new_antibody_label NULL list of new sample labels corresponding to the old sample labels defined in the parameter above","title":"Reference"},{"location":"reference/#adjustable-execution-parameters-for-the-scrnabox-pipeline","text":"Standard scRNAseq Analysis Track Cell Hashtag scRNAseq Analysis Track","title":"Adjustable execution parameters for the scRNAbox pipeline"},{"location":"reference/#standard-scrnaseq-analysis-track","text":"","title":"Standard scRNAseq Analysis Track"},{"location":"reference/#step-1","text":"Parameter Default Description REF_DIR_GRCH NULL Path to reference genome for FASTQ alignment. 10X Genomics reference genomes are available for download. For more information see their documentation . R1LENGTH NULL Minimum number of bases to retain for R1 sequence of gene expression MEMPERCORE 30 For clusters whose job managers do not support memory requests, it is possible to request memory in the form of cores. This option will scale up the number of threads requested via the MRO_THREADS variable according to how much memory a stage requires when given to the ratio of memory on your nodes.","title":"Step 1"},{"location":"reference/#step-2","text":"Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_ambient_RNA Yes Whether or not to correct the feature-barcode expression matrices for ambient RNA contamination par_count_matrices NULL If users skipped Step 1, the may provide the path to a directory that contains existing feature-barcode expression matrices to initiate the pipeline at Step 2 par_min.cells_L 0 Only retain genes expressed in a minimum number of cells par_min.features_L 0 Only retain cells expressing a minimum number of genes","title":"Step 2"},{"location":"reference/#step-3","text":"Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_seurat_object NULL If users skipped Steps 1 and 2, the may provide the path to a directory that contains existing Seurat objects to initiate the pipeline at Step 3 par_nFeature_RNA_L NULL Only retain cells expressing a minimum number of genes par_nFeature_RNA_U NULL Only retain cells expressing a maximum number of genes par_nCount_RNA_L NULL Only retain cells with a minimum number of unique transcripts par_nCount_RNA_U NULL Only retain cells with a maximum number of unique transcripts par_mitochondria_percent_L NULL Only retain cells with a minimum percentage of mitochondrial genes par_mitochondria_percent_U NULL Only retain cells with a maximum percentage of mitochondrial genes par_ribosomal_percent_L NULL Only retain cells with a minimum percentage of ribosomal genes par_ribosomal_percent_U NULL Only retain cells with a maximum percentage of ribosomal genes par_log10GenesPerUMI_L NULL Only retain cells with a minimum number of genes per unique molecular identifier par_log10GenesPerUMI_U NULL Only retain cells with a maximum number of genes per unique molecular identifier par_remove_mitochondrial_genes Yes Whether or not to remove mitochondrial genes par_remove_ribosomal_genes Yes Whether or not to remove ribosomal genes par_remove_genes NULL If users want to remove specific genes from their data, they may define a list of gene identifiers par_normalization.method LogNormalize Method to use for normalization par_scale.factor 10000 Scale factor for scaling the data par_selection.method vst Method for choosing the top variable features par_nfeatures 2500 Number of features to select as top variable features par_top 10 Number of most variable features to be reported in the csv file par_npcs_pca 30 Total Number of principal components to compute and store for principal component analysis (PCA) par_cells 500 Number of cells to include in Seurat's dimheatmap function par_dims 12 Number of dimensions to include in Seurat's dimheatmap function par_dims_umap 10 Number of dimensions to use as input features for uniform manifold approximation and projection (UMAP) par_n.neighbors 65 Number of neighboring points to use in local approximations of manifold structure","title":"Step 3"},{"location":"reference/#step-4","text":"Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_dropDN Yes Whether or not to remove predicted doublets from downstream analyses par_PCs 20 The number of statistically significant principal components. Can be informed by elbow plot produced in Step 3 par_pN 0.25 The number of artificial doublets to generate. DoubletFinderr is largely invariant to this parameter. We suggest keeping 0.25 par_sct FALSE Logical representing whether SCTransform was used during original Seurat object pre-processing par_sample_names NULL A list of sample names for each sample in the experiement, corresponding to the expected doublet rates listed in the parameter below. Sample names should be the same as those used to produce the samples_info folder during the setup procedures. par_expected_doublet_rate NULL A list of expected doublet rates for each sample, corresponding to the sample names listed in the above parameter","title":"Step 4"},{"location":"reference/#step-5","text":"Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_skip_integration No Whether or not to skip integration. This is applicable for experiments that comprises of only one sequencing run. par_FindIntegrationAnchors_dim 25 Which dimensions to use from the canonical correlation analysis (CCA) to specify the neighbor search space par_DefaultAssay RNA The assay to perform normalization, scaling, and linear dimensiona reduction on. For most use cases this will be RNA. par_normalization.method LogNormalize Method to use for normalization par_selection.method vst Method for detecting top variable features par_nfeatures 2500 Number of features to select as top variable features par_RunUMAP_n.neighbors 65 Number of neighboring points used in local approximations of manifold structure par_RunPCA_npcs 30 Total Number of principal components to compute and store for principal component analysis (PCA) par_RunUMAP_dims 10 Number of dimensions to use as input features for uniform manifold approximation and projection (UMAP) par_compute_jackstraw No Whether or not to perform JackStraw computation. This computation takes a long time.","title":"Step 5"},{"location":"reference/#step-6","text":"Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_skip_step5 No Whether or not the user skipped integration in Step 5 par_FindNeighbors_dims 30 Number of dimensions from linear dimensional reduction used as input to identify neighbours. Can be informed by the elbow and Jackstraw plots produced in Step 5 par_FindNeighbors_k.param 60 Defines k for the k-nearest neighbor algorithm par_FindNeighbors_prune.SNN 1/15 Sets the cutoff for acceptable Jaccard index when computing the neighborhood overlap for the shared nearest-neighbour (SNN) construction par_FindClusters_resolution 0.1 to 0.9, in intervals of 0.1 Value of the clustering resolution parameter. You may provide multiple resolution values par_compute_ARI Yes Whether or not you want to compute the Adjusted Rand Index (ARI) between clusters at a given clustering resolution par_RI_reps 100 Number of iterations for clustering the data at a given resolution in order to calculate the ARI","title":"Step 6"},{"location":"reference/#step-7","text":"Parameter Default Description (the cluster annotation method associated with the parameter is shown) par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_level_cluster integrated_snn_res.0.7 The cluster resolution that you want to use for downstream analyses. If you skipped integration in Step 5, use par_level_cluster='RNA_snn_res.0.7', if you want to proceed with a clustering resolution of 0.7 par_top_sel 5 Method 1: Number of top markers to identify based on avg_log2FC par_db Descartes_Cell_Types_and_Tissue_2021, CellMarker_Augmented_2021, Azimuth_Cell_Types_2021 Method 1: Character vector of EnrichR databases that define cell types. The top marker genes for each cluster will be tested for enrichment across these databases. par_compute_module_score Yes Method 2: Whether or not to perform the module score computation par_compute_module_score Yes Method 2: Whether or not to perform the module score computation par_module_score NULL Method 2: Path defining the location of the directory that contains the csv file of the gene sets used to compute the module score par_reference NULL Method 3: Path defining the location of the reference Seurat object par_level_celltype NULL Method 3: The name of the metadata column in the reference Seurat object that defines cell types par_FindTransferAnchors_dim 10 Method 3: Number of dimensions from linear dimensional reduction used to find transfer anchors between the reference and query Seurat objects par_futureglobalsmaxSize 50000 * 1024^2 Method 3: This will increase your RAM usage so set this number mindfully par_visualize_select_features No Visualize select features: Whether or not to visualize select features par_select_features NULL Visualize select features: list of gene identifiers to visualize the expression of select features","title":"Step 7"},{"location":"reference/#step-8","text":"Parameter Default Description (the cluster annotation method associated with the parameter is shown) par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_level_cluster integrated_snn_res.0.7 The cluster resolution that you used in the cluster annotation module. If you skipped integration in Step 5, use par_level_cluster='RNA_snn_res.0.7', if you want to proceed with a clustering resolution of 0.7 par_step8_clus_label NULL List of user-currated cluster labels obtained from the annotation module. Make sure to have the same number of labels as clusters at the desired clustering resolution. par_new_genotype yes Whether or not you want to add new sample labels to simplify the contrasts. For example, you may wish to set both control1 and control2 as control. par_old_sample_label NULL list of old sample labels (i.e. those used to create the samples_info folder in the setup procedures) par_new_sample_label NULL list of new sample labels corresponding to the old sample labels defined in the parameter above","title":"Step 8"},{"location":"reference/#cell-hashtag-scrnaseq-analysis-track","text":"","title":"Cell Hashtag scRNAseq Analysis Track"},{"location":"reference/#step-1_1","text":"Parameter Default Description REF_DIR_GRCH NULL Path to reference genome for FASTQ alignment. 10X Genomics reference genomes are available for download. For more information see their documentation . R1LENGTH NULL Minimum number of bases to retain for R1 sequence of gene expression MEMPERCORE 30 For clusters whose job managers do not support memory requests, it is possible to request memory in the form of cores. This option will scale up the number of threads requested via the MRO_THREADS variable according to how much memory a stage requires when given to the ratio of memory on your nodes.","title":"Step 1"},{"location":"reference/#step-2_1","text":"Parameter Default Description Save_RNA No Whether or not to export an RNA expression matrix Save_metadata No Whether or not to export a metadata dataframe count_matrices NULL If users skipped Step 1, the may provide the path to a directory that contains existing feature-barcode expression matrices to initiate the pipeline at Step 2 min.cells_L 0 Only retain genes expressed in a minimum number of cells min.features_L 0 Only retain cells expressing a minimum number of genes","title":"Step 2"},{"location":"reference/#step-3_1","text":"Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_seurat_object NULL If users skipped Steps 1 and 2, the may provide the path to a directory that contains existing Seurat objects to initiate the pipeline at Step 3 par_nFeature_RNA_L NULL Only retain cells expressing a minimum number of genes par_nFeature_RNA_U NULL Only retain cells expressing a maximum number of genes par_nCount_RNA_L NULL Only retain cells with a minimum number of unique transcripts par_nCount_RNA_U NULL Only retain cells with a maximum number of unique transcripts par_mitochondria_percent_L NULL Only retain cells with a minimum percentage of mitochondrial genes par_mitochondria_percent_U NULL Only retain cells with a maximum percentage of mitochondrial genes par_ribosomal_percent_L NULL Only retain cells with a minimum percentage of ribosomal genes par_ribosomal_percent_U NULL Only retain cells with a maximum percentage of ribosomal genes par_log10GenesPerUMI_L NULL Only retain cells with a minimum number of genes per unique molecular identifier par_log10GenesPerUMI_U NULL Only retain cells with a maximum number of genes per unique molecular identifier par_remove_mitochondrial_genes Yes Whether or not to remove mitochondrial genes par_remove_ribosomal_genes Yes Whether or not to remove ribosomal genes par_remove_genes NULL If users want to remove specific genes from their data, they may define a list of gene identifiers par_normalization.method LogNormalize Method to use for normalization par_scale.factor 10000 Scale factor for scaling the data par_selection.method vst Method for choosing the top variable features par_nfeatures 2500 Number of features to select as top variable features par_top 10 Number of most variable features to be reported in the csv file par_npcs_pca 30 Total Number of principal components to compute and store for principal component analysis (PCA) par_cells 500 Number of cells to include in Seurat's dimheatmap function par_dims 12 Number of dimensions to include in Seurat's dimheatmap function par_dims_umap 10 Number of dimensions to use as input features for uniform manifold approximation and projection (UMAP) par_n.neighbors 65 Number of neighboring points to use in local approximations of manifold structure","title":"Step 3"},{"location":"reference/#step-4_1","text":"Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_normalization.method CLR Method for normalizing the HTO assay par_scale.factor 1000 Scale factor for scaling the HTO assay par_selection.method vst Method for selecting the most variable features in the HTO assay par_nfeatures 5 Number of features to select as top variable features for the HTO assay. This value is dependent on the number of sample specific barcodes used in the experiment par_dims_umap 5 Number of dimensions to use as input features for uniform manifold approximation and projection (UMAP) of HTO assay par_n.neighbor 65 Number of neighboring points to use in local approximations of manifold structure par_dimensionality_reduction Yes Whether or not to perform linear dimensionality reduction on the HTO assay par_npcs_pca 30 Total Number of principal components to compute and store for principal component analysis (PCA) of HTO assay par_dropDN Yes Whether or not to remove predicted doublets and negatives from downstream analyses par_label_dropDN Doublet, Negative Labels used to identify doublet and negative droplets par_quantile 0.9 The quantile to use for droplet classification using MULTIseqDemux par_autoThresh TRUE Whether or not to perform automated threshold finding to define the best quantile for droplet classification using MULTIseqDemux par_maxiter 5 Maximum number of iterations to use if autoThresh = TRUE par_RidgePlot_ncol 3 Number of columns used to display RidgePlots, which visualizes the enrichment of barcode labels across samples par_old_antibody_label NULL If you wish to rename the barcode labels, first list the existing barcode labels in this parameter. old antibody labels can be identified in the \"_old_antibody_label_MULTIseqDemuxHTOcounts\" file produced by running Step 4 msd par_new_antibody_label NULL If you wish to rename the barcode labels, list the new labels corresponding to the old labels listed in the parameter above","title":"Step 4"},{"location":"reference/#step-5_1","text":"Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_skip_integration No Whether or not to skip integration. This is applicable for experiments that comprises of only one sequencing run. par_FindIntegrationAnchors_dim 25 Which dimensions to use from the canonical correlation analysis (CCA) to specify the neighbor search space par_DefaultAssay RNA The assay to perform normalization, scaling, and linear dimensiona reduction on. For most use cases this will be RNA. par_normalization.method LogNormalize Method to use for normalization par_scale.factor 1000 Scale factor for scaling the data par_selection.method vst Method for detecting top variable features par_nfeatures 2500 Number of features to select as top variable features par_RunUMAP_n.neighbors 65 Number of neighboring points used in local approximations of manifold structure par_RunPCA_npcs 30 Total Number of principal components to compute and store for principal component analysis (PCA) par_RunUMAP_dims 10 Number of dimensions to use as input features for uniform manifold approximation and projection (UMAP) par_compute_jackstraw No Whether or not to perform JackStraw computation. This computation takes a long time.","title":"Step 5"},{"location":"reference/#step-6_1","text":"Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_skip_step5 No Whether or not the user skipped integration in Step 5 par_FindNeighbors_dims 30 Number of dimensions from linear dimensional reduction used as input to identify neighbours. Can be informed by the elbow and Jackstraw plots produced in Step 5 par_FindNeighbors_k.param 60 Defines k for the k-nearest neighbor algorithm par_FindNeighbors_prune.SNN 1/15 Sets the cutoff for acceptable Jaccard index when computing the neighborhood overlap for the shared nearest-neighbour (SNN) construction par_FindClusters_resolution 0.1 to 0.9, in intervals of 0.1 Value of the clustering resolution parameter. You may provide multiple resolution values par_compute_ARI Yes Whether or not you want to compute the Adjusted Rand Index (ARI) between clusters at a given clustering resolution par_RI_reps 100 Number of iterations for clustering the data at a given resolution in order to calculate the ARI","title":"Step 6"},{"location":"reference/#step-7_1","text":"Parameter Default Description (the cluster annotation method associated with the parameter is shown) par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_level_cluster integrated_snn_res.0.7 The cluster resolution that you want to use for downstream analyses. If you skipped integration in Step 5, use par_level_cluster='RNA_snn_res.0.7', if you want to proceed with a clustering resolution of 0.7 par_level_genotype MULTI_ID_Lables Name of the metadata column in your Seurat object that describes the sample names par_top_sel 5 Method 1: Number of top markers to identify based on avg_log2FC par_db Descartes_Cell_Types_and_Tissue_2021, CellMarker_Augmented_2021, Azimuth_Cell_Types_2021 Method 1: Character vector of EnrichR databases that define cell types. The top marker genes for each cluster will be tested for enrichment across these databases. par_compute_module_score Yes Method 2: Whether or not to perform the module score computation par_compute_module_score Yes Method 2: Whether or not to perform the module score computation par_module_score NULL Method 2: Path defining the location of the directory that contains the csv file of the gene sets used to compute the module score par_reference NULL Method 3: Path defining the location of the reference Seurat object par_level_celltype NULL Method 3: The name of the metadata column in the reference Seurat object that defines cell types par_FindTransferAnchors_dim 10 Method 3: Number of dimensions from linear dimensional reduction used to find transfer anchors between the reference and query Seurat objects par_futureglobalsmaxSize 50000 * 1024^2 Method 3: This will increase your RAM usage so set this number mindfully par_visualize_select_features No Visualize select features: Whether or not to visualize select features par_select_features NULL Visualize select features: list of gene identifiers to visualize the expression of select features","title":"Step 7"},{"location":"reference/#step-8_1","text":"Parameter Default Description (the cluster annotation method associated with the parameter is shown) par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_level_cluster integrated_snn_res.0.7 The cluster resolution that you used in the cluster annotation module. If you skipped integration in Step 5, use par_level_cluster='RNA_snn_res.0.7', if you want to proceed with a clustering resolution of 0.7 par_step8_clus_label NULL List of user-currated cluster labels obtained from the annotation module. Make sure to have the same number of labels as clusters at the desired clustering resolution. par_new_genotype yes Whether or not you want to add new sample labels to simplify the contrasts. For example, you may wish to set both control1 and control2 as control. par_old_antibody_label NULL list of old sample labels (i.e. those used to create the samples_info folder in the setup procedures) par_new_antibody_label NULL list of new sample labels corresponding to the old sample labels defined in the parameter above","title":"Step 8"},{"location":"tutorial/","text":"Tutorial This section contains tutorials for different data. standard HTO Data1 Data2","title":"Tutorial"},{"location":"tutorial/#tutorial","text":"This section contains tutorials for different data.","title":"Tutorial"},{"location":"tutorial/#standard","text":"","title":"standard"},{"location":"tutorial/#hto","text":"","title":"HTO"},{"location":"tutorial/#data1","text":"","title":"Data1"},{"location":"tutorial/#data2","text":"","title":"Data2"}]}