{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to scRNAbox's documentation! ScRNAbox is a single-cell RNA sequencing (scRNAseq) pipeline specifically designed for analyzing data under a High-Performance Computing (HPC) systems using the Slurm Workload Manager . The scRNAbox pipeline incorporates nine Analytical Steps into a comprehensive scRNAseq analysis and provides the foundation for further investigations. The nine Analytical Steps are outlined below. The scRNAbox pipeline provides two distinct, yet highly comparable Analysis Tracks: Standard scRNAseq Cell Hashtag scRNAseq The Standard Analysis Track is designed for experiments where each sample is captured and sequenced separately, while the Cell Hashtag Analysis Track is designed for multiplexed experiments, whereby samples are tagged with sample-specific barcodes, pooled, and sequenced together. The Cell Hashtag Analysis Track is distinguished by an additional sample demultiplexing Step that assigns cells to their sample-of-origin via the sample-specific barcodes. For a comprehenseive description of each Analytical Step, please see Standard Analysis Track and Cell Hashtag Analysis Track . For a tutorial that leverages the datasets used as the application cases in our pre-print manuscript, please see Standard Analysis: Midbrain dataset and Cell Hashtag Analysis: PBMC dataset . Contents Installation Overview: Standard Analysis Track Cell Hashtag Analysis Track Execution parameters Outputs Tutorial Standard Analysis Track: Midbrain dataset Cell Hashtag Analysis Track: PBMC dataset Processed Data FAQ","title":"Home"},{"location":"#welcome-to-scrnaboxs-documentation","text":"ScRNAbox is a single-cell RNA sequencing (scRNAseq) pipeline specifically designed for analyzing data under a High-Performance Computing (HPC) systems using the Slurm Workload Manager . The scRNAbox pipeline incorporates nine Analytical Steps into a comprehensive scRNAseq analysis and provides the foundation for further investigations. The nine Analytical Steps are outlined below. The scRNAbox pipeline provides two distinct, yet highly comparable Analysis Tracks: Standard scRNAseq Cell Hashtag scRNAseq The Standard Analysis Track is designed for experiments where each sample is captured and sequenced separately, while the Cell Hashtag Analysis Track is designed for multiplexed experiments, whereby samples are tagged with sample-specific barcodes, pooled, and sequenced together. The Cell Hashtag Analysis Track is distinguished by an additional sample demultiplexing Step that assigns cells to their sample-of-origin via the sample-specific barcodes. For a comprehenseive description of each Analytical Step, please see Standard Analysis Track and Cell Hashtag Analysis Track . For a tutorial that leverages the datasets used as the application cases in our pre-print manuscript, please see Standard Analysis: Midbrain dataset and Cell Hashtag Analysis: PBMC dataset .","title":"Welcome to scRNAbox's documentation!"},{"location":"#contents","text":"Installation Overview: Standard Analysis Track Cell Hashtag Analysis Track Execution parameters Outputs Tutorial Standard Analysis Track: Midbrain dataset Cell Hashtag Analysis Track: PBMC dataset Processed Data FAQ","title":"Contents"},{"location":"Acknowledgement/","text":"Acknowledgement The pipeline is done as part Dark Genome project, it is written by Saeid Amiri with associate of Rhalena Thomas, Sali Farhan, and Michael Fiorini at Neuro Bioinformatics Core. Copyright belongs MNI BIOINFO CORE .","title":"- Acknowledgement"},{"location":"Acknowledgement/#acknowledgement","text":"The pipeline is done as part Dark Genome project, it is written by Saeid Amiri with associate of Rhalena Thomas, Sali Farhan, and Michael Fiorini at Neuro Bioinformatics Core. Copyright belongs MNI BIOINFO CORE .","title":"Acknowledgement"},{"location":"Dataset1/","text":"Application Case 1: Standard scRNAseq Analysis Track of scRNAbox Contents Introduction Downloading the midbrain dataset Installation scrnabox.slurm installation CellRanger installation R library preparation and R package installation scRNAbox: Standard Analysis Track Step 0: Pipeline initiation Step 1: FASTQ pre-processing Step 2: Ambient RNA removal and create Seurat object Step 3: Quality control and filtering Step 4: Doublet detection Step 5: Integration and linear dimensional reduction Step 6: Clustering Step 7: Cluster annotation Method 1: Cluster marker GSEA Method 2: Module score Method 3: Reference-based annotation Visualizing the expression of select features Step 8: Differential gene expression contrasts Create DGEList object Sample-sample contrasts Sample-cell contrasts Job Configurations Introduction This guide illustrates the steps taken for Application Case 1 in our pre-print manuscript. Here, we are using the Standard scRNAseq Analysis Track of scRNAbox to analyze a publicly available scRNAseq dataset produced by Smajic et al. . This data set (referred to as the midbrain dataset in the manuscript) describes >41,000 single-nuclei transcriptomes from the post-mortem midbrains of five individuals with Parkinson\u2019s disease (PD) and six controls sequenced separately. Downloading the midbrain dataset The scRNAseq data produced by Smajic et al. is publicly available in the Gene Expression Omnibus with accession code GSE157783 . To download the data, we must first install SRAtoolkit (if this is not already installed on your High-Performance Computing (HPC) system). We will create a directory for our raw data and download SRAtoolkit with the following code: mkdir data_download cd data_download wget --output-document sratoolkit.tar.gz https://ftp-trace.ncbi.nlm.nih.gov/sra/sdk/current/sratoolkit.current-ubuntu64.tar.gz tar -vxzf sratoolkit.tar.gz export PATH=$PATH:$PWD/sratoolkit.3.0.5-ubuntu64/bin For more information regarding the SRAtoolkit, please visit the documentation . The Sequence Read Archive (SRA) run identifiers for each of the 11 samples in the midbrain dataset are: Sample SRR PD1 SRR12621862 PD2 SRR12621863 PD3 SRR12621864 PD4 SRR12621865 PD5 SRR12621866 CTRL1 SRR12621867 CTRL2 SRR12621868 CTRL3 SRR12621869 CTRL4 SRR12621870 CTRL5 SRR12621871 CTRL6 SRR12621872 Note : If you simply want to test scRNAbox's Standard scRNAseq Analysis Track, it may be best to only incorportate a subset of samples in a test run, as using all 11 samples will take substantially longer. In this case, we suggest including at least three PD sample and three control to facilitate differential gene expression (DGE) contrasts in Step 8. To download the FASTQ files for all 11 samples, run the following code. Please note that this may take a very long time. export PATH=$PATH:$PWD/sratoolkit.3.0.5-ubuntu64/bin module load StdEnv/2020 gcc/9.3.0 module load sra-toolkit/3.0.0 #PD1 prefetch SRR12621862 fasterq-dump SRR12621862 #PD2 prefetch SRR12621863 fasterq-dump SRR12621863 #PD3 prefetch SRR12621864 fasterq-dump SRR12621864 #PD4 prefetch SRR12621865 fasterq-dump SRR12621865 #PD5 prefetch SRR12621866 fasterq-dump SRR12621866 #CTRL1 prefetch SRR12621867 fasterq-dump SRR12621867 #CTRL2 prefetch SRR12621868 fasterq-dump SRR12621868 #CTRL3 prefetch SRR12621869 fasterq-dump SRR12621869 #CTRL4 prefetch SRR12621870 fasterq-dump SRR12621870 #CTRL5 prefetch SRR12621871 fasterq-dump SRR12621871 #CTRL6 prefetch SRR12621872 fasterq-dump SRR12621872 If the FASTQ files for all 11 samples have been downloaded properly, the data_download folder should contain the following: \u251c\u2500\u2500 SRR12621862 \u2502 \u2514\u2500\u2500 SRR12621862.sra \u251c\u2500\u2500 SRR12621862_1.fastq \u251c\u2500\u2500 SRR12621862_2.fastq \u251c\u2500\u2500 SRR12621863 \u2502 \u2514\u2500\u2500 SRR12621863.sra \u251c\u2500\u2500 SRR12621863_1.fastq \u251c\u2500\u2500 SRR12621863_2.fastq \u251c\u2500\u2500 SRR12621864 \u2502 \u2514\u2500\u2500 SRR12621864.sra \u251c\u2500\u2500 SRR12621864_1.fastq \u251c\u2500\u2500 SRR12621864_2.fastq \u251c\u2500\u2500 SRR12621865 \u2502 \u2514\u2500\u2500 SRR12621865.sra \u251c\u2500\u2500 SRR12621865_1.fastq \u251c\u2500\u2500 SRR12621865_2.fastq \u251c\u2500\u2500 SRR12621866 \u2502 \u2514\u2500\u2500 SRR12621866.sra \u251c\u2500\u2500 SRR12621866_1.fastq \u251c\u2500\u2500 SRR12621866_2.fastq \u251c\u2500\u2500 SRR12621867 \u2502 \u2514\u2500\u2500 SRR12621867.sra \u251c\u2500\u2500 SRR12621867_1.fastq \u251c\u2500\u2500 SRR12621867_2.fastq \u251c\u2500\u2500 SRR12621868 \u2502 \u2514\u2500\u2500 SRR12621868.sra \u251c\u2500\u2500 SRR12621868_1.fastq \u251c\u2500\u2500 SRR12621868_2.fastq \u251c\u2500\u2500 SRR12621869 \u2502 \u2514\u2500\u2500 SRR12621869.sra \u251c\u2500\u2500 SRR12621869_1.fastq \u251c\u2500\u2500 SRR12621869_2.fastq \u251c\u2500\u2500 SRR12621870 \u2502 \u2514\u2500\u2500 SRR12621870.sra \u251c\u2500\u2500 SRR12621870_1.fastq \u251c\u2500\u2500 SRR12621870_2.fastq \u251c\u2500\u2500 SRR12621871 \u2502 \u2514\u2500\u2500 SRR12621871.sra \u251c\u2500\u2500 SRR12621871_1.fastq \u251c\u2500\u2500 SRR12621871_2.fastq \u251c\u2500\u2500 SRR12621872 \u2502 \u2514\u2500\u2500 SRR12621872.sra \u251c\u2500\u2500 SRR12621872_1.fastq \u2514\u2500\u2500 SRR12621872_2.fastq Next, we will rename the FASTQ files according to the CellRanger nomenclature and transfer the FASTQ files to a folder named fastqs . For more information regarding the nomeclature required by the CellRanger counts pipeline, please visit CellRanger's documentation . Note : The fastqs folder should only contain FASTQ files for the experiment. mkdir fastqs #PD1 cp ~/data_download/SRR12621862_1.fastq ~/fastqs/PD1_S1_L001_R1_001.fastq cp ~/data_download/SRR12621862_2.fastq ~/fastqs/PD1_S1_L001_R2_001.fastq #PD2 cp ~/data_download/SRR12621863_1.fastq ~/fastqs/PD2_S1_L001_R1_001.fastq cp ~/data_download/SRR12621863_2.fastq ~/fastqs/PD2_S1_L001_R2_001.fastq #PD3 cp ~/data_download/SRR12621864_1.fastq ~/fastqs/PD3_S1_L001_R1_001.fastq cp ~/data_download/SRR12621864_2.fastq ~/fastqs/PD3_S1_L001_R2_001.fastq #PD4 cp ~/data_download/SRR12621865_1.fastq ~/fastqs/PD4_S1_L001_R1_001.fastq cp ~/data_download/SRR12621865_2.fastq ~/fastqs/PD4_S1_L001_R2_001.fastq #PD5 cp ~/data_download/SRR12621866_1.fastq ~/fastqs/PD5_S1_L001_R1_001.fastq cp ~/data_download/SRR12621866_2.fastq ~/fastqs/PD5_S1_L001_R2_001.fastq #Ctrl1 cp ~/data_download/SRR12621867_1.fastq ~/fastqs/CTRL1_S1_L001_R1_001.fastq cp ~/data_download/SRR12621867_2.fastq ~/fastqs/CTRL1_S1_L001_R2_001.fastq #Ctrl2 cp ~/data_download/SRR12621868_1.fastq ~/fastqs/CTRL2_S1_L001_R1_001.fastq cp ~/data_download/SRR12621868_2.fastq ~/fastqs/CTRL2_S1_L001_R2_001.fastq #Ctrl3 cp ~/data_download/SRR12621869_1.fastq ~/fastqs/CTRL3_S1_L001_R1_001.fastq cp ~/data_download/SRR12621869_2.fastq ~/fastqs/CTRL3_S1_L001_R2_001.fastq #Ctrl4 cp ~/data_download/SRR12621870_1.fastq ~/fastqs/CTRL4_S1_L001_R1_001.fastq cp ~/data_download/SRR12621870_2.fastq ~/fastqs/CTRL4_S1_L001_R2_001.fastq #Ctrl5 cp ~/data_download/SRR12621871_1.fastq ~/fastqs/CTRL5_S1_L001_R1_001.fastq cp ~/data_download/SRR12621871_2.fastq ~/fastqs/CTRL5_S1_L001_R2_001.fastq #Ctrl6 cp ~/data_download/SRR12621872_1.fastq ~/fastqs/CTRL6_S1_L001_R1_001.fastq cp ~/data_download/SRR12621872_2.fastq ~/fastqs/CTRL6_S1_L001_R2_001.fastq If the above steps were conducted properly, the fastqs folder should contain the following files: \u251c\u2500\u2500 CTRL1_S1_L001_R1_001.fastq \u251c\u2500\u2500 CTRL1_S1_L001_R2_001.fastq \u251c\u2500\u2500 CTRL2_S1_L001_R1_001.fastq \u251c\u2500\u2500 CTRL2_S1_L001_R2_001.fastq \u251c\u2500\u2500 CTRL3_S1_L001_R1_001.fastq \u251c\u2500\u2500 CTRL3_S1_L001_R2_001.fastq \u251c\u2500\u2500 CTRL4_S1_L001_R1_001.fastq \u251c\u2500\u2500 CTRL4_S1_L001_R2_001.fastq \u251c\u2500\u2500 CTRL5_S1_L001_R1_001.fastq \u251c\u2500\u2500 CTRL5_S1_L001_R2_001.fastq \u251c\u2500\u2500 CTRL6_S1_L001_R1_001.fastq \u251c\u2500\u2500 CTRL6_S1_L001_R2_001.fastq \u251c\u2500\u2500 PD1_S1_L001_R1_001.fastq \u251c\u2500\u2500 PD1_S1_L001_R2_001.fastq \u251c\u2500\u2500 PD2_S1_L001_R1_001.fastq \u251c\u2500\u2500 PD2_S1_L001_R2_001.fastq \u251c\u2500\u2500 PD3_S1_L001_R1_001.fastq \u251c\u2500\u2500 PD3_S1_L001_R2_001.fastq \u251c\u2500\u2500 PD4_S1_L001_R1_001.fastq \u251c\u2500\u2500 PD4_S1_L001_R2_001.fastq \u251c\u2500\u2500 PD5_S1_L001_R1_001.fastq \u2514\u2500\u2500 PD5_S1_L001_R2_001.fastq Installation scrnabox.slurm installation Now that the raw data has been downloaded and organized, we can install the latest version of scrnabox.slurm (v0.135): wget https://github.com/neurobioinfo/scrnabox/releases/download/v0.1.35/scrnabox.slurm.zip unzip scrnabox.slurm.zip For a description of the options for running scrnabox.slurm run the following command: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm bash $SCRNABOX_HOME/launch_scrnabox.sh -h If the pipeline has been installed properly, the above command should return the folllowing: mandatory arguments: -d (--dir) = Working directory (where all the outputs will be printed) (give full path) --steps = Specify what steps, e.g., 2 to run just step 2, 2-4, run steps 2 through 4) optional arguments: -h (--help) = See helps regarding the pipeline options. --method = Choose what scRNA method you want to use; use HTO and SCRNA for for hashtag nad Standard scRNA, respectively. --nFeature_RNA_L = Lower threshold of number of unique RNA transcripts for each cell, it filters nFeature_RNA > nFeature_RNA_L. --nFeature_RNA_U = Upper threshold of number of unique RNA transcripts for each cell, it filters --nFeature_RNA_U. --nCount_RNA_L = Lower threshold for nCount_RNA, it filters nCount_RNA > nCount_RNA_L --nCount_RNA_U = Upper threshold for nCount_RNA, it filters nCount_RNA < nCount_RNA_U --mitochondria_percent_L = Lower threshold for the amount of mitochondrial transcript, it is in percent, mitochondria_percent > mitochondria_percent_L. --mitochondria_percent_U = Upper threshold for the amount of mitochondrial transcript, it is in percent, mitochondria_percent < mitochondria_percent_U. --log10GenesPerUMI_U = Upper threshold for the log number of genes per UMI for each cell, it is in percent,log10GenesPerUMI=log10(nFeature_RNA)/log10(nCount_RNA). mitochondria_percent < log10GenesPerUMI_U. --log10GenesPerUMI_L = Lower threshold for the log number of genes per UMI for each cell, log10GenesPerUMI=log10(nFeature_RNA)/log10(nCount_RNA). mitochondria_percent > log10GenesPerUMI_L. --msd = you can get the hashtag labels by running the following code --marker = Find marker. --sinfo = Do you need sample info? --fta = FindTransferAnchors --enrich = Annotation --dgelist = creates a DGEListobject from a table of counts obtained from seurate objects. --genotype = Run the genotype contrast. --celltype = Run the Genotype-cell contrast. --cont = You can directly call the contrast to the pipeline. --seulist = You can directly call the list of seurat objects to the pipeline. CellRanger installation For information regarding the installation of CellRanger, please visit the 10X Genomics documentation . If CellRanger is already installed on your HPC system, you may skip the CellRanger installation procedures. For our analysis of the midbrain dataset we used the 10XGenomics GRCh38-3.0.0 reference genome and CellRanger v5.0.1. For more information regarding how to prepare reference genomes for the CellRanger counts pipeline, please see the 10X Genomics documentation . R library preparation and R package installation We must prepapre a common R library where we will load all of the required R packages. If the required R packages are already installed on your HPC system in a common R library, you may skip the following procedures. First, we will creat an R folder and download our desired R version. The analyses presented in our pre-print manuscript were conducted using R v4.2.1 #make common R library mkdir R_library cd R_library #install and open R in the terminal module load r/4.2.1 R #set common R library path R_LIB_PATH=\"~/R_library\" .libPaths(R_LIB_PATH) library(Seurat) library(ggplot2) library(dplyr) library(foreach) library(doParallel) library(Matrix) library(DoubletFinder) library(cowplot) library(clustree) library(xlsx) library(enrichR) library(stringi) library(limma) library(tidyverse) library(edgeR) library(vctrs) library(RColorBrewer) library(fossil) library(openxlsx) library(stringr) library(ggpubr) devtools::install_github(\u201cneurobioinfo/scrnabox/scrnaboxR\u201d) scRNAbox: Standard Analysis Track Step 0: Pipeline initiation Now that scrnabox.slurm , CellRanger , R , and the Required R packages have been installed, we can proceed to our analysis with the Standard scRNAseq Analysis Track of the scRNAbox pipeline. We will create a pipeline folder designated for the analysis and run the pipeline initiation Step using the following code: mkdir pipeline cd pipeline export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 0 \\ --method SCRNA Next, we will navigate to the scrnabox_config.ini file in ~/pipeline/job_info/configs to define the path to the R library ( R_LIB_PATH= ), the version of R ( R_VERSION= ), and the path to CellRanger ( MODULECELLRANGER= ): cd ~/pipeline/job_info/configs nano scrnabox_config.ini MODULECELLRANGER=mugqic/cellranger/5.0.1 R_VERSION=4.2.1 R_LIB_PATH=~/R Step 1: FASTQ pre-processing In this Step, we will run the CellRanger counts pipeline to generate feature-barcode expression matrices from the FASTQ files. While it is possible to manually prepare the library.csv files for each of the 11 samples in the experiment prior to running Step 1, for this analysis we are going to opt for automated library preparation. For more information regarding the manual prepartion of library.csv , files please see the Standard scRNAseq documentation under the Setup section. For our analysis of the midbrain dataset we set the following execution parameters for Step 1: Parameter Value par_automated_library_prep yes par_fastq_directory ~/fastqs par_sample_names PD1, PD2, PD3, PD4, PD5, CTRL1, CTRL2, CTRL3, CTRL4, CTRL5, CTRL6 par_rename_samples Yes par_new_sample_names Parkinson1, Parkinson2, Parkinson3, Parkinson4, Parkinson5, Control1, Control2, Control3, Control4, Control5, Control6 par_paired_end_seq TRUE REF_DIR_GRCH ~/genome/10xGenomics/refdata-cellranger-GRCh38-3.0.0 R1LENGTH NULL MEMPERCORE 30 Note: The parameters file for each Analytical Step is located in ~/pipeline/job_info/parameters . For a comprehensive description of the execution parameters for each Analytical Step see the Reference section of the scRNAbox documentation. We can run Step 1 using the following code. Because CellRanger runs a user interface, it is advisable to run Step 1 in a screen. export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline screen -S run_smajic_application_case bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 1 The outputs of the CellRanger counts pipeline, including the raw and filtered feature-barcode expression matrices, are deposited into ~/pipeline/step1 . Step 2: Ambient RNA removal and create Seurat object In this Step, we are going to use the CellRanger-generated feature-barcode matrices to produce unique Seurat objects for each of the 11 samples. Ambient RNA detection and removal is optional for this Step; however, because Smajic et al. did not perform this analytical procedure we will skip it. We will retain genes that were detected in at least three cells and cells that expressed at least 1000 genes. For our analysis of the midbrain dataset we set the following execution parameters for Step 2: Parameter Value par_save_RNA Yes par_save_metadata Yes par_ambient_RNA No par_count_matrices NULL par_min.cells_L 3 par_min.features_L 1000 We can run Step 2 using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 2 Step 2 produces the following outputs for each sample. As an example we show the outputs for Parkinson1. step2 \u251c\u2500\u2500 figs2 \u2502 \u2514\u2500\u2500 vioplot_Parkinson1.png \u251c\u2500\u2500 info2 \u2502 \u251c\u2500\u2500 Parkinson11_RNA.txt \u2502 \u251c\u2500\u2500 MetaDataParkinson11.txt \u2502 \u251c\u2500\u2500 MetaDataParkinson1.txt \u2502 \u251c\u2500\u2500 meta_infoParkinson1.txt \u2502 \u251c\u2500\u2500 Parkinson1_RNA.txt \u2502 \u251c\u2500\u2500 sessionInfo.txt \u2502 \u2514\u2500\u2500 summary_Parkinson1.txt \u2514\u2500\u2500 objs2 \u2514\u2500\u2500 Parkinson1.rds Note: For a comprehensive description of the outputs for each Analytical Step, please see the Outputs section of the scRNAbox documentation. Figure 1. Figure produced by Step 2 of the Standard Analysis Track. The figure for the Parkinson1 sample is shown as an example. Sample-specific violin plots are produced to visualize the distribution of genes per cell (nFeature_RNA), molecules per cell (nCount_RNA), percentage of mitochondrial-encoded genes per cell (percent.mt), and perentage of ribosomal genes per cell (percent.ribo). Step 3: Quality control and filtering In this Step, we are going to perform quality control (QC) procedures and filter out low quality cells. We are going to filter out cells with <1500 unique molecules, >10% mitochondrial-encoded genes, and >10% ribosomal genes. In addition, we are going to remove mitochondrial-encoded and ribosomal genes and will perform cell cycle scoring. Prior to performing cell cycle scoring, we must normalize and scale the counts matrix. For our analysis of the midbrain dataset we set the following execution parameters for Step 3: Parameter Value par_save_RNA Yes par_save_metadata Yes par_seurat_object NULL par_nFeature_RNA_L NULL par_nFeature_RNA_U NULL par_nCount_RNA_L 1500 par_nCount_RNA_U NULL par_mitochondria_percent_L NULL par_mitochondria_percent_U 10 par_ribosomal_percent_L NULL par_ribosomal_percent_U 10 par_remove_mitochondrial_genes Yes par_remove_ribosomal_genes Yes par_remove_genes NULL par_normalization.method LogNormalize par_scale.factor 10000 par_selection.method vst par_nfeatures 2500 par_top 10 par_npcs_pca 30 par_cells 500 par_dims 12 par_dims_umap 10 par_n.neighbors 65 We can run Step 3 using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 3 Step 3 produces the following outputs for each sample. As an example we show the outputs for Parkinson1. step3 \u251c\u2500\u2500 figs3 \u2502 \u251c\u2500\u2500 cellcycle_Parkinson1.png \u2502 \u251c\u2500\u2500 dimplot_pcaParkinson1.png \u2502 \u251c\u2500\u2500 dimplot_umapParkinson1.png \u2502 \u251c\u2500\u2500 elbowplotParkinson1.png \u2502 \u251c\u2500\u2500 QC_vioplot_Parkinson1.png \u2502 \u2514\u2500\u2500 VariableFeaturePlotParkinson1.png \u251c\u2500\u2500 info3 \u2502 \u251c\u2500\u2500 MetaDataParkinson1.txt \u2502 \u251c\u2500\u2500 meta_info_Parkinson1.txt \u2502 \u251c\u2500\u2500 most_variable_genes_Parkinson1.txt \u2502 \u251c\u2500\u2500 Parkinson1_RNA.txt \u2502 \u251c\u2500\u2500 sessionInfo.txt \u2502 \u2514\u2500\u2500 summary_Parkinson1.txt \u2514\u2500\u2500 objs3 \u2514\u2500\u2500 Parkinson1.rds Figure 2. Figures produced by Step 3 of the Standard Analysis Track. The figures for the Parkinson1 sample are shown as an example. A) Distribution of QC metrics after filtering according to the user-defined thresholds. B) Variable features plot showing the top 2500 most variable features; the top 10 most variable features are labelled. C) Elbow plot to visualize the percentage of variance explained by each principal component (PC). D) Principal component analysis (PCA) visualizing the first two PCs. E) Uniform Manifold Approximation and Projections (UMAP) plot, taking the first ten PCs as input. F) Distibution of G2M and S scores across cells. Step 4: Doublet detection In this Step, we are going to identify doublets (erroneous libraries produced by two or more cells) and remove them from downstream analyses using the DoubletFinder tool (McGinnis et al. 2019). For optimal performance, DoubletFinder requires the user to define the following parameters: The number of statistically significant PCs (par_PCs) The number of artificial doublets to generate (par_pN) The expected doublet rate for each sample (par_expected_doublet_rate) The number of statistically significant PCs can be informed by the elbow plots produced in Step 2; it this case the top 15 PCs should maintain a robust compression of the data across samples. DoubletFinder is largely invariant to the number of artifical doublets generated , therefore we will maintain the default parameter of 0.25. The expected doublet rate can be informed by the number of recovered cells (~8% for ~10,000 cells recovered). The number of recovered cells can be informed by the barcodes.tsv.gz file produced by the CellRanger counts pipeline, which is located in ~/pipeline/step1/<sample>/output_folder/outs/filtered_feature_bc_matrix . The number of recovered cells for each sample and the corresponding doublet rate is shown below. Sample # of recovered cells Expected doublet rate (%) Control1 4863 3.9% Control2 4827 3.9% Control3 2632 2.3% Control4 5221 3.9% Control5 3703 3.1% Control6 6533 5.4% Parkinson1 2512 2.3% Parkinson2 6437 4.6% Parkinson3 3963 3.1% Parkinson4 2495 1.6% Parkinson5 5937 4.6% The expected doublet rates are approximations obtained from the 10X Genomics Next GEM Single Cell 3' v3.1 documentation , which was used by Smajic et al. for library preparation. For our analysis of the midbrain dataset we set the following execution parameters for Step 4: Parameter Value par_save_RNA Yes par_save_metadata Yes par_dropDN Yes par_PCs 15 par_pN 0.25 par_sct FALSE par_sample_names Control1, Control2, Control3, Control4, Control5, Control6, Parkinson1, Parkinson2, Parkinson3, Parkinson4, Parkinson5 par_expected_doublet_rate 0.039, 0.039, 0.023, 0.039, 0.031, 0.054, 0.023, 0.046, 0.031, 0.016, 0.046 We can run Step 4 using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 4 Step 4 produces the following outputs for each sample. As an example we show the outputs for Parkinson1. step4 \u251c\u2500\u2500 figs4 \u2502 \u2514\u2500\u2500 Parkinson1DF.classifications.png \u251c\u2500\u2500 info4 \u2502 \u251c\u2500\u2500 meta_info_Parkinson1.txt \u2502 \u251c\u2500\u2500 Parkinson1_RNA.txt \u2502 \u251c\u2500\u2500 sessionInfo.txt \u2502 \u2514\u2500\u2500 seu_MetaDataParkinson1.txt \u2514\u2500\u2500 objs4 \u2514\u2500\u2500 Parkinson1.rds Figure 3. Figure produced by Step 4 of the Standard Analysis Track. The figure for the Parkinson1 sample is shown as an example. Uniform Manifold Approximation and Projections (UMAP) plot showing the cell-type classification (singlet or doublet) for each droplet. In the figure title, the first value represents the number of simulated droplets (0.25), the second value represents the neighbourhood size (0.03), and the third value represents the number of predicted doublets (19). Step 5: Integration and linear dimensional reduction In this Step, we are going to integrate the individual Seurat objects to enable joint analyses across all 11 samples. We will then perform normalization, scaling and linear dimensional reduction on the integrated assay. The outputs from Step 5 will inform the optimal clustering parameters for Step 6. For our analysis of the midbrain dataset we set the following execution parameters for Step 5: Parameter Value par_save_RNA Yes par_save_metadata Yes par_skip_integration No par_FindIntegrationAnchors_dim 25 par_DefaultAssay RNA par_normalization.method LogNormalize par_selection.method vst par_nfeatures 4000 par_RunUMAP_n.neighbors 65 par_RunPCA_npcs 30 par_RunUMAP_dims 10 par_compute_jackstraw Yes We can run Step 5 using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 5 Step 5 produces the following outputs. step5 \u251c\u2500\u2500 figs5 \u2502 \u251c\u2500\u2500 DimPlot_pca.png \u2502 \u251c\u2500\u2500 DimPlot_umap.png \u2502 \u251c\u2500\u2500 elbow.png \u2502 \u2514\u2500\u2500 Jackstraw_plot.png \u251c\u2500\u2500 info5 \u2502 \u251c\u2500\u2500 meta_info_seu_step5.csv \u2502 \u251c\u2500\u2500 sessionInfo.txt \u2502 \u251c\u2500\u2500 seu_int_MetaData.txt \u2502 \u2514\u2500\u2500 seu_int_RNA.txt \u2514\u2500\u2500 objs5 \u2514\u2500\u2500 seu_step5.rds Figure 4. Figures produced by Step 5 of the Standard Analysis Track. A) Principal component analysis (PCA) visualizing the first two principal components (PC) of the integrated assay. B) Uniform Manifold Approximation and Projections (UMAP) plot of the integrated assay, taking the first ten PCs as input. C) Elbow plot to visualize the percentage of variance explained by each PC. D) Jackstraw plot to visualize the distribution of p-values for each PC. Step 6: Clustering In this Step, we will cluster the cells to indentify groups of cells with similar expression profiles. Based on the Elbow and Jackstraw plots produced in Step 5, we are going to use the first 25 PCs for the nearest-neighbour graph construction and to run the Uniform Manifold Approximation and Projection (UMAP) dimensional reduction. We will cluster the cells at a clustering resolution of 0.1 to 1.5, in intervals of 1.5. To determine the stability of clusters, we will run the Louvain clustering algorithm five times for each clustering resolution, while shuffling the order of the nodes in the graph for each iteration, and will compute the Adjusted Rand Index (ARI) between pairs of clusters at a given clustering resolution. For our analysis of the midbrain dataset we set the following execution parameters for Step 6: Parameter Value par_save_RNA Yes par_save_metadata Yes par_skip_step5 No par_FindNeighbors_dims 25 par_RunUMAP_dims 25 par_FindNeighbors_k.param 30 par_FindNeighbors_prune.SNN 1/15 par_FindClusters_resolution 0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0,1.1,1.2,1.3,1.4,1.5 par_compute_ARI Yes par_RI_reps 5 We can run Step 6 using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 6 Step 6 produces the following outputs. step6 \u251c\u2500\u2500 ARI \u2502 \u251c\u2500\u2500 ARI.png \u2502 \u2514\u2500\u2500 test.xlsx \u251c\u2500\u2500 figs6 \u2502 \u251c\u2500\u2500 clustree_int.png \u2502 \u251c\u2500\u2500 integrated_snn_res.0.1.png \u2502 \u251c\u2500\u2500 integrated_snn_res.0.2.png \u2502 \u251c\u2500\u2500 integrated_snn_res.0.3.png \u2502 \u251c\u2500\u2500 integrated_snn_res.0.4.png \u2502 \u251c\u2500\u2500 integrated_snn_res.0.5.png \u2502 \u251c\u2500\u2500 integrated_snn_res.0.6.png \u2502 \u251c\u2500\u2500 integrated_snn_res.0.7.png \u2502 \u251c\u2500\u2500 integrated_snn_res.0.8.png \u2502 \u251c\u2500\u2500 integrated_snn_res.0.9.png \u2502 \u251c\u2500\u2500 integrated_snn_res.1.1.png \u2502 \u251c\u2500\u2500 integrated_snn_res.1.2.png \u2502 \u251c\u2500\u2500 integrated_snn_res.1.3.png \u2502 \u251c\u2500\u2500 integrated_snn_res.1.4.png \u2502 \u251c\u2500\u2500 integrated_snn_res.1.5.png \u2502 \u2514\u2500\u2500 integrated_snn_res.1.png \u251c\u2500\u2500 info6 \u2502 \u251c\u2500\u2500 meta_info.csv \u2502 \u251c\u2500\u2500 sessionInfo.txt \u2502 \u251c\u2500\u2500 seu_MetaData.txt \u2502 \u2514\u2500\u2500 seu_RNA.txt \u2514\u2500\u2500 objs6 \u2514\u2500\u2500 seu_step6.rds Figure 5. Figures produced by Step 6 of the Standard Analysis Track. A) ClustTree plot to visualize inter-cluster dynamics at varying cluster resolutions. B) Mean (top panel) and standard deviation (sd; middle panel) of the Adjusted RNA Index (ARI) between clustering pairs at each user-defined clustering resolution. The bottom panel shows the number of clusters at each user-defined clustering resolution. C) Uniform Manifold Approximation and Projections (UMAP) plot at a clustering resolution of 0.9. Step 7: Cluster annotation In this Step, we are going to annotate the clusters identified in Step 6 to define the cellular species in the midbrain dataset. scRNAbox provides three distinct methods for cluster annotations Method 1: Cluster marker gene set enrichment analysis (GSEA) Method 2: Module score Method 2: Reference-based annotation For comprehensive description of each cluster annotation Method, please see the Standard scRNAseq Analysis Track section of the scRNAbox documentation or our pre-print manuscript. In addition to these three Methods, we can visualize the expression of select features to further inform the cellular species in the dataset. Method 1: Cluster marker GSEA Using Method 1, we are first going to identify differentially expressed marker genes for each cluster. We must define the number of marker genes for each cluster that we want scRNAbox to report and selecte a clustering resolution that we want to annotate. In this case we will report the top five marker genes for each cluster at a clustering resolution of 1.5. To identify the marker genes for each cluster, we set the following execution parameters for Step 7 ( step7_par.txt ): Parameter Value par_save_RNA Yes par_save_metadata Yes par_level_cluster integrated_snn_res.1.9 par_top_sel 5 par_db NULL par_compute_module_score No par_module_score NULL par_reference NULL par_level_celltype NULL par_FindTransferAnchors_dim NULL par_futureglobalsmaxSize NULL par_visualize_select_features No par_select_features NULL We can identify the marker genes for each cluster using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --marker T The above code produces the following outputs: step7 \u251c\u2500\u2500 figs7 \u2502 \u251c\u2500\u2500 marker \u2502 \u2502 \u2514\u2500\u2500 heatmap.pdf \u2502 \u251c\u2500\u2500 module_score \u2502 \u251c\u2500\u2500 umap.pdf \u2502 \u251c\u2500\u2500 umap_splitted.pdf \u2502 \u2514\u2500\u2500 visualize_select_features \u251c\u2500\u2500 info7 \u2502 \u251c\u2500\u2500 marker \u2502 \u2502 \u251c\u2500\u2500 cluster_just_genes.xlsx \u2502 \u2502 \u251c\u2500\u2500 ClusterMarkers.csv \u2502 \u2502 \u251c\u2500\u2500 ClusterMarkers.rds \u2502 \u2502 \u251c\u2500\u2500 cluster_whole.xlsx \u2502 \u2502 \u2514\u2500\u2500 top_sel.csv \u2502 \u251c\u2500\u2500 module_score \u2502 \u2514\u2500\u2500 sessionInfo_marker.txt \u2514\u2500\u2500 objs7 In addition to identifying the marker genes for each cluster, the above code produces UMAP plots at the user-defined clustering resolution (1.5) to visualize the clustering landscape across all cells in the dataset and at the sample level. Figure 6. Uniform Manifold Approximation and Projections (UMAP) plots at the user-defined clustering resolution. A) The clustering landscape at the user-defined clustering resolution across all cells in the dataset. B ) The clustering landscape at the user-defined clustering resolution, stratified by sample. Now that we have identified the marker genes for each cluster, we will perform a gene set enrichment analysis (GSEA) ; we will test the differentially expressed genes (DEG) in the positive direction (Log2 fold-change > 0.00) for enrichment across gene set libraries that define cell types using the EnrichR tool. For this analysis, we will leverage the following libraries: Descartes_Cell_Types_and_Tissue_2021; CellMarker_Augmented_2021; Azimuth_Cell_Types_2021 cell type libraries. To perform GSEA, we set the following execution parameters for Step 7 ( step7_par.txt ): Parameter Value par_save_RNA Yes par_save_metadata Yes par_level_cluster integrated_snn_res.1.5 par_top_sel 5 par_db Descartes_Cell_Types_and_Tissue_2021, CellMarker_Augmented_2021, Azimuth_Cell_Types_2021 par_compute_module_score No par_module_score NULL par_reference NULL par_level_celltype NULL par_FindTransferAnchors_dim NULL par_futureglobalsmaxSize NULL par_visualize_select_features No par_select_features NULL If your HPC allows access to the internet , we can perform GSEA using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --enrich T Note: If your HPC does not allow access to the internet , you will have to run GSEA locally. For more information, please see the Standard scRNAseq documentation under the Step 7 section. The above code produces the following outputs. As an example, we are only showing the outputs for cluster 0. step7 \u2514\u2500\u2500 annot_enrich \u251c\u2500\u2500 cluster0 \u2502 \u251c\u2500\u2500 Er.genes.1.csv \u2502 \u251c\u2500\u2500 Er.genes.2.csv \u2502 \u251c\u2500\u2500 Er.genes.3.csv \u2502 \u251c\u2500\u2500 plotenrich1.pdf \u2502 \u251c\u2500\u2500 plotenrich2.pdf \u2502 \u2514\u2500\u2500 plotenrich3.pdf \u251c\u2500\u2500 cluster1 \u251c\u2500\u2500 cluster2 \u251c\u2500\u2500 cluster3 \u251c\u2500\u2500 cluster4 \u251c\u2500\u2500 cluster5 \u251c\u2500\u2500 cluster6 \u251c\u2500\u2500 cluster7 \u251c\u2500\u2500 cluster8 \u251c\u2500\u2500 cluster9 \u251c\u2500\u2500 cluster10 \u251c\u2500\u2500 cluster11 \u251c\u2500\u2500 cluster12 \u251c\u2500\u2500 cluster13 \u251c\u2500\u2500 cluster14 \u251c\u2500\u2500 cluster15 \u251c\u2500\u2500 cluster16 \u251c\u2500\u2500 cluster17 \u251c\u2500\u2500 cluster18 \u251c\u2500\u2500 cluster19 \u251c\u2500\u2500 cluster20 \u251c\u2500\u2500 cluster21 \u2514\u2500\u2500 cluster22 After performing cluster marker GSEA and curating the results, we can produce our first iteration of the cluster annotations. Note: Visualizing intermediate cluster annotations is not incorporated into the scRNAbox pipeline; however we provide the code to do so below. Once users are satisfied with their final cluster annotations, they can provide the curated results in the parameters file for Step 8 , which will be discussed below. ## load and open R module load r/4.2.1 R ## load parameters # path to common R library r_lib_path = \"~/R\" # path to pipeline directory output_dir = \"~/pipeline\" # clustering resolution to cluster clustering_resolution = \"integrated_snn_res.1.5\" # intermediate cluster annotations intermediate_cluster_labels = c(\"Oligodendrocytes\", \"Oligodendrocytes\", \"Neuron\",\"Oligodendrocytes\",\"Oligodendrocytes\",\"Oligodendrocytes\",\"Oligodendrocytes\",\"Oligodendrocytes\",\"OPC\", \"Endothelial cells\",\"Microglia\", \"Oligodendrocytes\",\"Astrocytes\", \"Neuron\", \"Astrocytes\", \"Endothelial cells\",\"Endothelial cells\", \"Astrocytes\", \"Neuron\",\"Neuron\",\"Neuron\", \"Microglia\", \"Astrocytes\") ## load library .libPaths(r_lib_path) packages<-c('Seurat','ggplot2', 'dplyr','stringi','limma','tidyverse','edgeR') lapply(packages, library, character.only = TRUE) ## load Step 6 Seurat RDS object sample_name<-list.files(path = paste(output_dir, \"/step6/objs6\",sep=\"\"),pattern = \"*.rds\") seu.int.c<-readRDS(paste(output_dir,'/step6/objs6/',sample_name, sep='')) ## set cluster annotations obtained from cluster annotations cluster.ids<-intermediate_cluster_labels ## set cluster resolution and rename cluster identities seu.int.c <- SetIdent(seu.int.c, value = clustering_resolution) names(cluster.ids) <- levels(seu.int.c) seu.int.c <- RenameIdents(seu.int.c, cluster.ids) ##plot UMAP DimPlot(seu.int.c, reduction = \"umap\", label = TRUE, pt.size = 0.5) + NoLegend() ggsave(file = paste(output_dir,'/step7/figs7','/intermediate_cluster_annotation.pdf', sep='')) Figure 7. Figures produced by Method 1 (Cluster Marker GSEA) of the scRNAbox cluster annotation module. A) The top expressional markers that define each cluster are visualized through a heatmap showing the expression across cells, stratified by cluster. B) Differentially expressed marker genes in the positive direction (Log2 fold-change > 0.00) can be tested for enrichment across gene-set libraries that define cell types using the EnrichR tool. The enrichment results are visualized through a bar plot which displays the 20 most enriched terms for a particular cluster. As an example, we show the enrichment results of cluster 0 using the Azimuth_Cell_Types_2021 cell type library. C) Uniform Manifold Approximation and Projections (UMAP) plot showing the intermediate cluster annotations. Visualizing the expression of select features Now that we have broadly defined the cellular species that comprise our clusters, we are going to explore the expression of the marker genes used by Smajic et al. to define their clusters: Cell tyep Gene Oligodendrocytes MOBP OPC VCAN Astrocytes AQP4 Ependymal FOXJ1 Microglia CD74 Endothelial CLDN5 Pericytes PDGFRB Excitatory neurons SLC17A6 Inhibitory neurons GAD2 GABAergic neurons GAD2 , GRIK1 Dopaminergic neurons (DaN) TH Degenerating DaN CADPS2 To visualize these features, we set the following execution parameters for Step 7 ( step7_par.txt ): Parameter Value par_save_RNA Yes par_save_metadata Yes par_level_cluster integrated_snn_res.1.5 par_top_sel 5 par_db Descartes_Cell_Types_and_Tissue_2021, CellMarker_Augmented_2021, Azimuth_Cell_Types_2021 par_compute_module_score No par_module_score NULL par_reference NULL par_level_celltype NULL par_FindTransferAnchors_dim NULL par_futureglobalsmaxSize NULL par_visualize_select_features Yes par_select_features MOBP, VCAN, AQP4,FOXJ1, CD74, CLDN5, PDGFRB, SLC17A6, GAD2, GRIK1, TH, CADPS2 We can visualize the expression of these features using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --marker T The above code produces the following outputs: step7 \u2514\u2500\u2500 figs7 \u2514\u2500\u2500 visualize_select_features \u251c\u2500\u2500select_feature_dot_plot.pdf \u251c\u2500\u2500select_feature_feature_plot.pdf \u2514\u2500\u2500select_feature_violin_plot.pdf Figure 8. Figures produced by the \"visualize select features\" option in the scRNAbox cluster annotation module. The expression of select features can be visualized at the cluster level via A) a dot plot and B) violin plots. C) The expression of select features can be visualized at the cell level via feature plots. Based on the results of the above analyses, we can re-visit our cluster annotations using the same intermediate annotation code as above and visualize the annotations via a UMAP. Figure 9. Intermediate cluster annotations. Uniform Manifold Approximation and Projections (UMAP) plot showing the intermediate cluster annotations after leveraging the \"visualize select feature\" function of scRNAbox's cluster annotation module. Method 2: Module score Using Method 2, we are going to comparatively quantify the expression of gene sets across clusters at the single-cell level. We will first define the gene set that we want to explore in a csv file; as an example, we are going to explore the expression of some well-known marker genes for the cellular species of interest. We will first produce a csv file with the following structure. This csv can be found HERE da_neurons NPC_orStemLike mature_neurons excitatory_neurons inhbitory_neurons astrocytes oligodendrocytes radial_glia epithelial microglia TH DCX RBFOX3 GRIA2 GAD1 GFAP MBP PTPRC HES1 IBA1 SLC6A3 NEUROD1 SYP GRIA1 GAD2 S100B MOG AIF1 HES5 P2RY12 SLC18A2 TBR1 VAMP1 GRIA4 GAT1 AQP4 OLIG1 ADGRE1 SOX2 P2RY13 SOX6 PCNA VAMP2 GRIN1 PVALB APOE OLIG2 VIM SOX10 TREM119 NDNF MKI67 TUBB3 GRIN2B GABR2 SOX9 SOX10 TNC NES GPR34 SNCG SOX2 SYT1 GRIN2A GABR1 SLC1A3 PTPRZ1 CDH1 SIGLECH ALDH1A1 NES BSN GRIN3A GBRR1 FAM107A NOTCH1 TREM2 CALB1 PAX6 HOMER1 GRIN3 GABRB2 HOPX CX3CR1 TACR2 SLC17A6 GRIP1 GABRB1 LIFR FCRLS SLC17A6 CAMK2A GABRB3 ITGB5 OLFML3 SLC32A1 GABRA6 IL6ST HEXB OTX2 GABRA1 SLC1A3 TGFBR1 GRP GABRA4 SALL1 LPL TRAK2 MERTK CCK PROS1 VIP We can then define the location of our csv file in the execution parameters for Step 7 ( step7_par.txt ): Parameter Value par_save_RNA Yes par_save_metadata Yes par_level_cluster integrated_snn_res.1.5 par_top_sel 5 par_db NULL par_compute_module_score Yes par_module_score ~/pipeline/module_score.csv par_reference NULL par_level_celltype NULL par_FindTransferAnchors_dim NULL par_futureglobalsmaxSize NULL par_visualize_select_features No par_select_features NULL We can compute the module score for our gene sets using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --marker T The above code produces the following outputs: step7 \u251c\u2500\u2500 figs7 \u2502 \u2514\u2500\u2500 module_score \u2502 \u251c\u2500\u2500module_score_astrocytes.png \u2502 \u251c\u2500\u2500module_score_epithelial.png \u2502 \u251c\u2500\u2500module_score_da_neurons.png \u2502 \u251c\u2500\u2500module_score_excitatory_neurons.png \u2502 \u251c\u2500\u2500module_score_inhbitory_neurons.png \u2502 \u251c\u2500\u2500module_score_mature_neurons.png \u2502 \u251c\u2500\u2500module_score_microglia.png \u2502 \u251c\u2500\u2500module_score_NPC_orStemLike.png \u2502 \u251c\u2500\u2500module_score_oligodendrocytes.png \u2502 \u2514\u2500\u2500module_score_radial_glia.png \u2514\u2500\u2500 info7 \u2514\u2500\u2500module_score \u2514\u2500\u2500geneset_by_cluster.csv Figure 10. Figures produced by Method 2 (Module score) of the scRNAbox cluster annotation module. Uniform Manifold Approximation and Projections (UMAP) plots showing the module score across established marker genes for A) dopaminergic neurons, B) neural progenitor cells, C) mature neurons, D) excitatory neurons, E) inhibitory neurons, F) astrocytes, G) oligodendrocytes, H) radial glia, I) epithelial cells, and J) microglia. Method 3: Reference-based annotation Using Method 3, we are going to leverage the cell-type annotations from a reference Seurat object and generate annotation predictions for the query dataset. For reference-based annotation we must define the path to a our reference Seurat object and the column of the reference Seurat object's metadata that contains the cell type annotations. For the midbrain dataset, we are going to use a reference Seurat object from Kamath et al. . To perform reference-based annotations, we set the following execution parameters for Step 7 ( step7_par.txt ): Parameter Value par_save_RNA Yes par_save_metadata Yes par_level_cluster integrated_snn_res.1.5 par_top_sel NULL par_db NULL par_compute_module_score No par_module_score NULL par_reference ~/reference_seurat_object.rds par_level_celltype Cell_Type par_FindTransferAnchors_dim 10 par_futureglobalsmaxSize 60000 * 1024^2 par_visualize_select_features No par_select_features NULL We can perform reference-based annotations using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --fta T The above code produces the following outputs: step7 \u251c\u2500\u2500 figs7 \u2502 \u2514\u2500\u2500 reference_based_annotation \u2502 \u2514\u2500\u2500UMAP_transferred_labels.pdf \u2514\u2500\u2500 objs7 \u2514\u2500\u2500seu_step7.rds Figure 11. Figure produced by Method 3 (reference-based annotation) of the scRNAbox cluster annotation module. Uniform Manifold Approximation and Projections (UMAP) plots showing the cluster annotations from the reference Seurat object projected onto the query Seurat object. Step 8: Differential gene expression contrasts In this step we are going to perform differential gene expression (DGE) analysis between our samples. ScRNAbox faciltates DGE contrasts between samples ( sample-sample contrasts ) and between samples, stratified by cell type ( sample-cell contrasts ). The DGE contrasts module contains three components: 1) Create DGEList object 2) Sample-sample contrasts 3) Sample-cell contrasts Create DGEList object First, we are going to create a DGElist object. Before doing so, we must define our desired clustering resolution and the final cluster annotations informed by Step 7. We are also going to rename our samples in order to faciliate DGE contrasts. To create a DGElist object, we set the following execution parameters for Step 8 ( step8_par.txt ): Parameter value par_save_RNA Yes par_save_metadata Yes par_level_cluster integrated_snn_res.1.5 par_step8_clus_label Oligodendrocytes, Oligodendrocytes, Excitatory_Neurons, Oligodendrocytes, Oligodendrocytes, Oligodendrocytes, Oligodendrocytes, Oligodendrocytes, OPC, Endothelial_cells, Microglia, Oligodendrocytes, Astrocytes, Excitatory_Neurons, Astrocytes, Pericytes, Endothelial_cells, Ependymal, GABAergic_neurons, Oligodendrocytes, Inhibitory_neurons, Oligodendrocytes, OPC par_new_genotype yes par_old_sample_label Control1, Control2, Control3, Control4, Control5, Control6, Parkinson1, Parkinson2, Parkinson3, Parkinson4, Parkinson5 par_new_sample_label Control, Control, Control, Control, Control, Control, Parkinson, Parkinson, Parkinson, Parkinson, Parkinson Note: Cell names and sample names cannot have spaces. For example, do not write \"Endothelial cells\", instead write \"Endothelial_cells\". We can create the DGElist object using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --dgelist T The above code produces the following outputs: step8 \u251c\u2500\u2500 figs8 \u2502 \u2514\u2500\u2500 final_cluster_annotation.pdf \u251c\u2500\u2500 info8 \u2502 \u251c\u2500\u2500 de_genes.rds \u2502 \u251c\u2500\u2500 dge.rds \u2502 \u251c\u2500\u2500 meta_info_de_genes.txt \u2502 \u251c\u2500\u2500 meta_info_dge.txt \u2502 \u2514\u2500\u2500 meta_info_seu_step8.txt \u2514\u2500\u2500 objs8 \u2514\u2500\u2500 seu_step8.rds Figure 12. Final cluster annotations used for differential gene expression (DGE) contrasts . Uniform Manifold Approximation and Projections (UMAP) plots showing the final cluster annotation obtained by curating the results from scRNAbox's cluster annotation module (Step 7). The final cluster annotations will be used throughout the DGE contrasts module. Sample-sample contrasts Now that we have our DGElist object, we can perform DGE contrasts between samples (sample-sample contrasts). As an example, we will test for DGE between Parkinson's disease samples and controls. We must first define our contrast matrix in the sample-sample contrasts parameters file ( step8_contrast_genotype.txt ): cont_name control versus design1 Control Parkinson We can perform sample-sample DGE contrasts using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --genotype T The above code produces the following outputs: step8 \u2514\u2500\u2500 cont_genotype \u2514\u2500\u2500 design1.csv Sample-cell contrasts We can also perform DGE contrasts between samples, stratified by cell type (sample-cell contrasts). As an example, we will test for DGE between microglia from Parkinson's disease and controls. We must first define our contrast matrix in the sample-cell contrasts parameters file ( step8_contrast_celltype.txt ): cont_name cell control versus design1_cell Microglia Control Parkinson We can perform sample-cel DGE contrasts using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --celltype T The above code produces the following outputs: step8 \u2514\u2500\u2500 cont_celltype \u2514\u2500\u2500 design1.csv Step 9: Enrichment analysis Job Configurations The following job configurations were used for our analysis of the midbrain dataset. Job Configurations can be modified for each Analytical Step in the scrnabox_config.ini file in ~/pipeline/job_info/configs Step THREADS_ARRAY MEM_ARRAY WALLTIME_ARRAY Step2 4 16g 00-05:00 Step3 4 16g 00-05:00 Step4 4 45g 00-05:00 Step5 4 45g 00-05:00 Step6 4 16g 00-05:00 Step7 marker 4 40g 00-01:00 Step7 fta 4 150g 00-09:00 Step8 dgelist 4 40g 00-12:00 Step8 cont 10 40g 00-12:00","title":"- Standard Analysis: Midbrain dataset"},{"location":"Dataset1/#application-case-1-standard-scrnaseq-analysis-track-of-scrnabox","text":"","title":"Application Case 1: Standard scRNAseq Analysis Track of scRNAbox"},{"location":"Dataset1/#contents","text":"Introduction Downloading the midbrain dataset Installation scrnabox.slurm installation CellRanger installation R library preparation and R package installation scRNAbox: Standard Analysis Track Step 0: Pipeline initiation Step 1: FASTQ pre-processing Step 2: Ambient RNA removal and create Seurat object Step 3: Quality control and filtering Step 4: Doublet detection Step 5: Integration and linear dimensional reduction Step 6: Clustering Step 7: Cluster annotation Method 1: Cluster marker GSEA Method 2: Module score Method 3: Reference-based annotation Visualizing the expression of select features Step 8: Differential gene expression contrasts Create DGEList object Sample-sample contrasts Sample-cell contrasts Job Configurations","title":"Contents"},{"location":"Dataset1/#introduction","text":"This guide illustrates the steps taken for Application Case 1 in our pre-print manuscript. Here, we are using the Standard scRNAseq Analysis Track of scRNAbox to analyze a publicly available scRNAseq dataset produced by Smajic et al. . This data set (referred to as the midbrain dataset in the manuscript) describes >41,000 single-nuclei transcriptomes from the post-mortem midbrains of five individuals with Parkinson\u2019s disease (PD) and six controls sequenced separately.","title":"Introduction"},{"location":"Dataset1/#downloading-the-midbrain-dataset","text":"The scRNAseq data produced by Smajic et al. is publicly available in the Gene Expression Omnibus with accession code GSE157783 . To download the data, we must first install SRAtoolkit (if this is not already installed on your High-Performance Computing (HPC) system). We will create a directory for our raw data and download SRAtoolkit with the following code: mkdir data_download cd data_download wget --output-document sratoolkit.tar.gz https://ftp-trace.ncbi.nlm.nih.gov/sra/sdk/current/sratoolkit.current-ubuntu64.tar.gz tar -vxzf sratoolkit.tar.gz export PATH=$PATH:$PWD/sratoolkit.3.0.5-ubuntu64/bin For more information regarding the SRAtoolkit, please visit the documentation . The Sequence Read Archive (SRA) run identifiers for each of the 11 samples in the midbrain dataset are: Sample SRR PD1 SRR12621862 PD2 SRR12621863 PD3 SRR12621864 PD4 SRR12621865 PD5 SRR12621866 CTRL1 SRR12621867 CTRL2 SRR12621868 CTRL3 SRR12621869 CTRL4 SRR12621870 CTRL5 SRR12621871 CTRL6 SRR12621872 Note : If you simply want to test scRNAbox's Standard scRNAseq Analysis Track, it may be best to only incorportate a subset of samples in a test run, as using all 11 samples will take substantially longer. In this case, we suggest including at least three PD sample and three control to facilitate differential gene expression (DGE) contrasts in Step 8. To download the FASTQ files for all 11 samples, run the following code. Please note that this may take a very long time. export PATH=$PATH:$PWD/sratoolkit.3.0.5-ubuntu64/bin module load StdEnv/2020 gcc/9.3.0 module load sra-toolkit/3.0.0 #PD1 prefetch SRR12621862 fasterq-dump SRR12621862 #PD2 prefetch SRR12621863 fasterq-dump SRR12621863 #PD3 prefetch SRR12621864 fasterq-dump SRR12621864 #PD4 prefetch SRR12621865 fasterq-dump SRR12621865 #PD5 prefetch SRR12621866 fasterq-dump SRR12621866 #CTRL1 prefetch SRR12621867 fasterq-dump SRR12621867 #CTRL2 prefetch SRR12621868 fasterq-dump SRR12621868 #CTRL3 prefetch SRR12621869 fasterq-dump SRR12621869 #CTRL4 prefetch SRR12621870 fasterq-dump SRR12621870 #CTRL5 prefetch SRR12621871 fasterq-dump SRR12621871 #CTRL6 prefetch SRR12621872 fasterq-dump SRR12621872 If the FASTQ files for all 11 samples have been downloaded properly, the data_download folder should contain the following: \u251c\u2500\u2500 SRR12621862 \u2502 \u2514\u2500\u2500 SRR12621862.sra \u251c\u2500\u2500 SRR12621862_1.fastq \u251c\u2500\u2500 SRR12621862_2.fastq \u251c\u2500\u2500 SRR12621863 \u2502 \u2514\u2500\u2500 SRR12621863.sra \u251c\u2500\u2500 SRR12621863_1.fastq \u251c\u2500\u2500 SRR12621863_2.fastq \u251c\u2500\u2500 SRR12621864 \u2502 \u2514\u2500\u2500 SRR12621864.sra \u251c\u2500\u2500 SRR12621864_1.fastq \u251c\u2500\u2500 SRR12621864_2.fastq \u251c\u2500\u2500 SRR12621865 \u2502 \u2514\u2500\u2500 SRR12621865.sra \u251c\u2500\u2500 SRR12621865_1.fastq \u251c\u2500\u2500 SRR12621865_2.fastq \u251c\u2500\u2500 SRR12621866 \u2502 \u2514\u2500\u2500 SRR12621866.sra \u251c\u2500\u2500 SRR12621866_1.fastq \u251c\u2500\u2500 SRR12621866_2.fastq \u251c\u2500\u2500 SRR12621867 \u2502 \u2514\u2500\u2500 SRR12621867.sra \u251c\u2500\u2500 SRR12621867_1.fastq \u251c\u2500\u2500 SRR12621867_2.fastq \u251c\u2500\u2500 SRR12621868 \u2502 \u2514\u2500\u2500 SRR12621868.sra \u251c\u2500\u2500 SRR12621868_1.fastq \u251c\u2500\u2500 SRR12621868_2.fastq \u251c\u2500\u2500 SRR12621869 \u2502 \u2514\u2500\u2500 SRR12621869.sra \u251c\u2500\u2500 SRR12621869_1.fastq \u251c\u2500\u2500 SRR12621869_2.fastq \u251c\u2500\u2500 SRR12621870 \u2502 \u2514\u2500\u2500 SRR12621870.sra \u251c\u2500\u2500 SRR12621870_1.fastq \u251c\u2500\u2500 SRR12621870_2.fastq \u251c\u2500\u2500 SRR12621871 \u2502 \u2514\u2500\u2500 SRR12621871.sra \u251c\u2500\u2500 SRR12621871_1.fastq \u251c\u2500\u2500 SRR12621871_2.fastq \u251c\u2500\u2500 SRR12621872 \u2502 \u2514\u2500\u2500 SRR12621872.sra \u251c\u2500\u2500 SRR12621872_1.fastq \u2514\u2500\u2500 SRR12621872_2.fastq Next, we will rename the FASTQ files according to the CellRanger nomenclature and transfer the FASTQ files to a folder named fastqs . For more information regarding the nomeclature required by the CellRanger counts pipeline, please visit CellRanger's documentation . Note : The fastqs folder should only contain FASTQ files for the experiment. mkdir fastqs #PD1 cp ~/data_download/SRR12621862_1.fastq ~/fastqs/PD1_S1_L001_R1_001.fastq cp ~/data_download/SRR12621862_2.fastq ~/fastqs/PD1_S1_L001_R2_001.fastq #PD2 cp ~/data_download/SRR12621863_1.fastq ~/fastqs/PD2_S1_L001_R1_001.fastq cp ~/data_download/SRR12621863_2.fastq ~/fastqs/PD2_S1_L001_R2_001.fastq #PD3 cp ~/data_download/SRR12621864_1.fastq ~/fastqs/PD3_S1_L001_R1_001.fastq cp ~/data_download/SRR12621864_2.fastq ~/fastqs/PD3_S1_L001_R2_001.fastq #PD4 cp ~/data_download/SRR12621865_1.fastq ~/fastqs/PD4_S1_L001_R1_001.fastq cp ~/data_download/SRR12621865_2.fastq ~/fastqs/PD4_S1_L001_R2_001.fastq #PD5 cp ~/data_download/SRR12621866_1.fastq ~/fastqs/PD5_S1_L001_R1_001.fastq cp ~/data_download/SRR12621866_2.fastq ~/fastqs/PD5_S1_L001_R2_001.fastq #Ctrl1 cp ~/data_download/SRR12621867_1.fastq ~/fastqs/CTRL1_S1_L001_R1_001.fastq cp ~/data_download/SRR12621867_2.fastq ~/fastqs/CTRL1_S1_L001_R2_001.fastq #Ctrl2 cp ~/data_download/SRR12621868_1.fastq ~/fastqs/CTRL2_S1_L001_R1_001.fastq cp ~/data_download/SRR12621868_2.fastq ~/fastqs/CTRL2_S1_L001_R2_001.fastq #Ctrl3 cp ~/data_download/SRR12621869_1.fastq ~/fastqs/CTRL3_S1_L001_R1_001.fastq cp ~/data_download/SRR12621869_2.fastq ~/fastqs/CTRL3_S1_L001_R2_001.fastq #Ctrl4 cp ~/data_download/SRR12621870_1.fastq ~/fastqs/CTRL4_S1_L001_R1_001.fastq cp ~/data_download/SRR12621870_2.fastq ~/fastqs/CTRL4_S1_L001_R2_001.fastq #Ctrl5 cp ~/data_download/SRR12621871_1.fastq ~/fastqs/CTRL5_S1_L001_R1_001.fastq cp ~/data_download/SRR12621871_2.fastq ~/fastqs/CTRL5_S1_L001_R2_001.fastq #Ctrl6 cp ~/data_download/SRR12621872_1.fastq ~/fastqs/CTRL6_S1_L001_R1_001.fastq cp ~/data_download/SRR12621872_2.fastq ~/fastqs/CTRL6_S1_L001_R2_001.fastq If the above steps were conducted properly, the fastqs folder should contain the following files: \u251c\u2500\u2500 CTRL1_S1_L001_R1_001.fastq \u251c\u2500\u2500 CTRL1_S1_L001_R2_001.fastq \u251c\u2500\u2500 CTRL2_S1_L001_R1_001.fastq \u251c\u2500\u2500 CTRL2_S1_L001_R2_001.fastq \u251c\u2500\u2500 CTRL3_S1_L001_R1_001.fastq \u251c\u2500\u2500 CTRL3_S1_L001_R2_001.fastq \u251c\u2500\u2500 CTRL4_S1_L001_R1_001.fastq \u251c\u2500\u2500 CTRL4_S1_L001_R2_001.fastq \u251c\u2500\u2500 CTRL5_S1_L001_R1_001.fastq \u251c\u2500\u2500 CTRL5_S1_L001_R2_001.fastq \u251c\u2500\u2500 CTRL6_S1_L001_R1_001.fastq \u251c\u2500\u2500 CTRL6_S1_L001_R2_001.fastq \u251c\u2500\u2500 PD1_S1_L001_R1_001.fastq \u251c\u2500\u2500 PD1_S1_L001_R2_001.fastq \u251c\u2500\u2500 PD2_S1_L001_R1_001.fastq \u251c\u2500\u2500 PD2_S1_L001_R2_001.fastq \u251c\u2500\u2500 PD3_S1_L001_R1_001.fastq \u251c\u2500\u2500 PD3_S1_L001_R2_001.fastq \u251c\u2500\u2500 PD4_S1_L001_R1_001.fastq \u251c\u2500\u2500 PD4_S1_L001_R2_001.fastq \u251c\u2500\u2500 PD5_S1_L001_R1_001.fastq \u2514\u2500\u2500 PD5_S1_L001_R2_001.fastq","title":"Downloading the midbrain dataset"},{"location":"Dataset1/#installation","text":"","title":"Installation"},{"location":"Dataset1/#scrnaboxslurm-installation","text":"Now that the raw data has been downloaded and organized, we can install the latest version of scrnabox.slurm (v0.135): wget https://github.com/neurobioinfo/scrnabox/releases/download/v0.1.35/scrnabox.slurm.zip unzip scrnabox.slurm.zip For a description of the options for running scrnabox.slurm run the following command: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm bash $SCRNABOX_HOME/launch_scrnabox.sh -h If the pipeline has been installed properly, the above command should return the folllowing: mandatory arguments: -d (--dir) = Working directory (where all the outputs will be printed) (give full path) --steps = Specify what steps, e.g., 2 to run just step 2, 2-4, run steps 2 through 4) optional arguments: -h (--help) = See helps regarding the pipeline options. --method = Choose what scRNA method you want to use; use HTO and SCRNA for for hashtag nad Standard scRNA, respectively. --nFeature_RNA_L = Lower threshold of number of unique RNA transcripts for each cell, it filters nFeature_RNA > nFeature_RNA_L. --nFeature_RNA_U = Upper threshold of number of unique RNA transcripts for each cell, it filters --nFeature_RNA_U. --nCount_RNA_L = Lower threshold for nCount_RNA, it filters nCount_RNA > nCount_RNA_L --nCount_RNA_U = Upper threshold for nCount_RNA, it filters nCount_RNA < nCount_RNA_U --mitochondria_percent_L = Lower threshold for the amount of mitochondrial transcript, it is in percent, mitochondria_percent > mitochondria_percent_L. --mitochondria_percent_U = Upper threshold for the amount of mitochondrial transcript, it is in percent, mitochondria_percent < mitochondria_percent_U. --log10GenesPerUMI_U = Upper threshold for the log number of genes per UMI for each cell, it is in percent,log10GenesPerUMI=log10(nFeature_RNA)/log10(nCount_RNA). mitochondria_percent < log10GenesPerUMI_U. --log10GenesPerUMI_L = Lower threshold for the log number of genes per UMI for each cell, log10GenesPerUMI=log10(nFeature_RNA)/log10(nCount_RNA). mitochondria_percent > log10GenesPerUMI_L. --msd = you can get the hashtag labels by running the following code --marker = Find marker. --sinfo = Do you need sample info? --fta = FindTransferAnchors --enrich = Annotation --dgelist = creates a DGEListobject from a table of counts obtained from seurate objects. --genotype = Run the genotype contrast. --celltype = Run the Genotype-cell contrast. --cont = You can directly call the contrast to the pipeline. --seulist = You can directly call the list of seurat objects to the pipeline.","title":"scrnabox.slurm installation"},{"location":"Dataset1/#cellranger-installation","text":"For information regarding the installation of CellRanger, please visit the 10X Genomics documentation . If CellRanger is already installed on your HPC system, you may skip the CellRanger installation procedures. For our analysis of the midbrain dataset we used the 10XGenomics GRCh38-3.0.0 reference genome and CellRanger v5.0.1. For more information regarding how to prepare reference genomes for the CellRanger counts pipeline, please see the 10X Genomics documentation .","title":"CellRanger installation"},{"location":"Dataset1/#r-library-preparation-and-r-package-installation","text":"We must prepapre a common R library where we will load all of the required R packages. If the required R packages are already installed on your HPC system in a common R library, you may skip the following procedures. First, we will creat an R folder and download our desired R version. The analyses presented in our pre-print manuscript were conducted using R v4.2.1 #make common R library mkdir R_library cd R_library #install and open R in the terminal module load r/4.2.1 R #set common R library path R_LIB_PATH=\"~/R_library\" .libPaths(R_LIB_PATH) library(Seurat) library(ggplot2) library(dplyr) library(foreach) library(doParallel) library(Matrix) library(DoubletFinder) library(cowplot) library(clustree) library(xlsx) library(enrichR) library(stringi) library(limma) library(tidyverse) library(edgeR) library(vctrs) library(RColorBrewer) library(fossil) library(openxlsx) library(stringr) library(ggpubr) devtools::install_github(\u201cneurobioinfo/scrnabox/scrnaboxR\u201d)","title":"R library preparation and R package installation"},{"location":"Dataset1/#scrnabox-standard-analysis-track","text":"","title":"scRNAbox: Standard Analysis Track"},{"location":"Dataset1/#step-0-pipeline-initiation","text":"Now that scrnabox.slurm , CellRanger , R , and the Required R packages have been installed, we can proceed to our analysis with the Standard scRNAseq Analysis Track of the scRNAbox pipeline. We will create a pipeline folder designated for the analysis and run the pipeline initiation Step using the following code: mkdir pipeline cd pipeline export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 0 \\ --method SCRNA Next, we will navigate to the scrnabox_config.ini file in ~/pipeline/job_info/configs to define the path to the R library ( R_LIB_PATH= ), the version of R ( R_VERSION= ), and the path to CellRanger ( MODULECELLRANGER= ): cd ~/pipeline/job_info/configs nano scrnabox_config.ini MODULECELLRANGER=mugqic/cellranger/5.0.1 R_VERSION=4.2.1 R_LIB_PATH=~/R","title":"Step 0: Pipeline initiation"},{"location":"Dataset1/#step-1-fastq-pre-processing","text":"In this Step, we will run the CellRanger counts pipeline to generate feature-barcode expression matrices from the FASTQ files. While it is possible to manually prepare the library.csv files for each of the 11 samples in the experiment prior to running Step 1, for this analysis we are going to opt for automated library preparation. For more information regarding the manual prepartion of library.csv , files please see the Standard scRNAseq documentation under the Setup section. For our analysis of the midbrain dataset we set the following execution parameters for Step 1: Parameter Value par_automated_library_prep yes par_fastq_directory ~/fastqs par_sample_names PD1, PD2, PD3, PD4, PD5, CTRL1, CTRL2, CTRL3, CTRL4, CTRL5, CTRL6 par_rename_samples Yes par_new_sample_names Parkinson1, Parkinson2, Parkinson3, Parkinson4, Parkinson5, Control1, Control2, Control3, Control4, Control5, Control6 par_paired_end_seq TRUE REF_DIR_GRCH ~/genome/10xGenomics/refdata-cellranger-GRCh38-3.0.0 R1LENGTH NULL MEMPERCORE 30 Note: The parameters file for each Analytical Step is located in ~/pipeline/job_info/parameters . For a comprehensive description of the execution parameters for each Analytical Step see the Reference section of the scRNAbox documentation. We can run Step 1 using the following code. Because CellRanger runs a user interface, it is advisable to run Step 1 in a screen. export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline screen -S run_smajic_application_case bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 1 The outputs of the CellRanger counts pipeline, including the raw and filtered feature-barcode expression matrices, are deposited into ~/pipeline/step1 .","title":"Step 1: FASTQ pre-processing"},{"location":"Dataset1/#step-2-ambient-rna-removal-and-create-seurat-object","text":"In this Step, we are going to use the CellRanger-generated feature-barcode matrices to produce unique Seurat objects for each of the 11 samples. Ambient RNA detection and removal is optional for this Step; however, because Smajic et al. did not perform this analytical procedure we will skip it. We will retain genes that were detected in at least three cells and cells that expressed at least 1000 genes. For our analysis of the midbrain dataset we set the following execution parameters for Step 2: Parameter Value par_save_RNA Yes par_save_metadata Yes par_ambient_RNA No par_count_matrices NULL par_min.cells_L 3 par_min.features_L 1000 We can run Step 2 using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 2 Step 2 produces the following outputs for each sample. As an example we show the outputs for Parkinson1. step2 \u251c\u2500\u2500 figs2 \u2502 \u2514\u2500\u2500 vioplot_Parkinson1.png \u251c\u2500\u2500 info2 \u2502 \u251c\u2500\u2500 Parkinson11_RNA.txt \u2502 \u251c\u2500\u2500 MetaDataParkinson11.txt \u2502 \u251c\u2500\u2500 MetaDataParkinson1.txt \u2502 \u251c\u2500\u2500 meta_infoParkinson1.txt \u2502 \u251c\u2500\u2500 Parkinson1_RNA.txt \u2502 \u251c\u2500\u2500 sessionInfo.txt \u2502 \u2514\u2500\u2500 summary_Parkinson1.txt \u2514\u2500\u2500 objs2 \u2514\u2500\u2500 Parkinson1.rds Note: For a comprehensive description of the outputs for each Analytical Step, please see the Outputs section of the scRNAbox documentation. Figure 1. Figure produced by Step 2 of the Standard Analysis Track. The figure for the Parkinson1 sample is shown as an example. Sample-specific violin plots are produced to visualize the distribution of genes per cell (nFeature_RNA), molecules per cell (nCount_RNA), percentage of mitochondrial-encoded genes per cell (percent.mt), and perentage of ribosomal genes per cell (percent.ribo).","title":"Step 2: Ambient RNA removal and create Seurat object"},{"location":"Dataset1/#step-3-quality-control-and-filtering","text":"In this Step, we are going to perform quality control (QC) procedures and filter out low quality cells. We are going to filter out cells with <1500 unique molecules, >10% mitochondrial-encoded genes, and >10% ribosomal genes. In addition, we are going to remove mitochondrial-encoded and ribosomal genes and will perform cell cycle scoring. Prior to performing cell cycle scoring, we must normalize and scale the counts matrix. For our analysis of the midbrain dataset we set the following execution parameters for Step 3: Parameter Value par_save_RNA Yes par_save_metadata Yes par_seurat_object NULL par_nFeature_RNA_L NULL par_nFeature_RNA_U NULL par_nCount_RNA_L 1500 par_nCount_RNA_U NULL par_mitochondria_percent_L NULL par_mitochondria_percent_U 10 par_ribosomal_percent_L NULL par_ribosomal_percent_U 10 par_remove_mitochondrial_genes Yes par_remove_ribosomal_genes Yes par_remove_genes NULL par_normalization.method LogNormalize par_scale.factor 10000 par_selection.method vst par_nfeatures 2500 par_top 10 par_npcs_pca 30 par_cells 500 par_dims 12 par_dims_umap 10 par_n.neighbors 65 We can run Step 3 using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 3 Step 3 produces the following outputs for each sample. As an example we show the outputs for Parkinson1. step3 \u251c\u2500\u2500 figs3 \u2502 \u251c\u2500\u2500 cellcycle_Parkinson1.png \u2502 \u251c\u2500\u2500 dimplot_pcaParkinson1.png \u2502 \u251c\u2500\u2500 dimplot_umapParkinson1.png \u2502 \u251c\u2500\u2500 elbowplotParkinson1.png \u2502 \u251c\u2500\u2500 QC_vioplot_Parkinson1.png \u2502 \u2514\u2500\u2500 VariableFeaturePlotParkinson1.png \u251c\u2500\u2500 info3 \u2502 \u251c\u2500\u2500 MetaDataParkinson1.txt \u2502 \u251c\u2500\u2500 meta_info_Parkinson1.txt \u2502 \u251c\u2500\u2500 most_variable_genes_Parkinson1.txt \u2502 \u251c\u2500\u2500 Parkinson1_RNA.txt \u2502 \u251c\u2500\u2500 sessionInfo.txt \u2502 \u2514\u2500\u2500 summary_Parkinson1.txt \u2514\u2500\u2500 objs3 \u2514\u2500\u2500 Parkinson1.rds Figure 2. Figures produced by Step 3 of the Standard Analysis Track. The figures for the Parkinson1 sample are shown as an example. A) Distribution of QC metrics after filtering according to the user-defined thresholds. B) Variable features plot showing the top 2500 most variable features; the top 10 most variable features are labelled. C) Elbow plot to visualize the percentage of variance explained by each principal component (PC). D) Principal component analysis (PCA) visualizing the first two PCs. E) Uniform Manifold Approximation and Projections (UMAP) plot, taking the first ten PCs as input. F) Distibution of G2M and S scores across cells.","title":"Step 3: Quality control and filtering"},{"location":"Dataset1/#step-4-doublet-detection","text":"In this Step, we are going to identify doublets (erroneous libraries produced by two or more cells) and remove them from downstream analyses using the DoubletFinder tool (McGinnis et al. 2019). For optimal performance, DoubletFinder requires the user to define the following parameters: The number of statistically significant PCs (par_PCs) The number of artificial doublets to generate (par_pN) The expected doublet rate for each sample (par_expected_doublet_rate) The number of statistically significant PCs can be informed by the elbow plots produced in Step 2; it this case the top 15 PCs should maintain a robust compression of the data across samples. DoubletFinder is largely invariant to the number of artifical doublets generated , therefore we will maintain the default parameter of 0.25. The expected doublet rate can be informed by the number of recovered cells (~8% for ~10,000 cells recovered). The number of recovered cells can be informed by the barcodes.tsv.gz file produced by the CellRanger counts pipeline, which is located in ~/pipeline/step1/<sample>/output_folder/outs/filtered_feature_bc_matrix . The number of recovered cells for each sample and the corresponding doublet rate is shown below. Sample # of recovered cells Expected doublet rate (%) Control1 4863 3.9% Control2 4827 3.9% Control3 2632 2.3% Control4 5221 3.9% Control5 3703 3.1% Control6 6533 5.4% Parkinson1 2512 2.3% Parkinson2 6437 4.6% Parkinson3 3963 3.1% Parkinson4 2495 1.6% Parkinson5 5937 4.6% The expected doublet rates are approximations obtained from the 10X Genomics Next GEM Single Cell 3' v3.1 documentation , which was used by Smajic et al. for library preparation. For our analysis of the midbrain dataset we set the following execution parameters for Step 4: Parameter Value par_save_RNA Yes par_save_metadata Yes par_dropDN Yes par_PCs 15 par_pN 0.25 par_sct FALSE par_sample_names Control1, Control2, Control3, Control4, Control5, Control6, Parkinson1, Parkinson2, Parkinson3, Parkinson4, Parkinson5 par_expected_doublet_rate 0.039, 0.039, 0.023, 0.039, 0.031, 0.054, 0.023, 0.046, 0.031, 0.016, 0.046 We can run Step 4 using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 4 Step 4 produces the following outputs for each sample. As an example we show the outputs for Parkinson1. step4 \u251c\u2500\u2500 figs4 \u2502 \u2514\u2500\u2500 Parkinson1DF.classifications.png \u251c\u2500\u2500 info4 \u2502 \u251c\u2500\u2500 meta_info_Parkinson1.txt \u2502 \u251c\u2500\u2500 Parkinson1_RNA.txt \u2502 \u251c\u2500\u2500 sessionInfo.txt \u2502 \u2514\u2500\u2500 seu_MetaDataParkinson1.txt \u2514\u2500\u2500 objs4 \u2514\u2500\u2500 Parkinson1.rds Figure 3. Figure produced by Step 4 of the Standard Analysis Track. The figure for the Parkinson1 sample is shown as an example. Uniform Manifold Approximation and Projections (UMAP) plot showing the cell-type classification (singlet or doublet) for each droplet. In the figure title, the first value represents the number of simulated droplets (0.25), the second value represents the neighbourhood size (0.03), and the third value represents the number of predicted doublets (19).","title":"Step 4: Doublet detection"},{"location":"Dataset1/#step-5-integration-and-linear-dimensional-reduction","text":"In this Step, we are going to integrate the individual Seurat objects to enable joint analyses across all 11 samples. We will then perform normalization, scaling and linear dimensional reduction on the integrated assay. The outputs from Step 5 will inform the optimal clustering parameters for Step 6. For our analysis of the midbrain dataset we set the following execution parameters for Step 5: Parameter Value par_save_RNA Yes par_save_metadata Yes par_skip_integration No par_FindIntegrationAnchors_dim 25 par_DefaultAssay RNA par_normalization.method LogNormalize par_selection.method vst par_nfeatures 4000 par_RunUMAP_n.neighbors 65 par_RunPCA_npcs 30 par_RunUMAP_dims 10 par_compute_jackstraw Yes We can run Step 5 using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 5 Step 5 produces the following outputs. step5 \u251c\u2500\u2500 figs5 \u2502 \u251c\u2500\u2500 DimPlot_pca.png \u2502 \u251c\u2500\u2500 DimPlot_umap.png \u2502 \u251c\u2500\u2500 elbow.png \u2502 \u2514\u2500\u2500 Jackstraw_plot.png \u251c\u2500\u2500 info5 \u2502 \u251c\u2500\u2500 meta_info_seu_step5.csv \u2502 \u251c\u2500\u2500 sessionInfo.txt \u2502 \u251c\u2500\u2500 seu_int_MetaData.txt \u2502 \u2514\u2500\u2500 seu_int_RNA.txt \u2514\u2500\u2500 objs5 \u2514\u2500\u2500 seu_step5.rds Figure 4. Figures produced by Step 5 of the Standard Analysis Track. A) Principal component analysis (PCA) visualizing the first two principal components (PC) of the integrated assay. B) Uniform Manifold Approximation and Projections (UMAP) plot of the integrated assay, taking the first ten PCs as input. C) Elbow plot to visualize the percentage of variance explained by each PC. D) Jackstraw plot to visualize the distribution of p-values for each PC.","title":"Step 5: Integration and linear dimensional reduction"},{"location":"Dataset1/#step-6-clustering","text":"In this Step, we will cluster the cells to indentify groups of cells with similar expression profiles. Based on the Elbow and Jackstraw plots produced in Step 5, we are going to use the first 25 PCs for the nearest-neighbour graph construction and to run the Uniform Manifold Approximation and Projection (UMAP) dimensional reduction. We will cluster the cells at a clustering resolution of 0.1 to 1.5, in intervals of 1.5. To determine the stability of clusters, we will run the Louvain clustering algorithm five times for each clustering resolution, while shuffling the order of the nodes in the graph for each iteration, and will compute the Adjusted Rand Index (ARI) between pairs of clusters at a given clustering resolution. For our analysis of the midbrain dataset we set the following execution parameters for Step 6: Parameter Value par_save_RNA Yes par_save_metadata Yes par_skip_step5 No par_FindNeighbors_dims 25 par_RunUMAP_dims 25 par_FindNeighbors_k.param 30 par_FindNeighbors_prune.SNN 1/15 par_FindClusters_resolution 0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0,1.1,1.2,1.3,1.4,1.5 par_compute_ARI Yes par_RI_reps 5 We can run Step 6 using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 6 Step 6 produces the following outputs. step6 \u251c\u2500\u2500 ARI \u2502 \u251c\u2500\u2500 ARI.png \u2502 \u2514\u2500\u2500 test.xlsx \u251c\u2500\u2500 figs6 \u2502 \u251c\u2500\u2500 clustree_int.png \u2502 \u251c\u2500\u2500 integrated_snn_res.0.1.png \u2502 \u251c\u2500\u2500 integrated_snn_res.0.2.png \u2502 \u251c\u2500\u2500 integrated_snn_res.0.3.png \u2502 \u251c\u2500\u2500 integrated_snn_res.0.4.png \u2502 \u251c\u2500\u2500 integrated_snn_res.0.5.png \u2502 \u251c\u2500\u2500 integrated_snn_res.0.6.png \u2502 \u251c\u2500\u2500 integrated_snn_res.0.7.png \u2502 \u251c\u2500\u2500 integrated_snn_res.0.8.png \u2502 \u251c\u2500\u2500 integrated_snn_res.0.9.png \u2502 \u251c\u2500\u2500 integrated_snn_res.1.1.png \u2502 \u251c\u2500\u2500 integrated_snn_res.1.2.png \u2502 \u251c\u2500\u2500 integrated_snn_res.1.3.png \u2502 \u251c\u2500\u2500 integrated_snn_res.1.4.png \u2502 \u251c\u2500\u2500 integrated_snn_res.1.5.png \u2502 \u2514\u2500\u2500 integrated_snn_res.1.png \u251c\u2500\u2500 info6 \u2502 \u251c\u2500\u2500 meta_info.csv \u2502 \u251c\u2500\u2500 sessionInfo.txt \u2502 \u251c\u2500\u2500 seu_MetaData.txt \u2502 \u2514\u2500\u2500 seu_RNA.txt \u2514\u2500\u2500 objs6 \u2514\u2500\u2500 seu_step6.rds Figure 5. Figures produced by Step 6 of the Standard Analysis Track. A) ClustTree plot to visualize inter-cluster dynamics at varying cluster resolutions. B) Mean (top panel) and standard deviation (sd; middle panel) of the Adjusted RNA Index (ARI) between clustering pairs at each user-defined clustering resolution. The bottom panel shows the number of clusters at each user-defined clustering resolution. C) Uniform Manifold Approximation and Projections (UMAP) plot at a clustering resolution of 0.9.","title":"Step 6: Clustering"},{"location":"Dataset1/#step-7-cluster-annotation","text":"In this Step, we are going to annotate the clusters identified in Step 6 to define the cellular species in the midbrain dataset. scRNAbox provides three distinct methods for cluster annotations Method 1: Cluster marker gene set enrichment analysis (GSEA) Method 2: Module score Method 2: Reference-based annotation For comprehensive description of each cluster annotation Method, please see the Standard scRNAseq Analysis Track section of the scRNAbox documentation or our pre-print manuscript. In addition to these three Methods, we can visualize the expression of select features to further inform the cellular species in the dataset.","title":"Step 7: Cluster annotation"},{"location":"Dataset1/#method-1-cluster-marker-gsea","text":"Using Method 1, we are first going to identify differentially expressed marker genes for each cluster. We must define the number of marker genes for each cluster that we want scRNAbox to report and selecte a clustering resolution that we want to annotate. In this case we will report the top five marker genes for each cluster at a clustering resolution of 1.5. To identify the marker genes for each cluster, we set the following execution parameters for Step 7 ( step7_par.txt ): Parameter Value par_save_RNA Yes par_save_metadata Yes par_level_cluster integrated_snn_res.1.9 par_top_sel 5 par_db NULL par_compute_module_score No par_module_score NULL par_reference NULL par_level_celltype NULL par_FindTransferAnchors_dim NULL par_futureglobalsmaxSize NULL par_visualize_select_features No par_select_features NULL We can identify the marker genes for each cluster using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --marker T The above code produces the following outputs: step7 \u251c\u2500\u2500 figs7 \u2502 \u251c\u2500\u2500 marker \u2502 \u2502 \u2514\u2500\u2500 heatmap.pdf \u2502 \u251c\u2500\u2500 module_score \u2502 \u251c\u2500\u2500 umap.pdf \u2502 \u251c\u2500\u2500 umap_splitted.pdf \u2502 \u2514\u2500\u2500 visualize_select_features \u251c\u2500\u2500 info7 \u2502 \u251c\u2500\u2500 marker \u2502 \u2502 \u251c\u2500\u2500 cluster_just_genes.xlsx \u2502 \u2502 \u251c\u2500\u2500 ClusterMarkers.csv \u2502 \u2502 \u251c\u2500\u2500 ClusterMarkers.rds \u2502 \u2502 \u251c\u2500\u2500 cluster_whole.xlsx \u2502 \u2502 \u2514\u2500\u2500 top_sel.csv \u2502 \u251c\u2500\u2500 module_score \u2502 \u2514\u2500\u2500 sessionInfo_marker.txt \u2514\u2500\u2500 objs7 In addition to identifying the marker genes for each cluster, the above code produces UMAP plots at the user-defined clustering resolution (1.5) to visualize the clustering landscape across all cells in the dataset and at the sample level. Figure 6. Uniform Manifold Approximation and Projections (UMAP) plots at the user-defined clustering resolution. A) The clustering landscape at the user-defined clustering resolution across all cells in the dataset. B ) The clustering landscape at the user-defined clustering resolution, stratified by sample. Now that we have identified the marker genes for each cluster, we will perform a gene set enrichment analysis (GSEA) ; we will test the differentially expressed genes (DEG) in the positive direction (Log2 fold-change > 0.00) for enrichment across gene set libraries that define cell types using the EnrichR tool. For this analysis, we will leverage the following libraries: Descartes_Cell_Types_and_Tissue_2021; CellMarker_Augmented_2021; Azimuth_Cell_Types_2021 cell type libraries. To perform GSEA, we set the following execution parameters for Step 7 ( step7_par.txt ): Parameter Value par_save_RNA Yes par_save_metadata Yes par_level_cluster integrated_snn_res.1.5 par_top_sel 5 par_db Descartes_Cell_Types_and_Tissue_2021, CellMarker_Augmented_2021, Azimuth_Cell_Types_2021 par_compute_module_score No par_module_score NULL par_reference NULL par_level_celltype NULL par_FindTransferAnchors_dim NULL par_futureglobalsmaxSize NULL par_visualize_select_features No par_select_features NULL If your HPC allows access to the internet , we can perform GSEA using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --enrich T Note: If your HPC does not allow access to the internet , you will have to run GSEA locally. For more information, please see the Standard scRNAseq documentation under the Step 7 section. The above code produces the following outputs. As an example, we are only showing the outputs for cluster 0. step7 \u2514\u2500\u2500 annot_enrich \u251c\u2500\u2500 cluster0 \u2502 \u251c\u2500\u2500 Er.genes.1.csv \u2502 \u251c\u2500\u2500 Er.genes.2.csv \u2502 \u251c\u2500\u2500 Er.genes.3.csv \u2502 \u251c\u2500\u2500 plotenrich1.pdf \u2502 \u251c\u2500\u2500 plotenrich2.pdf \u2502 \u2514\u2500\u2500 plotenrich3.pdf \u251c\u2500\u2500 cluster1 \u251c\u2500\u2500 cluster2 \u251c\u2500\u2500 cluster3 \u251c\u2500\u2500 cluster4 \u251c\u2500\u2500 cluster5 \u251c\u2500\u2500 cluster6 \u251c\u2500\u2500 cluster7 \u251c\u2500\u2500 cluster8 \u251c\u2500\u2500 cluster9 \u251c\u2500\u2500 cluster10 \u251c\u2500\u2500 cluster11 \u251c\u2500\u2500 cluster12 \u251c\u2500\u2500 cluster13 \u251c\u2500\u2500 cluster14 \u251c\u2500\u2500 cluster15 \u251c\u2500\u2500 cluster16 \u251c\u2500\u2500 cluster17 \u251c\u2500\u2500 cluster18 \u251c\u2500\u2500 cluster19 \u251c\u2500\u2500 cluster20 \u251c\u2500\u2500 cluster21 \u2514\u2500\u2500 cluster22 After performing cluster marker GSEA and curating the results, we can produce our first iteration of the cluster annotations. Note: Visualizing intermediate cluster annotations is not incorporated into the scRNAbox pipeline; however we provide the code to do so below. Once users are satisfied with their final cluster annotations, they can provide the curated results in the parameters file for Step 8 , which will be discussed below. ## load and open R module load r/4.2.1 R ## load parameters # path to common R library r_lib_path = \"~/R\" # path to pipeline directory output_dir = \"~/pipeline\" # clustering resolution to cluster clustering_resolution = \"integrated_snn_res.1.5\" # intermediate cluster annotations intermediate_cluster_labels = c(\"Oligodendrocytes\", \"Oligodendrocytes\", \"Neuron\",\"Oligodendrocytes\",\"Oligodendrocytes\",\"Oligodendrocytes\",\"Oligodendrocytes\",\"Oligodendrocytes\",\"OPC\", \"Endothelial cells\",\"Microglia\", \"Oligodendrocytes\",\"Astrocytes\", \"Neuron\", \"Astrocytes\", \"Endothelial cells\",\"Endothelial cells\", \"Astrocytes\", \"Neuron\",\"Neuron\",\"Neuron\", \"Microglia\", \"Astrocytes\") ## load library .libPaths(r_lib_path) packages<-c('Seurat','ggplot2', 'dplyr','stringi','limma','tidyverse','edgeR') lapply(packages, library, character.only = TRUE) ## load Step 6 Seurat RDS object sample_name<-list.files(path = paste(output_dir, \"/step6/objs6\",sep=\"\"),pattern = \"*.rds\") seu.int.c<-readRDS(paste(output_dir,'/step6/objs6/',sample_name, sep='')) ## set cluster annotations obtained from cluster annotations cluster.ids<-intermediate_cluster_labels ## set cluster resolution and rename cluster identities seu.int.c <- SetIdent(seu.int.c, value = clustering_resolution) names(cluster.ids) <- levels(seu.int.c) seu.int.c <- RenameIdents(seu.int.c, cluster.ids) ##plot UMAP DimPlot(seu.int.c, reduction = \"umap\", label = TRUE, pt.size = 0.5) + NoLegend() ggsave(file = paste(output_dir,'/step7/figs7','/intermediate_cluster_annotation.pdf', sep='')) Figure 7. Figures produced by Method 1 (Cluster Marker GSEA) of the scRNAbox cluster annotation module. A) The top expressional markers that define each cluster are visualized through a heatmap showing the expression across cells, stratified by cluster. B) Differentially expressed marker genes in the positive direction (Log2 fold-change > 0.00) can be tested for enrichment across gene-set libraries that define cell types using the EnrichR tool. The enrichment results are visualized through a bar plot which displays the 20 most enriched terms for a particular cluster. As an example, we show the enrichment results of cluster 0 using the Azimuth_Cell_Types_2021 cell type library. C) Uniform Manifold Approximation and Projections (UMAP) plot showing the intermediate cluster annotations.","title":"Method 1: Cluster marker GSEA"},{"location":"Dataset1/#visualizing-the-expression-of-select-features","text":"Now that we have broadly defined the cellular species that comprise our clusters, we are going to explore the expression of the marker genes used by Smajic et al. to define their clusters: Cell tyep Gene Oligodendrocytes MOBP OPC VCAN Astrocytes AQP4 Ependymal FOXJ1 Microglia CD74 Endothelial CLDN5 Pericytes PDGFRB Excitatory neurons SLC17A6 Inhibitory neurons GAD2 GABAergic neurons GAD2 , GRIK1 Dopaminergic neurons (DaN) TH Degenerating DaN CADPS2 To visualize these features, we set the following execution parameters for Step 7 ( step7_par.txt ): Parameter Value par_save_RNA Yes par_save_metadata Yes par_level_cluster integrated_snn_res.1.5 par_top_sel 5 par_db Descartes_Cell_Types_and_Tissue_2021, CellMarker_Augmented_2021, Azimuth_Cell_Types_2021 par_compute_module_score No par_module_score NULL par_reference NULL par_level_celltype NULL par_FindTransferAnchors_dim NULL par_futureglobalsmaxSize NULL par_visualize_select_features Yes par_select_features MOBP, VCAN, AQP4,FOXJ1, CD74, CLDN5, PDGFRB, SLC17A6, GAD2, GRIK1, TH, CADPS2 We can visualize the expression of these features using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --marker T The above code produces the following outputs: step7 \u2514\u2500\u2500 figs7 \u2514\u2500\u2500 visualize_select_features \u251c\u2500\u2500select_feature_dot_plot.pdf \u251c\u2500\u2500select_feature_feature_plot.pdf \u2514\u2500\u2500select_feature_violin_plot.pdf Figure 8. Figures produced by the \"visualize select features\" option in the scRNAbox cluster annotation module. The expression of select features can be visualized at the cluster level via A) a dot plot and B) violin plots. C) The expression of select features can be visualized at the cell level via feature plots. Based on the results of the above analyses, we can re-visit our cluster annotations using the same intermediate annotation code as above and visualize the annotations via a UMAP. Figure 9. Intermediate cluster annotations. Uniform Manifold Approximation and Projections (UMAP) plot showing the intermediate cluster annotations after leveraging the \"visualize select feature\" function of scRNAbox's cluster annotation module.","title":"Visualizing the expression of select features"},{"location":"Dataset1/#method-2-module-score","text":"Using Method 2, we are going to comparatively quantify the expression of gene sets across clusters at the single-cell level. We will first define the gene set that we want to explore in a csv file; as an example, we are going to explore the expression of some well-known marker genes for the cellular species of interest. We will first produce a csv file with the following structure. This csv can be found HERE da_neurons NPC_orStemLike mature_neurons excitatory_neurons inhbitory_neurons astrocytes oligodendrocytes radial_glia epithelial microglia TH DCX RBFOX3 GRIA2 GAD1 GFAP MBP PTPRC HES1 IBA1 SLC6A3 NEUROD1 SYP GRIA1 GAD2 S100B MOG AIF1 HES5 P2RY12 SLC18A2 TBR1 VAMP1 GRIA4 GAT1 AQP4 OLIG1 ADGRE1 SOX2 P2RY13 SOX6 PCNA VAMP2 GRIN1 PVALB APOE OLIG2 VIM SOX10 TREM119 NDNF MKI67 TUBB3 GRIN2B GABR2 SOX9 SOX10 TNC NES GPR34 SNCG SOX2 SYT1 GRIN2A GABR1 SLC1A3 PTPRZ1 CDH1 SIGLECH ALDH1A1 NES BSN GRIN3A GBRR1 FAM107A NOTCH1 TREM2 CALB1 PAX6 HOMER1 GRIN3 GABRB2 HOPX CX3CR1 TACR2 SLC17A6 GRIP1 GABRB1 LIFR FCRLS SLC17A6 CAMK2A GABRB3 ITGB5 OLFML3 SLC32A1 GABRA6 IL6ST HEXB OTX2 GABRA1 SLC1A3 TGFBR1 GRP GABRA4 SALL1 LPL TRAK2 MERTK CCK PROS1 VIP We can then define the location of our csv file in the execution parameters for Step 7 ( step7_par.txt ): Parameter Value par_save_RNA Yes par_save_metadata Yes par_level_cluster integrated_snn_res.1.5 par_top_sel 5 par_db NULL par_compute_module_score Yes par_module_score ~/pipeline/module_score.csv par_reference NULL par_level_celltype NULL par_FindTransferAnchors_dim NULL par_futureglobalsmaxSize NULL par_visualize_select_features No par_select_features NULL We can compute the module score for our gene sets using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --marker T The above code produces the following outputs: step7 \u251c\u2500\u2500 figs7 \u2502 \u2514\u2500\u2500 module_score \u2502 \u251c\u2500\u2500module_score_astrocytes.png \u2502 \u251c\u2500\u2500module_score_epithelial.png \u2502 \u251c\u2500\u2500module_score_da_neurons.png \u2502 \u251c\u2500\u2500module_score_excitatory_neurons.png \u2502 \u251c\u2500\u2500module_score_inhbitory_neurons.png \u2502 \u251c\u2500\u2500module_score_mature_neurons.png \u2502 \u251c\u2500\u2500module_score_microglia.png \u2502 \u251c\u2500\u2500module_score_NPC_orStemLike.png \u2502 \u251c\u2500\u2500module_score_oligodendrocytes.png \u2502 \u2514\u2500\u2500module_score_radial_glia.png \u2514\u2500\u2500 info7 \u2514\u2500\u2500module_score \u2514\u2500\u2500geneset_by_cluster.csv Figure 10. Figures produced by Method 2 (Module score) of the scRNAbox cluster annotation module. Uniform Manifold Approximation and Projections (UMAP) plots showing the module score across established marker genes for A) dopaminergic neurons, B) neural progenitor cells, C) mature neurons, D) excitatory neurons, E) inhibitory neurons, F) astrocytes, G) oligodendrocytes, H) radial glia, I) epithelial cells, and J) microglia.","title":"Method 2: Module score"},{"location":"Dataset1/#method-3-reference-based-annotation","text":"Using Method 3, we are going to leverage the cell-type annotations from a reference Seurat object and generate annotation predictions for the query dataset. For reference-based annotation we must define the path to a our reference Seurat object and the column of the reference Seurat object's metadata that contains the cell type annotations. For the midbrain dataset, we are going to use a reference Seurat object from Kamath et al. . To perform reference-based annotations, we set the following execution parameters for Step 7 ( step7_par.txt ): Parameter Value par_save_RNA Yes par_save_metadata Yes par_level_cluster integrated_snn_res.1.5 par_top_sel NULL par_db NULL par_compute_module_score No par_module_score NULL par_reference ~/reference_seurat_object.rds par_level_celltype Cell_Type par_FindTransferAnchors_dim 10 par_futureglobalsmaxSize 60000 * 1024^2 par_visualize_select_features No par_select_features NULL We can perform reference-based annotations using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --fta T The above code produces the following outputs: step7 \u251c\u2500\u2500 figs7 \u2502 \u2514\u2500\u2500 reference_based_annotation \u2502 \u2514\u2500\u2500UMAP_transferred_labels.pdf \u2514\u2500\u2500 objs7 \u2514\u2500\u2500seu_step7.rds Figure 11. Figure produced by Method 3 (reference-based annotation) of the scRNAbox cluster annotation module. Uniform Manifold Approximation and Projections (UMAP) plots showing the cluster annotations from the reference Seurat object projected onto the query Seurat object.","title":"Method 3: Reference-based annotation"},{"location":"Dataset1/#step-8-differential-gene-expression-contrasts","text":"In this step we are going to perform differential gene expression (DGE) analysis between our samples. ScRNAbox faciltates DGE contrasts between samples ( sample-sample contrasts ) and between samples, stratified by cell type ( sample-cell contrasts ). The DGE contrasts module contains three components: 1) Create DGEList object 2) Sample-sample contrasts 3) Sample-cell contrasts","title":"Step 8: Differential gene expression contrasts"},{"location":"Dataset1/#create-dgelist-object","text":"First, we are going to create a DGElist object. Before doing so, we must define our desired clustering resolution and the final cluster annotations informed by Step 7. We are also going to rename our samples in order to faciliate DGE contrasts. To create a DGElist object, we set the following execution parameters for Step 8 ( step8_par.txt ): Parameter value par_save_RNA Yes par_save_metadata Yes par_level_cluster integrated_snn_res.1.5 par_step8_clus_label Oligodendrocytes, Oligodendrocytes, Excitatory_Neurons, Oligodendrocytes, Oligodendrocytes, Oligodendrocytes, Oligodendrocytes, Oligodendrocytes, OPC, Endothelial_cells, Microglia, Oligodendrocytes, Astrocytes, Excitatory_Neurons, Astrocytes, Pericytes, Endothelial_cells, Ependymal, GABAergic_neurons, Oligodendrocytes, Inhibitory_neurons, Oligodendrocytes, OPC par_new_genotype yes par_old_sample_label Control1, Control2, Control3, Control4, Control5, Control6, Parkinson1, Parkinson2, Parkinson3, Parkinson4, Parkinson5 par_new_sample_label Control, Control, Control, Control, Control, Control, Parkinson, Parkinson, Parkinson, Parkinson, Parkinson Note: Cell names and sample names cannot have spaces. For example, do not write \"Endothelial cells\", instead write \"Endothelial_cells\". We can create the DGElist object using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --dgelist T The above code produces the following outputs: step8 \u251c\u2500\u2500 figs8 \u2502 \u2514\u2500\u2500 final_cluster_annotation.pdf \u251c\u2500\u2500 info8 \u2502 \u251c\u2500\u2500 de_genes.rds \u2502 \u251c\u2500\u2500 dge.rds \u2502 \u251c\u2500\u2500 meta_info_de_genes.txt \u2502 \u251c\u2500\u2500 meta_info_dge.txt \u2502 \u2514\u2500\u2500 meta_info_seu_step8.txt \u2514\u2500\u2500 objs8 \u2514\u2500\u2500 seu_step8.rds Figure 12. Final cluster annotations used for differential gene expression (DGE) contrasts . Uniform Manifold Approximation and Projections (UMAP) plots showing the final cluster annotation obtained by curating the results from scRNAbox's cluster annotation module (Step 7). The final cluster annotations will be used throughout the DGE contrasts module.","title":"Create DGEList object"},{"location":"Dataset1/#sample-sample-contrasts","text":"Now that we have our DGElist object, we can perform DGE contrasts between samples (sample-sample contrasts). As an example, we will test for DGE between Parkinson's disease samples and controls. We must first define our contrast matrix in the sample-sample contrasts parameters file ( step8_contrast_genotype.txt ): cont_name control versus design1 Control Parkinson We can perform sample-sample DGE contrasts using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --genotype T The above code produces the following outputs: step8 \u2514\u2500\u2500 cont_genotype \u2514\u2500\u2500 design1.csv","title":"Sample-sample contrasts"},{"location":"Dataset1/#sample-cell-contrasts","text":"We can also perform DGE contrasts between samples, stratified by cell type (sample-cell contrasts). As an example, we will test for DGE between microglia from Parkinson's disease and controls. We must first define our contrast matrix in the sample-cell contrasts parameters file ( step8_contrast_celltype.txt ): cont_name cell control versus design1_cell Microglia Control Parkinson We can perform sample-cel DGE contrasts using the following code: export SCRNABOX_HOME=~/scrnabox/scrnabox.slurm export SCRNABOX_PWD=~/pipeline bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --celltype T The above code produces the following outputs: step8 \u2514\u2500\u2500 cont_celltype \u2514\u2500\u2500 design1.csv","title":"Sample-cell contrasts"},{"location":"Dataset1/#step-9-enrichment-analysis","text":"","title":"Step 9: Enrichment analysis"},{"location":"Dataset1/#job-configurations","text":"The following job configurations were used for our analysis of the midbrain dataset. Job Configurations can be modified for each Analytical Step in the scrnabox_config.ini file in ~/pipeline/job_info/configs Step THREADS_ARRAY MEM_ARRAY WALLTIME_ARRAY Step2 4 16g 00-05:00 Step3 4 16g 00-05:00 Step4 4 45g 00-05:00 Step5 4 45g 00-05:00 Step6 4 16g 00-05:00 Step7 marker 4 40g 00-01:00 Step7 fta 4 150g 00-09:00 Step8 dgelist 4 40g 00-12:00 Step8 cont 10 40g 00-12:00","title":"Job Configurations"},{"location":"Dataset2/","text":"Dataset2 Contents Introduction From step 2 From step 3 From step 4 From Step 5: integration From Step 6: Clustering Introduction This guide provides a concise introduction to analyzing data using the Scrnabox pipeline. The scrnabox.slurm pipeline is primarily designed to initiate Step 1, which involves running cellranger on fastq data. However, it can also be utilized with processed data, where some of the steps have already been completed. The following section explains how to use the pipeline for analyzing processed data. To begin, you need to set up the pipeline for analysis and determine the starting step based on your requirements. From Step 2 If the cellranger is already run the raw data, copy the results under ${SCRNABOX_PWD}/step1 , then follow the step2 to analyze data bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 2 From step 3 If the seurat objects are available and you want to run QC and filter cell ; save the seurate objects under ${SCRNABOX_PWD}/step2/objs and run the following codes, bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 3 \\ --nFeature_RNA_L 1000 \\ --nCount_RNA_U 65000 \\ --mitochondria_percent_U 25 From step 4 If the QC and filtering is already done, you can save under ${SCRNABOX_PWD}/step3/objs and run the following codes to get the hashtag labels by running the following code bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 4 \\ --msd T Add the old label and its new corresponding label in '${SCRNABOX_PWD}/job_output/parameters/step4_par.txt'. Run the following to run the demuplixing bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 4 From Step 5: Integration If you want to integrate the surate objects, just save them in ${SCRNABOX_PWD}/step4/objs and follow Srep 5 bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 5 From Step 6: Clustering In this step, you need to have just one seurat object which should be save in ${SCRNABOX_PWD}/step5/objs bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 6","title":"- Cell Hashtag Analysis: PBMC dataset"},{"location":"Dataset2/#dataset2","text":"","title":"Dataset2"},{"location":"Dataset2/#contents","text":"Introduction From step 2 From step 3 From step 4 From Step 5: integration From Step 6: Clustering","title":"Contents"},{"location":"Dataset2/#introduction","text":"This guide provides a concise introduction to analyzing data using the Scrnabox pipeline. The scrnabox.slurm pipeline is primarily designed to initiate Step 1, which involves running cellranger on fastq data. However, it can also be utilized with processed data, where some of the steps have already been completed. The following section explains how to use the pipeline for analyzing processed data. To begin, you need to set up the pipeline for analysis and determine the starting step based on your requirements.","title":"Introduction"},{"location":"Dataset2/#from-step-2","text":"If the cellranger is already run the raw data, copy the results under ${SCRNABOX_PWD}/step1 , then follow the step2 to analyze data bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 2","title":"From Step 2"},{"location":"Dataset2/#from-step-3","text":"If the seurat objects are available and you want to run QC and filter cell ; save the seurate objects under ${SCRNABOX_PWD}/step2/objs and run the following codes, bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 3 \\ --nFeature_RNA_L 1000 \\ --nCount_RNA_U 65000 \\ --mitochondria_percent_U 25","title":"From step 3"},{"location":"Dataset2/#from-step-4","text":"If the QC and filtering is already done, you can save under ${SCRNABOX_PWD}/step3/objs and run the following codes to get the hashtag labels by running the following code bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 4 \\ --msd T Add the old label and its new corresponding label in '${SCRNABOX_PWD}/job_output/parameters/step4_par.txt'. Run the following to run the demuplixing bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 4","title":"From step 4"},{"location":"Dataset2/#from-step-5-integration","text":"If you want to integrate the surate objects, just save them in ${SCRNABOX_PWD}/step4/objs and follow Srep 5 bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 5","title":"From Step 5: Integration"},{"location":"Dataset2/#from-step-6-clustering","text":"In this step, you need to have just one seurat object which should be save in ${SCRNABOX_PWD}/step5/objs bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 6","title":"From Step 6: Clustering"},{"location":"FAQ/","text":"Frequently asked questions Possibility to consider multiple control How skip the integration step Can we run without cellraanger error: Batch job submission failed: Requested node configuration is not available Possibility to consider multiple control User can redefine the genotype; in the step8, add /job_info/parameters/step8_par.txt , add new_genotype='YES and redefine the labels: new_genotype='YES' old_antibody_label=c('B0251-TotalSeqB','B0252-TotalSeqB','B0253-TotalSeqB','B0254-TotalSeqB','B0255-TotalSeqB','B0256-TotalSeqB') new_antibody_label=c('AIW002','SNCA-A53T','GBA-KO','Parkin-KO','PINK1-KO','SNCA-KO') How to skip the integration step If you have a sole sample, there is no need for the integration step; once you run step 4, go to step 6 and add par_skip_step5='YES' to the step 6 parameter, /job_info/parameters/step6_par.txt . Can we run without cellraanger. if you have the matrix file, ....... error: Batch job submission failed: Requested node configuration is not available If you get the above error, navigate to the scrnabox_config.ini file in ~/working_directory/job_info/configs and adjust the Job parameters for the Analytical Step that produced the error. Make sure to uncomment the corresponding lines in the configuration file. For example, if you get the error in Step 2, navigate to the configuration file and you will see the following. ############# [step2] # THREADS_ARRAY[\"step_2\"]=10 # MEM_ARRAY[\"step_2\"]=16g # WALLTIME_ARRAY[\"step_2\"]=00-05:00 To resolve the error, uncomment the lines and change the values. For instance: ############# [step2] THREADS_ARRAY[\"step_2\"]=4 MEM_ARRAY[\"step_2\"]=10g WALLTIME_ARRAY[\"step_2\"]=00-05:00 Step 3: Error in { : task 1 failed - \"No cells found\" adjust the filtering parameters, this means that none of the cells in the users experiment pass all of the filtering thresholds. how to edit text files in the terminal","title":"FAQ"},{"location":"FAQ/#frequently-asked-questions","text":"Possibility to consider multiple control How skip the integration step Can we run without cellraanger error: Batch job submission failed: Requested node configuration is not available","title":"Frequently asked questions"},{"location":"FAQ/#possibility-to-consider-multiple-control","text":"User can redefine the genotype; in the step8, add /job_info/parameters/step8_par.txt , add new_genotype='YES and redefine the labels: new_genotype='YES' old_antibody_label=c('B0251-TotalSeqB','B0252-TotalSeqB','B0253-TotalSeqB','B0254-TotalSeqB','B0255-TotalSeqB','B0256-TotalSeqB') new_antibody_label=c('AIW002','SNCA-A53T','GBA-KO','Parkin-KO','PINK1-KO','SNCA-KO')","title":"Possibility to consider multiple control"},{"location":"FAQ/#how-to-skip-the-integration-step","text":"If you have a sole sample, there is no need for the integration step; once you run step 4, go to step 6 and add par_skip_step5='YES' to the step 6 parameter, /job_info/parameters/step6_par.txt .","title":"How to skip the integration step"},{"location":"FAQ/#can-we-run-without-cellraanger","text":"if you have the matrix file, .......","title":"Can we run without cellraanger."},{"location":"FAQ/#error-batch-job-submission-failed-requested-node-configuration-is-not-available","text":"If you get the above error, navigate to the scrnabox_config.ini file in ~/working_directory/job_info/configs and adjust the Job parameters for the Analytical Step that produced the error. Make sure to uncomment the corresponding lines in the configuration file. For example, if you get the error in Step 2, navigate to the configuration file and you will see the following. ############# [step2] # THREADS_ARRAY[\"step_2\"]=10 # MEM_ARRAY[\"step_2\"]=16g # WALLTIME_ARRAY[\"step_2\"]=00-05:00 To resolve the error, uncomment the lines and change the values. For instance: ############# [step2] THREADS_ARRAY[\"step_2\"]=4 MEM_ARRAY[\"step_2\"]=10g WALLTIME_ARRAY[\"step_2\"]=00-05:00","title":"error: Batch job submission failed: Requested node configuration is not available"},{"location":"FAQ/#step-3-error-in-task-1-failed-no-cells-found","text":"adjust the filtering parameters, this means that none of the cells in the users experiment pass all of the filtering thresholds.","title":"Step 3: Error in { : task 1 failed - \"No cells found\""},{"location":"FAQ/#how-to-edit-text-files-in-the-terminal","text":"","title":"how to edit text files in the terminal"},{"location":"HTO/","text":"ScRNAbox pipeline: Cell Hashtag scRNAseq Analysis Track Contents Introduction Setup Step 1: FASTQ pre-processing Step 2: Create Seurat object Step 3: Quality control and filtering Step 4: Demultiplexing and doublet removal Step 5: Integration and linear dimensional reduction Step 6: Clustering step 7: Cluster annotation step 8: Differential gene expression contrasts Introduction This guide provides an overview of the Analytical Steps that comprise the Cell Hashtag Analysis Track of the scRNAbox pipeline. The Cell Hashtag Analysis Track is designed for multiplexed scRNAseq experiments, whereby samples are tagged with sample-specific barcodes, pooled, and sequenced together; thus, users should have FASTQ files that contain scRNAseq data from multiple samples. If instead samples were sequenced separately, users should leverage the Standard scRNAseq Analysis Track. The Analytical Steps involved in the Cell Hashtag Analysis Track of the scRNAbox pipeline are outlined in the figure below. Note: This tutorial assumes that scrnabox.slurm , cellranger , R , and the required R packages have already been installed onto the HPC system. If this is not the case, please visit Installation to do so before proceeding. If the required packages are installed, you can proceed to Setup . Setup Before running the pipeline, create a dedicated folder for the analysis (hereafter referred to as the working directory). Then, define the path of the working directory and the path to scrnabox.slurm : mkdir ~/working_directory cd ~/working_directory export SCRNABOX_HOME=~/scrnabox.slurm export SCRNABOX_PWD=~/working_directory Next, run the pipeline initiation Step ( --steps 0 ) and define the Standard scRNAseq Analysis Track ( --method HTO ) using the following command from the working directory: cd ~/working_directory bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 0 \\ --method HTO After running the pipeline initiation Step, the structure of the working directory should be as follows: working_directory \u2514\u2500\u2500 job_info \u251c\u2500\u2500 configs \u251c\u2500\u2500 logs \u2514\u2500\u2500 parameters The configs/ directory contains the scrnabox_config.ini file which allows users to specify their job allocations (memory, threads, and walltime) for each Analytical Step using the Slurm Workload Manager; The logs/ directory records the events of each Analytical Step; The parameters/ directory contains adjustable, Step-specific text files which allow users to define the execution parameters for each Analytical Step. Next, navigate to the scrnabox_config.ini file in ~/working_directory/job_info/configs to define the path to the R library, the version of R, and the path to CellRanger. For example: MODULECELLRANGER=mugqic/cellranger/5.0.1 R_VERSION=4.2.1 R_LIB_PATH=Path/to/R/library Upon completing the setup procedures, users can run their analysis using the scRNAbox pipeline. scRNAbox Analytical Steps Specific Analytical Steps are called using the --steps flag. The output of each Analytical Step is deposited into its respective folder within the working directory (e.g. ~/working_directory/step1 ). Prior to running each Analytical Step, users are strongly encouraged to modify the execution parameters of the analysis using the adjustable, Step-specific parameters text files. The parameters text files are located in ~/working_directory/job_info/ . To ensure replicability, a summary report file documents the execution parameters for each iteration of each Analytical Step, which is located in ~/working_directory/job_info/summary_report.txt . For detailed descriptions of each Analytical Step please see our pre-print manuscript. Step 1: FASTQ pre-processing In this step, feature-barcode expression matrices are generated from FASTQ files using the CellRanger counts pipeline. Prior to running CellRanger, library.csv files must be prepared to define the FASTQ files for each sample. ScRNAbox provides an option for automating this process or users may manually prepare the libraries. For more information, please see the the Library preparation tutorial. The following parameters are adjustable for Step 1: Parameter Default Description REF_DIR_GRCH NULL Path to reference genome for FASTQ alignment. 10X Genomics reference genomes are available for download. For more information see their documentation . R1LENGTH NULL Minimum number of bases to retain for R1 sequence of gene expression MEMPERCORE 30 For clusters whose job managers do not support memory requests, it is possible to request memory in the form of cores. This option will scale up the number of threads requested via the MRO_THREADS variable according to how much memory a stage requires when given to the ratio of memory on your nodes. par_automated_library_prep No Whether or not to perform automated library prep. Alternatively, you may set this parameter to \"no\" and manually prepare the libraries. par_fastq_directory NULL Path to directory containing the FASTQ files. This directory should only contain FASTQ files for the experiment. par_RNA_run_names NULL The names of the sequencing runs for the RNA assay par_HTO_run_names NULL The names of the sequencing runs for the HTO assay par_seq_run_names NULL The user-selected name for the sequencing run. These names will be used to identify cells in the Seurat objects par_paired_end_seq Yes Whether or not paired-end sequencing was performed id NULL Barcode ID which will be used to track the feature counts name NULL The user-selected name for the barcode identifier read R2 Which RNA sequencing read contains the barcode sequence. This value Will be either R1 or R2. pattern NULL The pattern of the barcode identifiers sequence NULL The nucleotide sequence associated with the barcode identifier Given that CellRanger runs a user interface, it is recommended to run Step 1 in a 'screen'. To run Step 1, use the following command: screen -S run_scrnabox bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 1 The resulting output files are deposited into ~/working_directory/step1 Note: If you do not have access to FASTQ files for your experiment, you may intiate the pipeline at which ever Analytical Step takes your data object as input. In the case where FASTQ files are not available, users do not have to create the samples_info folder. For more information see Processed Data . Step 2: Ambient RNA removal and create Seurat object In this step, the ambient RNA rate is estimated and the gene expression profiles are corrected for RNA contamination (optional) using SoupX (Young et al. 2020). Then, CellRanger- or SoupX-generated feature-barcode expression matrices are transformed into Seurat objects. Genes expressed in less than a minimum number of cells and cells expressing less than a minimum number of genes can be filtered. The following parameters are adjustable for Step 2: Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_ambient_RNA Yes Whether or not to correct the feature-barcode expression matrices for ambient RNA contamination par_count_matrices NULL If users skipped Step 1, the may provide the path to a directory that contains existing feature-barcode expression matrices to initiate the pipeline at Step 2 par_min.cells_L 0 Only retain genes expressed in a minimum number of cells par_min.features_L 0 Only retain cells expressing a minimum number of genes To run Step 2, use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 2 The resulting output files are deposited into ~/working_directory/step2 Step 3: Quality control and filtering Low quality cells are filtered based on the user-defined thresholds for: the number of genes detected per cell; the number of unique transcripts detected per cell; the percentage of mitochondrial-encoded transcripts; the percentage of ribosomal-encoded transcripts. In addition, mitochondrial- and ribosomal-encoded genes can be filtered out, as well as a custom user-defined list of genes. Finally, normalization and scaling is performed on the individual Seurat objects prior to cell-cycle scoring. The following parameters are adjustable for Step 3: Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_seurat_object NULL If users skipped Steps 1 and 2, the may provide the path to a directory that contains existing Seurat objects to initiate the pipeline at Step 3 par_nFeature_RNA_L NULL Only retain cells expressing a minimum number of genes par_nFeature_RNA_U NULL Only retain cells expressing a maximum number of genes par_nCount_RNA_L NULL Only retain cells with a minimum number of unique transcripts par_nCount_RNA_U NULL Only retain cells with a maximum number of unique transcripts par_mitochondria_percent_L NULL Only retain cells with a minimum percentage of mitochondrial genes par_mitochondria_percent_U NULL Only retain cells with a maximum percentage of mitochondrial genes par_ribosomal_percent_L NULL Only retain cells with a minimum percentage of ribosomal genes par_ribosomal_percent_U NULL Only retain cells with a maximum percentage of ribosomal genes par_remove_mitochondrial_genes Yes Whether or not to remove mitochondrial genes par_remove_ribosomal_genes Yes Whether or not to remove ribosomal genes par_remove_genes NULL If users want to remove specific genes from their data, they may define a list of gene identifiers par_normalization.method LogNormalize Method to use for normalization par_scale.factor 10000 Scale factor for scaling the data par_selection.method vst Method for choosing the top variable features par_nfeatures 2500 Number of features to select as top variable features par_top 10 Number of most variable features to be reported in the csv file par_npcs_pca 30 Total Number of principal components to compute and store for principal component analysis (PCA) par_cells 500 Number of cells to include in Seurat's dimheatmap function par_dims 12 Number of dimensions to include in Seurat's dimheatmap function par_dims_umap 10 Number of dimensions to use as input features for uniform manifold approximation and projection (UMAP) par_n.neighbors 65 Number of neighboring points to use in local approximations of manifold structure To run Step 3, use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 3 The resulting output files are deposited into ~/working_directory/step3 Step 4: Demultiplexing and doublet removal Seurat\u2019s implementation ( MULTIseqDemux ) of the tag assignment algorithm outlined in Multi-seq is used to demultiplex pooled samples and identify doublets according to the expression matrices of the sample-specific barcodes (McGinnis et al 2019). The following parameters are adjustable for Step 4: Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_normalization.method CLR Method for normalizing the HTO assay par_scale.factor 1000 Scale factor for scaling the HTO assay par_selection.method vst Method for selecting the most variable features in the HTO assay par_nfeatures 5 Number of features to select as top variable features for the HTO assay. This value is dependent on the number of sample specific barcodes used in the experiment par_dims_umap 5 Number of dimensions to use as input features for uniform manifold approximation and projection (UMAP) of HTO assay par_n.neighbor 65 Number of neighboring points to use in local approximations of manifold structure par_dimensionality_reduction Yes Whether or not to perform linear dimensionality reduction on the HTO assay par_npcs_pca 30 Total Number of principal components to compute and store for principal component analysis (PCA) of HTO assay par_dropDN Yes Whether or not to remove predicted doublets and negatives from downstream analyses par_label_dropDN Doublet, Negative Labels used to identify doublet and negative droplets par_quantile 0.9 The quantile to use for droplet classification using MULTIseqDemux par_autoThresh TRUE Whether or not to perform automated threshold finding to define the best quantile for droplet classification using MULTIseqDemux par_maxiter 5 Maximum number of iterations to use if autoThresh = TRUE par_RidgePlot_ncol 3 Number of columns used to display RidgePlots, which visualizes the enrichment of barcode labels across samples par_old_antibody_label NULL If you wish to rename the barcode labels, first list the existing barcode labels in this parameter. old antibody labels can be identified in the \"_old_antibody_label_MULTIseqDemuxHTOcounts\" file produced by running Step 4 msd par_new_antibody_label NULL If you wish to rename the barcode labels, list the new labels corresponding to the old labels listed in the parameter above To perform demultiplexing and doublet detection, the first step is to obtain the barcode labels used in the analysis by running the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 4 \\ --msd T The names of the existing barcode labels can be revised to be more descriptive in the execution parameters of this Step (par_old_antibody_label; par_new_antibody_label) Next, perform demultiplexing and doublet detection by running the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 4 The resulting output files are deposited into ~/working_directory/step4 Step 5: Integration and linear dimensional reduction Individual Seurat objects are integrated to enable the joint analysis across sequencing runs using Seurat's integration algorithm (Stuart et al. 2019); if experiments are limited to a single sequencing run, the integration Step can be bypassed. Normalization, scaling, and linear dimensional reduction is then performed on the resulting Seurat object to inform the optimal parameters for clustering in Step 6. The following parameters are adjustable for Step 5: Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_skip_integration No Whether or not to skip integration. This is applicable for experiments that comprises of only one sequencing run. par_FindIntegrationAnchors_dim 25 Which dimensions to use from the canonical correlation analysis (CCA) to specify the neighbor search space par_DefaultAssay RNA The assay to perform normalization, scaling, and linear dimensiona reduction on. For most use cases this will be RNA. par_normalization.method LogNormalize Method to use for normalization par_scale.factor 1000 Scale factor for scaling the data par_selection.method vst Method for detecting top variable features par_nfeatures 2500 Number of features to select as top variable features par_RunUMAP_n.neighbors 65 Number of neighboring points used in local approximations of manifold structure par_RunPCA_npcs 30 Total Number of principal components to compute and store for principal component analysis (PCA) par_RunUMAP_dims 10 Number of dimensions to use as input features for uniform manifold approximation and projection (UMAP) par_compute_jackstraw No Whether or not to perform JackStraw computation. This computation takes a long time. To run Step 5, use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 5 The resulting output files are deposited into ~/working_directory/step5 Step 6: Clustering Clustering is performed to define groups of cells with similar expression profiles using the graph-based clustering approach implemented in the Seurat framework (Macosko et al. 2015). The following parameters are adjustable for Step 6: Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_skip_step5 No Whether or not the user skipped integration in Step 5 par_FindNeighbors_dims 30 Number of dimensions from linear dimensional reduction used as input to identify neighbours. Can be informed by the elbow and Jackstraw plots produced in Step 5 par_RunUMAP_dims 30 Number of dimensions from linear dimensional reduction used as input to compute UMAP. Can be informed by the elbow and Jackstraw plots produced in Step 5 par_FindNeighbors_k.param 60 Defines k for the k-nearest neighbor algorithm par_FindNeighbors_prune.SNN 1/15 Sets the cutoff for acceptable Jaccard index when computing the neighborhood overlap for the shared nearest-neighbour (SNN) construction par_FindClusters_resolution 0.1 to 0.9, in intervals of 0.1 Value of the clustering resolution parameter. You may provide multiple resolution values par_compute_ARI Yes Whether or not you want to compute the Adjusted Rand Index (ARI) between clusters at a given clustering resolution par_RI_reps 100 Number of iterations for clustering the data at a given resolution in order to calculate the ARI To run Step 6, use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 6 The resulting output files are deposited into ~/working_directory/step6 Step 7: Cluster annotation Cell populations, or clusters, are annotated to define cell types by three distinct methods:: Method 1. Cluster marker gene set enrichment analysis (GSEA) : Seurat's FindAllMarkers function is used to identify differentially expressed marker genes (DEG) by the Wilcoxon rank-sum test (Macosko et al. 2015). DEGs in the positive direction (Log2 fold-change > 0.00) are then tested for enrichment across user-defined gene set libraries that define cell types using the EnrichR tool (Chen et al. 2013). Method 2. Module score : Seurat\u2019s implementation ( AddModuleScore ) of Tirosh et al.\u2019s algorithm is used to comparatively quantify the expression of gene sets across clusters at the single-cell level (Tirosh et al. 2016). Users must define their desired gene sets in the parameters file of Step 7. Gene sets should be defined in a csv file, where the column names correspond to the arbitrary name of the gene set and the corresponding rows define the genes in the gene set. For example: gene_set_1 gene_set_2 gene_set_3 CLDN5 IFITM3 TM4SF1 ANGPT2 EGFL7 IGFBP FLT1 A2M GIMAP7 DEPP1 SOD2 EMP2 TMSB10 PODXL B2M HLA-E VWF BST2 SLCO4A1 PECAM1 BSG TGM2 SLC2A3 PARP14 IFI27 TSC22D1 NFKBIA MT2A HLA-B ID3 EPAS1 IFITM2 Method 3. Reference-based annotation : Seurat's FindTransferAnchors and TransferData functions are used to leverage cell-type annotations from a reference Seurat object and generate annotation predictions for the query dataset (Macosko et al. 2015). User's must define the location of their referene Seurat object in the parameters file of Step 7. In addition to the three annotation methods, scRNAbox allows users to visualize the expression of select features at the cluster or cell level via a user-provided list of gene identifiers in order to further inform the cellular species that make up specific clusters. The following parameters are adjustable for Step 7: Parameter Default Description (the cluster annotation method associated with the parameter is shown) par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_level_cluster integrated_snn_res.0.7 The cluster resolution that you want to use for downstream analyses. If you skipped integration in Step 5, use par_level_cluster='RNA_snn_res.0.7', if you want to proceed with a clustering resolution of 0.7 par_level_genotype MULTI_ID_Lables Name of the metadata column in your Seurat object that describes the sample names par_top_sel 5 Method 1: Number of top markers to identify based on avg_log2FC par_db Descartes_Cell_Types_and_Tissue_2021, CellMarker_Augmented_2021, Azimuth_Cell_Types_2021 Method 1: Character vector of EnrichR databases that define cell types. The top marker genes for each cluster will be tested for enrichment across these databases. par_compute_module_score Yes Method 2: Whether or not to perform the module score computation par_compute_module_score Yes Method 2: Whether or not to perform the module score computation par_module_score NULL Method 2: Path defining the location of the directory that contains the csv file of the gene sets used to compute the module score par_reference NULL Method 3: Path defining the location of the reference Seurat object par_level_celltype NULL Method 3: The name of the metadata column in the reference Seurat object that defines cell types par_FindTransferAnchors_dim 10 Method 3: Number of dimensions from linear dimensional reduction used to find transfer anchors between the reference and query Seurat objects par_futureglobalsmaxSize 50000 * 1024^2 Method 3: This will increase your RAM usage so set this number mindfully par_visualize_select_features No Visualize select features: Whether or not to visualize select features par_select_features NULL Visualize select features: list of gene identifiers to visualize the expression of select features To identify cluster marker genes ( Method 1 ), compute the module score for user-defined gene sets ( Method 2 ), and visualize select features , use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --marker T Then, to test the top cluster marker genes for enrichment across gene set libraries that define cell types ( Method 1 ), use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --enrich T Note: In order to test the cluster marker genes for enrichment across EnrichR libraries, the HPC must have access to the internet. If your HPC cannot access the internet, it is possible to run the enrichment step on your local machine directly in R. To do so, begin by downloading the Step 6 Seurat RDS object ( ~/working_directory/step6/objs6/seu_step6.rds ) and cluster marker RDS object ( ~/working_directory/step7/info7/marker/ClusterMarkers.rds ) to your computer using the following commands: scp username@beluga.computecanada.ca:~/working_directory/step7/info7/marker/ClusterMarkers.rds ~/Desktop/working_directory scp username@beluga.computecanada.ca:~/working_directory/step6/objs6/seu_step6.rds ~/Desktop/working_directory Then run the follwing code in R: SCRNABOX_PWD <- \"~/Desktop/working_directory\" dir.create(\"SCRNABOX_PWD/step7/annot\") level_cluster='integrated_snn_res.0.7' ClusterMarkers='SCRNABOX_PWD/step7/info7/ClusterMarkers.rds' PWD='SCRNABOX_PWD/step7/annot/' PSUE='SCRNABOX_PWD/step6/objs6/seu_step6.rds' top_sel=5 db <- c('Descartes_Cell_Types_and_Tissue_2021','CellMarker_Augmented_2021','Azimuth_Cell_Types_2021') scrnaboxR::annotation(level_cluster,ClusterMarkers,PWD,PSUE,top_sel,db) To perform reference-based annotation ( Method 3 ), run the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --fta T The resulting output files are deposited into ~/working_directory/step7 . Step 8: Differential gene expression contrasts This step performs differential gene expression (DGE) analyses according to user-defined contrasts. Contrast can be performed between samples (e.g. case vs control; sample-sample contrasts ) or between samples, stratified by cell type (e.g. case vs control for excitatory neurons only; sample-cell contrasts ). The following parameters are adjustable for Step 8: Parameter Default Description (the cluster annotation method associated with the parameter is shown) par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_level_cluster integrated_snn_res.0.7 The cluster resolution that you used in the cluster annotation module. If you skipped integration in Step 5, use par_level_cluster='RNA_snn_res.0.7', if you want to proceed with a clustering resolution of 0.7 par_step8_clus_label NULL List of user-currated cluster labels obtained from the annotation module. Make sure to have the same number of labels as clusters at the desired clustering resolution. par_new_genotype yes Whether or not you want to add new sample labels to simplify the contrasts. For example, you may wish to set both control1 and control2 as control. par_old_antibody_label NULL list of old sample labels (i.e. those used to create the samples_info folder in the setup procedures) par_new_antibody_label NULL list of new sample labels corresponding to the old sample labels defined in the parameter above The first step of the DGE contrasts module is to create a DGEListobject. This step may require alot of RAM, we suggest 3*size(seu_int_clu.rds). Users can adjust the RAM in the scrnabox_config.ini file located in ~/working_directory/job_info/configs . To create a DGEListobject, run the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --dgelist T The next step is to perform DGE contrasts. As mentioned, useers can perform sample-sample contrasts or sample-cell contrasts To perform sample-sample contrasts , users must first modify the step8_contrast_genotype.txt contrast matrix located in ~/working_directory/job_info/parameters . The contrast matrix comprises three columns that define the arbitrary name of the contrast (cont_name), the control sample (control), and the case sample (versus). For example: cont_name control versus design1 control case1,case2,case3,case4,case5 design2 control case1 design3 control case2 design4 control case3 design5 control case4 design6 control case5 design7 control case1,case2,case3,case4 design8 control case1,case2,case3 design9 control case1,case2 To perform sample-sample contrasts , run the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --genotype T To perform sample-cell contrasts , users must first modify the step8_contrast_celltype.txt contrast matrix located in ~/working_directory/job_info/parameters . The contrast matrix comprises four columns that define the arbitrary name of the contrast (cont_name), the cell type (cell), the control sample (control), and the case sample (versus). For example: cont_name cell control versus design1 excitatory_neuron control case1,case2,case3,case4,case5 design2 excitatory_neuron control case1 design3 excitatory_neuron control case2 design4 excitatory_neuron control case3 design5 excitatory_neuron control case4 design6 excitatory_neuron control case5 design7 excitatory_neuron control case1,case2,case3,case4 design8 excitatory_neuron control case1,case2,case3 design9 excitatory_neuron control case1,case2 To perform sample-cell contrasts , run the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --celltype T The resulting output files are deposited into ~/working_directory/step8 . Note: If you have a large number of contrasts to run, it may be more efficient to split them up and submit batch jobs instead.","title":"- Cell Hashtag Analysis Track"},{"location":"HTO/#scrnabox-pipeline-cell-hashtag-scrnaseq-analysis-track","text":"","title":"ScRNAbox pipeline: Cell Hashtag scRNAseq Analysis Track"},{"location":"HTO/#contents","text":"Introduction Setup Step 1: FASTQ pre-processing Step 2: Create Seurat object Step 3: Quality control and filtering Step 4: Demultiplexing and doublet removal Step 5: Integration and linear dimensional reduction Step 6: Clustering step 7: Cluster annotation step 8: Differential gene expression contrasts","title":"Contents"},{"location":"HTO/#introduction","text":"This guide provides an overview of the Analytical Steps that comprise the Cell Hashtag Analysis Track of the scRNAbox pipeline. The Cell Hashtag Analysis Track is designed for multiplexed scRNAseq experiments, whereby samples are tagged with sample-specific barcodes, pooled, and sequenced together; thus, users should have FASTQ files that contain scRNAseq data from multiple samples. If instead samples were sequenced separately, users should leverage the Standard scRNAseq Analysis Track. The Analytical Steps involved in the Cell Hashtag Analysis Track of the scRNAbox pipeline are outlined in the figure below. Note: This tutorial assumes that scrnabox.slurm , cellranger , R , and the required R packages have already been installed onto the HPC system. If this is not the case, please visit Installation to do so before proceeding. If the required packages are installed, you can proceed to Setup .","title":"Introduction"},{"location":"HTO/#setup","text":"Before running the pipeline, create a dedicated folder for the analysis (hereafter referred to as the working directory). Then, define the path of the working directory and the path to scrnabox.slurm : mkdir ~/working_directory cd ~/working_directory export SCRNABOX_HOME=~/scrnabox.slurm export SCRNABOX_PWD=~/working_directory Next, run the pipeline initiation Step ( --steps 0 ) and define the Standard scRNAseq Analysis Track ( --method HTO ) using the following command from the working directory: cd ~/working_directory bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 0 \\ --method HTO After running the pipeline initiation Step, the structure of the working directory should be as follows: working_directory \u2514\u2500\u2500 job_info \u251c\u2500\u2500 configs \u251c\u2500\u2500 logs \u2514\u2500\u2500 parameters The configs/ directory contains the scrnabox_config.ini file which allows users to specify their job allocations (memory, threads, and walltime) for each Analytical Step using the Slurm Workload Manager; The logs/ directory records the events of each Analytical Step; The parameters/ directory contains adjustable, Step-specific text files which allow users to define the execution parameters for each Analytical Step. Next, navigate to the scrnabox_config.ini file in ~/working_directory/job_info/configs to define the path to the R library, the version of R, and the path to CellRanger. For example: MODULECELLRANGER=mugqic/cellranger/5.0.1 R_VERSION=4.2.1 R_LIB_PATH=Path/to/R/library Upon completing the setup procedures, users can run their analysis using the scRNAbox pipeline.","title":"Setup"},{"location":"HTO/#scrnabox-analytical-steps","text":"Specific Analytical Steps are called using the --steps flag. The output of each Analytical Step is deposited into its respective folder within the working directory (e.g. ~/working_directory/step1 ). Prior to running each Analytical Step, users are strongly encouraged to modify the execution parameters of the analysis using the adjustable, Step-specific parameters text files. The parameters text files are located in ~/working_directory/job_info/ . To ensure replicability, a summary report file documents the execution parameters for each iteration of each Analytical Step, which is located in ~/working_directory/job_info/summary_report.txt . For detailed descriptions of each Analytical Step please see our pre-print manuscript.","title":"scRNAbox Analytical Steps"},{"location":"HTO/#step-1-fastq-pre-processing","text":"In this step, feature-barcode expression matrices are generated from FASTQ files using the CellRanger counts pipeline. Prior to running CellRanger, library.csv files must be prepared to define the FASTQ files for each sample. ScRNAbox provides an option for automating this process or users may manually prepare the libraries. For more information, please see the the Library preparation tutorial. The following parameters are adjustable for Step 1: Parameter Default Description REF_DIR_GRCH NULL Path to reference genome for FASTQ alignment. 10X Genomics reference genomes are available for download. For more information see their documentation . R1LENGTH NULL Minimum number of bases to retain for R1 sequence of gene expression MEMPERCORE 30 For clusters whose job managers do not support memory requests, it is possible to request memory in the form of cores. This option will scale up the number of threads requested via the MRO_THREADS variable according to how much memory a stage requires when given to the ratio of memory on your nodes. par_automated_library_prep No Whether or not to perform automated library prep. Alternatively, you may set this parameter to \"no\" and manually prepare the libraries. par_fastq_directory NULL Path to directory containing the FASTQ files. This directory should only contain FASTQ files for the experiment. par_RNA_run_names NULL The names of the sequencing runs for the RNA assay par_HTO_run_names NULL The names of the sequencing runs for the HTO assay par_seq_run_names NULL The user-selected name for the sequencing run. These names will be used to identify cells in the Seurat objects par_paired_end_seq Yes Whether or not paired-end sequencing was performed id NULL Barcode ID which will be used to track the feature counts name NULL The user-selected name for the barcode identifier read R2 Which RNA sequencing read contains the barcode sequence. This value Will be either R1 or R2. pattern NULL The pattern of the barcode identifiers sequence NULL The nucleotide sequence associated with the barcode identifier Given that CellRanger runs a user interface, it is recommended to run Step 1 in a 'screen'. To run Step 1, use the following command: screen -S run_scrnabox bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 1 The resulting output files are deposited into ~/working_directory/step1 Note: If you do not have access to FASTQ files for your experiment, you may intiate the pipeline at which ever Analytical Step takes your data object as input. In the case where FASTQ files are not available, users do not have to create the samples_info folder. For more information see Processed Data .","title":"Step 1: FASTQ pre-processing"},{"location":"HTO/#step-2-ambient-rna-removal-and-create-seurat-object","text":"In this step, the ambient RNA rate is estimated and the gene expression profiles are corrected for RNA contamination (optional) using SoupX (Young et al. 2020). Then, CellRanger- or SoupX-generated feature-barcode expression matrices are transformed into Seurat objects. Genes expressed in less than a minimum number of cells and cells expressing less than a minimum number of genes can be filtered. The following parameters are adjustable for Step 2: Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_ambient_RNA Yes Whether or not to correct the feature-barcode expression matrices for ambient RNA contamination par_count_matrices NULL If users skipped Step 1, the may provide the path to a directory that contains existing feature-barcode expression matrices to initiate the pipeline at Step 2 par_min.cells_L 0 Only retain genes expressed in a minimum number of cells par_min.features_L 0 Only retain cells expressing a minimum number of genes To run Step 2, use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 2 The resulting output files are deposited into ~/working_directory/step2","title":"Step 2: Ambient RNA removal and create Seurat object"},{"location":"HTO/#step-3-quality-control-and-filtering","text":"Low quality cells are filtered based on the user-defined thresholds for: the number of genes detected per cell; the number of unique transcripts detected per cell; the percentage of mitochondrial-encoded transcripts; the percentage of ribosomal-encoded transcripts. In addition, mitochondrial- and ribosomal-encoded genes can be filtered out, as well as a custom user-defined list of genes. Finally, normalization and scaling is performed on the individual Seurat objects prior to cell-cycle scoring. The following parameters are adjustable for Step 3: Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_seurat_object NULL If users skipped Steps 1 and 2, the may provide the path to a directory that contains existing Seurat objects to initiate the pipeline at Step 3 par_nFeature_RNA_L NULL Only retain cells expressing a minimum number of genes par_nFeature_RNA_U NULL Only retain cells expressing a maximum number of genes par_nCount_RNA_L NULL Only retain cells with a minimum number of unique transcripts par_nCount_RNA_U NULL Only retain cells with a maximum number of unique transcripts par_mitochondria_percent_L NULL Only retain cells with a minimum percentage of mitochondrial genes par_mitochondria_percent_U NULL Only retain cells with a maximum percentage of mitochondrial genes par_ribosomal_percent_L NULL Only retain cells with a minimum percentage of ribosomal genes par_ribosomal_percent_U NULL Only retain cells with a maximum percentage of ribosomal genes par_remove_mitochondrial_genes Yes Whether or not to remove mitochondrial genes par_remove_ribosomal_genes Yes Whether or not to remove ribosomal genes par_remove_genes NULL If users want to remove specific genes from their data, they may define a list of gene identifiers par_normalization.method LogNormalize Method to use for normalization par_scale.factor 10000 Scale factor for scaling the data par_selection.method vst Method for choosing the top variable features par_nfeatures 2500 Number of features to select as top variable features par_top 10 Number of most variable features to be reported in the csv file par_npcs_pca 30 Total Number of principal components to compute and store for principal component analysis (PCA) par_cells 500 Number of cells to include in Seurat's dimheatmap function par_dims 12 Number of dimensions to include in Seurat's dimheatmap function par_dims_umap 10 Number of dimensions to use as input features for uniform manifold approximation and projection (UMAP) par_n.neighbors 65 Number of neighboring points to use in local approximations of manifold structure To run Step 3, use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 3 The resulting output files are deposited into ~/working_directory/step3","title":"Step 3: Quality control and filtering"},{"location":"HTO/#step-4-demultiplexing-and-doublet-removal","text":"Seurat\u2019s implementation ( MULTIseqDemux ) of the tag assignment algorithm outlined in Multi-seq is used to demultiplex pooled samples and identify doublets according to the expression matrices of the sample-specific barcodes (McGinnis et al 2019). The following parameters are adjustable for Step 4: Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_normalization.method CLR Method for normalizing the HTO assay par_scale.factor 1000 Scale factor for scaling the HTO assay par_selection.method vst Method for selecting the most variable features in the HTO assay par_nfeatures 5 Number of features to select as top variable features for the HTO assay. This value is dependent on the number of sample specific barcodes used in the experiment par_dims_umap 5 Number of dimensions to use as input features for uniform manifold approximation and projection (UMAP) of HTO assay par_n.neighbor 65 Number of neighboring points to use in local approximations of manifold structure par_dimensionality_reduction Yes Whether or not to perform linear dimensionality reduction on the HTO assay par_npcs_pca 30 Total Number of principal components to compute and store for principal component analysis (PCA) of HTO assay par_dropDN Yes Whether or not to remove predicted doublets and negatives from downstream analyses par_label_dropDN Doublet, Negative Labels used to identify doublet and negative droplets par_quantile 0.9 The quantile to use for droplet classification using MULTIseqDemux par_autoThresh TRUE Whether or not to perform automated threshold finding to define the best quantile for droplet classification using MULTIseqDemux par_maxiter 5 Maximum number of iterations to use if autoThresh = TRUE par_RidgePlot_ncol 3 Number of columns used to display RidgePlots, which visualizes the enrichment of barcode labels across samples par_old_antibody_label NULL If you wish to rename the barcode labels, first list the existing barcode labels in this parameter. old antibody labels can be identified in the \"_old_antibody_label_MULTIseqDemuxHTOcounts\" file produced by running Step 4 msd par_new_antibody_label NULL If you wish to rename the barcode labels, list the new labels corresponding to the old labels listed in the parameter above To perform demultiplexing and doublet detection, the first step is to obtain the barcode labels used in the analysis by running the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 4 \\ --msd T The names of the existing barcode labels can be revised to be more descriptive in the execution parameters of this Step (par_old_antibody_label; par_new_antibody_label) Next, perform demultiplexing and doublet detection by running the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 4 The resulting output files are deposited into ~/working_directory/step4","title":"Step 4: Demultiplexing and doublet removal"},{"location":"HTO/#step-5-integration-and-linear-dimensional-reduction","text":"Individual Seurat objects are integrated to enable the joint analysis across sequencing runs using Seurat's integration algorithm (Stuart et al. 2019); if experiments are limited to a single sequencing run, the integration Step can be bypassed. Normalization, scaling, and linear dimensional reduction is then performed on the resulting Seurat object to inform the optimal parameters for clustering in Step 6. The following parameters are adjustable for Step 5: Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_skip_integration No Whether or not to skip integration. This is applicable for experiments that comprises of only one sequencing run. par_FindIntegrationAnchors_dim 25 Which dimensions to use from the canonical correlation analysis (CCA) to specify the neighbor search space par_DefaultAssay RNA The assay to perform normalization, scaling, and linear dimensiona reduction on. For most use cases this will be RNA. par_normalization.method LogNormalize Method to use for normalization par_scale.factor 1000 Scale factor for scaling the data par_selection.method vst Method for detecting top variable features par_nfeatures 2500 Number of features to select as top variable features par_RunUMAP_n.neighbors 65 Number of neighboring points used in local approximations of manifold structure par_RunPCA_npcs 30 Total Number of principal components to compute and store for principal component analysis (PCA) par_RunUMAP_dims 10 Number of dimensions to use as input features for uniform manifold approximation and projection (UMAP) par_compute_jackstraw No Whether or not to perform JackStraw computation. This computation takes a long time. To run Step 5, use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 5 The resulting output files are deposited into ~/working_directory/step5","title":"Step 5: Integration and linear dimensional reduction"},{"location":"HTO/#step-6-clustering","text":"Clustering is performed to define groups of cells with similar expression profiles using the graph-based clustering approach implemented in the Seurat framework (Macosko et al. 2015). The following parameters are adjustable for Step 6: Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_skip_step5 No Whether or not the user skipped integration in Step 5 par_FindNeighbors_dims 30 Number of dimensions from linear dimensional reduction used as input to identify neighbours. Can be informed by the elbow and Jackstraw plots produced in Step 5 par_RunUMAP_dims 30 Number of dimensions from linear dimensional reduction used as input to compute UMAP. Can be informed by the elbow and Jackstraw plots produced in Step 5 par_FindNeighbors_k.param 60 Defines k for the k-nearest neighbor algorithm par_FindNeighbors_prune.SNN 1/15 Sets the cutoff for acceptable Jaccard index when computing the neighborhood overlap for the shared nearest-neighbour (SNN) construction par_FindClusters_resolution 0.1 to 0.9, in intervals of 0.1 Value of the clustering resolution parameter. You may provide multiple resolution values par_compute_ARI Yes Whether or not you want to compute the Adjusted Rand Index (ARI) between clusters at a given clustering resolution par_RI_reps 100 Number of iterations for clustering the data at a given resolution in order to calculate the ARI To run Step 6, use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 6 The resulting output files are deposited into ~/working_directory/step6","title":"Step 6: Clustering"},{"location":"HTO/#step-7-cluster-annotation","text":"Cell populations, or clusters, are annotated to define cell types by three distinct methods:: Method 1. Cluster marker gene set enrichment analysis (GSEA) : Seurat's FindAllMarkers function is used to identify differentially expressed marker genes (DEG) by the Wilcoxon rank-sum test (Macosko et al. 2015). DEGs in the positive direction (Log2 fold-change > 0.00) are then tested for enrichment across user-defined gene set libraries that define cell types using the EnrichR tool (Chen et al. 2013). Method 2. Module score : Seurat\u2019s implementation ( AddModuleScore ) of Tirosh et al.\u2019s algorithm is used to comparatively quantify the expression of gene sets across clusters at the single-cell level (Tirosh et al. 2016). Users must define their desired gene sets in the parameters file of Step 7. Gene sets should be defined in a csv file, where the column names correspond to the arbitrary name of the gene set and the corresponding rows define the genes in the gene set. For example: gene_set_1 gene_set_2 gene_set_3 CLDN5 IFITM3 TM4SF1 ANGPT2 EGFL7 IGFBP FLT1 A2M GIMAP7 DEPP1 SOD2 EMP2 TMSB10 PODXL B2M HLA-E VWF BST2 SLCO4A1 PECAM1 BSG TGM2 SLC2A3 PARP14 IFI27 TSC22D1 NFKBIA MT2A HLA-B ID3 EPAS1 IFITM2 Method 3. Reference-based annotation : Seurat's FindTransferAnchors and TransferData functions are used to leverage cell-type annotations from a reference Seurat object and generate annotation predictions for the query dataset (Macosko et al. 2015). User's must define the location of their referene Seurat object in the parameters file of Step 7. In addition to the three annotation methods, scRNAbox allows users to visualize the expression of select features at the cluster or cell level via a user-provided list of gene identifiers in order to further inform the cellular species that make up specific clusters. The following parameters are adjustable for Step 7: Parameter Default Description (the cluster annotation method associated with the parameter is shown) par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_level_cluster integrated_snn_res.0.7 The cluster resolution that you want to use for downstream analyses. If you skipped integration in Step 5, use par_level_cluster='RNA_snn_res.0.7', if you want to proceed with a clustering resolution of 0.7 par_level_genotype MULTI_ID_Lables Name of the metadata column in your Seurat object that describes the sample names par_top_sel 5 Method 1: Number of top markers to identify based on avg_log2FC par_db Descartes_Cell_Types_and_Tissue_2021, CellMarker_Augmented_2021, Azimuth_Cell_Types_2021 Method 1: Character vector of EnrichR databases that define cell types. The top marker genes for each cluster will be tested for enrichment across these databases. par_compute_module_score Yes Method 2: Whether or not to perform the module score computation par_compute_module_score Yes Method 2: Whether or not to perform the module score computation par_module_score NULL Method 2: Path defining the location of the directory that contains the csv file of the gene sets used to compute the module score par_reference NULL Method 3: Path defining the location of the reference Seurat object par_level_celltype NULL Method 3: The name of the metadata column in the reference Seurat object that defines cell types par_FindTransferAnchors_dim 10 Method 3: Number of dimensions from linear dimensional reduction used to find transfer anchors between the reference and query Seurat objects par_futureglobalsmaxSize 50000 * 1024^2 Method 3: This will increase your RAM usage so set this number mindfully par_visualize_select_features No Visualize select features: Whether or not to visualize select features par_select_features NULL Visualize select features: list of gene identifiers to visualize the expression of select features To identify cluster marker genes ( Method 1 ), compute the module score for user-defined gene sets ( Method 2 ), and visualize select features , use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --marker T Then, to test the top cluster marker genes for enrichment across gene set libraries that define cell types ( Method 1 ), use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --enrich T Note: In order to test the cluster marker genes for enrichment across EnrichR libraries, the HPC must have access to the internet. If your HPC cannot access the internet, it is possible to run the enrichment step on your local machine directly in R. To do so, begin by downloading the Step 6 Seurat RDS object ( ~/working_directory/step6/objs6/seu_step6.rds ) and cluster marker RDS object ( ~/working_directory/step7/info7/marker/ClusterMarkers.rds ) to your computer using the following commands: scp username@beluga.computecanada.ca:~/working_directory/step7/info7/marker/ClusterMarkers.rds ~/Desktop/working_directory scp username@beluga.computecanada.ca:~/working_directory/step6/objs6/seu_step6.rds ~/Desktop/working_directory Then run the follwing code in R: SCRNABOX_PWD <- \"~/Desktop/working_directory\" dir.create(\"SCRNABOX_PWD/step7/annot\") level_cluster='integrated_snn_res.0.7' ClusterMarkers='SCRNABOX_PWD/step7/info7/ClusterMarkers.rds' PWD='SCRNABOX_PWD/step7/annot/' PSUE='SCRNABOX_PWD/step6/objs6/seu_step6.rds' top_sel=5 db <- c('Descartes_Cell_Types_and_Tissue_2021','CellMarker_Augmented_2021','Azimuth_Cell_Types_2021') scrnaboxR::annotation(level_cluster,ClusterMarkers,PWD,PSUE,top_sel,db) To perform reference-based annotation ( Method 3 ), run the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --fta T The resulting output files are deposited into ~/working_directory/step7 .","title":"Step 7: Cluster annotation"},{"location":"HTO/#step-8-differential-gene-expression-contrasts","text":"This step performs differential gene expression (DGE) analyses according to user-defined contrasts. Contrast can be performed between samples (e.g. case vs control; sample-sample contrasts ) or between samples, stratified by cell type (e.g. case vs control for excitatory neurons only; sample-cell contrasts ). The following parameters are adjustable for Step 8: Parameter Default Description (the cluster annotation method associated with the parameter is shown) par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_level_cluster integrated_snn_res.0.7 The cluster resolution that you used in the cluster annotation module. If you skipped integration in Step 5, use par_level_cluster='RNA_snn_res.0.7', if you want to proceed with a clustering resolution of 0.7 par_step8_clus_label NULL List of user-currated cluster labels obtained from the annotation module. Make sure to have the same number of labels as clusters at the desired clustering resolution. par_new_genotype yes Whether or not you want to add new sample labels to simplify the contrasts. For example, you may wish to set both control1 and control2 as control. par_old_antibody_label NULL list of old sample labels (i.e. those used to create the samples_info folder in the setup procedures) par_new_antibody_label NULL list of new sample labels corresponding to the old sample labels defined in the parameter above The first step of the DGE contrasts module is to create a DGEListobject. This step may require alot of RAM, we suggest 3*size(seu_int_clu.rds). Users can adjust the RAM in the scrnabox_config.ini file located in ~/working_directory/job_info/configs . To create a DGEListobject, run the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --dgelist T The next step is to perform DGE contrasts. As mentioned, useers can perform sample-sample contrasts or sample-cell contrasts To perform sample-sample contrasts , users must first modify the step8_contrast_genotype.txt contrast matrix located in ~/working_directory/job_info/parameters . The contrast matrix comprises three columns that define the arbitrary name of the contrast (cont_name), the control sample (control), and the case sample (versus). For example: cont_name control versus design1 control case1,case2,case3,case4,case5 design2 control case1 design3 control case2 design4 control case3 design5 control case4 design6 control case5 design7 control case1,case2,case3,case4 design8 control case1,case2,case3 design9 control case1,case2 To perform sample-sample contrasts , run the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --genotype T To perform sample-cell contrasts , users must first modify the step8_contrast_celltype.txt contrast matrix located in ~/working_directory/job_info/parameters . The contrast matrix comprises four columns that define the arbitrary name of the contrast (cont_name), the cell type (cell), the control sample (control), and the case sample (versus). For example: cont_name cell control versus design1 excitatory_neuron control case1,case2,case3,case4,case5 design2 excitatory_neuron control case1 design3 excitatory_neuron control case2 design4 excitatory_neuron control case3 design5 excitatory_neuron control case4 design6 excitatory_neuron control case5 design7 excitatory_neuron control case1,case2,case3,case4 design8 excitatory_neuron control case1,case2,case3 design9 excitatory_neuron control case1,case2 To perform sample-cell contrasts , run the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --celltype T The resulting output files are deposited into ~/working_directory/step8 . Note: If you have a large number of contrasts to run, it may be more efficient to split them up and submit batch jobs instead.","title":"Step 8: Differential gene expression contrasts"},{"location":"LICENSE/","text":"License MIT License Copyright (c) 2022 The Neuro Bioinformatics Core Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"- License"},{"location":"LICENSE/#license","text":"MIT License Copyright (c) 2022 The Neuro Bioinformatics Core Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"PROC/","text":"ScRNA pipline Contents Introduction From step 2 From step 3 From step 4 From Step 5: integration From Step 6: Clustering Introduction This guide provides a concise introduction to analyzing data using the Scrnabox pipeline. The scrnabox.slurm pipeline is primarily designed to initiate Step 1, which involves running cellranger on fastq data. However, it can also be utilized with processed data, where some of the steps have already been completed. The following section explains how to use the pipeline for analyzing processed data. To begin, you need to set up the pipeline for analysis and determine the starting step based on your requirements. From Step 2 If the cellranger is already run the raw data, copy the results under ${SCRNABOX_PWD}/step1 , then follow the step2 to analyze data bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 2 From step 3 If the seurat objects are available and you want to run QC and filter cell ; save the seurate objects under ${SCRNABOX_PWD}/step2/objs and run the following codes, bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 3 \\ --nFeature_RNA_L 1000 \\ --nCount_RNA_U 65000 \\ --mitochondria_percent_U 25 From step 4 If the QC and filtering is already done, you can save under ${SCRNABOX_PWD}/step3/objs and run the following codes to get the hashtag labels by running the following code bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 4 \\ --msd T Add the old label and its new corresponding label in '${SCRNABOX_PWD}/job_output/parameters/step4_par.txt'. Run the following to run the demuplixing bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 4 From Step 5: Integration If you want to integrate the surate objects, just save them in ${SCRNABOX_PWD}/step4/objs and follow Srep 5 bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 5 From Step 6: Clustering In this step, you need to have just one seurat object which should be save in ${SCRNABOX_PWD}/step5/objs bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 6","title":"- Processed Data"},{"location":"PROC/#scrna-pipline","text":"","title":"ScRNA  pipline"},{"location":"PROC/#contents","text":"Introduction From step 2 From step 3 From step 4 From Step 5: integration From Step 6: Clustering","title":"Contents"},{"location":"PROC/#introduction","text":"This guide provides a concise introduction to analyzing data using the Scrnabox pipeline. The scrnabox.slurm pipeline is primarily designed to initiate Step 1, which involves running cellranger on fastq data. However, it can also be utilized with processed data, where some of the steps have already been completed. The following section explains how to use the pipeline for analyzing processed data. To begin, you need to set up the pipeline for analysis and determine the starting step based on your requirements.","title":"Introduction"},{"location":"PROC/#from-step-2","text":"If the cellranger is already run the raw data, copy the results under ${SCRNABOX_PWD}/step1 , then follow the step2 to analyze data bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 2","title":"From Step 2"},{"location":"PROC/#from-step-3","text":"If the seurat objects are available and you want to run QC and filter cell ; save the seurate objects under ${SCRNABOX_PWD}/step2/objs and run the following codes, bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 3 \\ --nFeature_RNA_L 1000 \\ --nCount_RNA_U 65000 \\ --mitochondria_percent_U 25","title":"From step 3"},{"location":"PROC/#from-step-4","text":"If the QC and filtering is already done, you can save under ${SCRNABOX_PWD}/step3/objs and run the following codes to get the hashtag labels by running the following code bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 4 \\ --msd T Add the old label and its new corresponding label in '${SCRNABOX_PWD}/job_output/parameters/step4_par.txt'. Run the following to run the demuplixing bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 4","title":"From step 4"},{"location":"PROC/#from-step-5-integration","text":"If you want to integrate the surate objects, just save them in ${SCRNABOX_PWD}/step4/objs and follow Srep 5 bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 5","title":"From Step 5: Integration"},{"location":"PROC/#from-step-6-clustering","text":"In this step, you need to have just one seurat object which should be save in ${SCRNABOX_PWD}/step5/objs bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 6","title":"From Step 6: Clustering"},{"location":"SCRNA/","text":"ScRNAbox pipeline: Standard scRNAseq Analysis Track Contents Introduction Setup Step 1: FASTQ pre-processing Step 2: Ambient RNA removal and create Seurat object Step 3: Quality control and filtering Step 4: Doublet removal Step 5: Integration and linear dimensional reduction Step 6: Clustering step 7: Cluster annotation step 8: Differential gene expression contrasts Introduction This guide provides an overview of the Analytical Steps that comprise the Standard Analysis Track of the scRNAbox pipeline. The Standard Analysis Track is designed for scRNAseq experiments where each sample is captured and sequenced separately; thus, users should have unique FASTQ files for each of the samples in their experiment. If instead samples were labelled with sample-specific barcodes and pooled prior to sequencing, users should leverage the Cell Hashtag scRNAseq Analysis Track. The Analytical Steps involved in the Standard Analysis Track of the scRNAbox pipeline are outlined in the figure below. Note: This tutorial assumes that scrnabox.slurm , CellRanger , R , and the required R packages have already been installed onto the HPC system. If this is not the case, please visit Installation to do so before proceeding. If the required packages are installed, you can proceed to Setup . Setup Before running the pipeline, create a dedicated folder for the analysis (hereafter referred to as the working directory). Then, export the path to the working directory and the path to scrnabox.slurm : mkdir ~/working_directory cd ~/working_directory export SCRNABOX_HOME=~/scrnabox.slurm export SCRNABOX_PWD=~/working_directory Next, run the pipeline initiation Step ( --steps 0 ) and define the Standard scRNAseq Analysis Track ( --method SCRNA ) using the following command from the working directory: cd ~/working_directory bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 0 \\ --method SCRNA After running the pipeline initiation Step, the structure of the working directory should be as follows: working_directory \u2514\u2500\u2500 job_info \u251c\u2500\u2500 configs \u251c\u2500\u2500 logs \u2514\u2500\u2500 parameters The configs/ directory contains the scrnabox_config.ini file which allows users to specify their job allocations (memory, threads, and walltime) for each Analytical Step using the Slurm Workload Manager; The logs/ directory records the events of each Analytical Step; The parameters/ directory contains adjustable, Step-specific text files which allow users to define the execution parameters for each Analytical Step. Next, navigate to the scrnabox_config.ini file in ~/working_directory/job_info/configs to define the path to the R library, the version of R, and the path to CellRanger. For example: MODULECELLRANGER=mugqic/cellranger/5.0.1 R_VERSION=4.2.1 R_LIB_PATH=Path/to/R/library Upon completing the setup procedures, users can run their analysis using the scRNAbox pipeline. scRNAbox Analytical Steps Specific Analytical Steps are called using the --steps flag. The output of each Analytical Step is deposited into its respective folder within the working directory (e.g. ~/working_directory/step1 ). Prior to running each Analytical Step, users are strongly encouraged to modify the execution parameters of the analysis using the adjustable, Step-specific parameters text files. The parameters text files are located in ~/working_directory/job_info/parameters . To ensure replicability, a summary report file documents the execution parameters for each iteration of each Analytical Step, which is located in ~/working_directory/job_info/summary_report.txt . For detailed descriptions of each Analytical Step please see our pre-print manuscript. Step 1: FASTQ pre-processing In this step, feature-barcode expression matrices are generated from FASTQ files using the CellRanger counts pipeline. Prior to running CellRanger, library.csv files must be prepared to define the FASTQ files for each sample. ScRNAbox provides an option for automating this process or users may manually prepare the libraries. For more information, please see the the Library preparation tutorial. The following parameters are adjustable for Step 1: Parameter Default Description REF_DIR_GRCH NULL Path to reference genome for FASTQ alignment. 10X Genomics reference genomes are available for download. For more information see their documentation . R1LENGTH NULL Minimum number of bases to retain for R1 sequence of gene expression MEMPERCORE 30 For clusters whose job managers do not support memory requests, it is possible to request memory in the form of cores. This option will scale up the number of threads requested via the MRO_THREADS variable according to how much memory a stage requires when given to the ratio of memory on your nodes. par_automated_library_prep No Whether or not to perform automated library prep. Alternatively, you may set this parameter to \"no\" and manually prepare the libraries. par_fastq_directory NULL Path to directory containing the FASTQ files. This directory should only contain FASTQ files for the experiment. par_sample_names NULL The sample names used to name the FASTQ files according to CellRanger nomeclature par_rename_samples Yes Whether or not you want to rename your samples. These names will be used to identify cells in the Seurat objects par_new_sample_names NULL New sample names. Make sure they are defined in the same order as 'par_sample_names' par_paired_end_seq Yes Whether or not paired-end sequencing was performed Given that CellRanger runs a user interface, it is recommended to run Step 1 in a 'screen'. To run Step 1, use the following command: screen -S run_scrnabox bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 1 The resulting output files are deposited into ~/working_directory/step1 Note: If you do not have access to FASTQ files for your experiment, you may intiate the pipeline at which ever Analytical Step takes your data object as input. In the case where FASTQ files are not available, users do not have to create the samples_info folder. For more information see Processed Data . Step 2: Ambient RNA removal and create Seurat object In this step, the ambient RNA rate is estimated and the gene expression profiles are corrected for RNA contamination (optional) using SoupX (Young et al. 2020). Then, CellRanger- or SoupX-generated feature-barcode expression matrices are transformed into Seurat objects. Genes expressed in less than a minimum number of cells and cells expressing less than a minimum number of genes can be filtered. The following parameters are adjustable for Step 2: Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_ambient_RNA Yes Whether or not to correct the feature-barcode expression matrices for ambient RNA contamination par_count_matrices NULL If users skipped Step 1, the may provide the path to a directory that contains existing feature-barcode expression matrices to initiate the pipeline at Step 2 par_min.cells_L 0 Only retain genes expressed in a minimum number of cells par_min.features_L 0 Only retain cells expressing a minimum number of genes To run Step 2, use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 2 The resulting output files are deposited into ~/working_directory/step2 Step 3: Quality control and filtering Low quality cells are filtered based on the user-defined thresholds for: the number of genes detected per cell; the number of unique transcripts detected per cell; the percentage of mitochondrial-encoded transcripts; the percentage of ribosomal-encoded transcripts. In addition, mitochondrial- and ribosomal-encoded genes can be filtered out, as well as a custom user-defined list of genes. Finally, normalization and scaling is performed on the individual Seurat objects prior to cell-cycle scoring. The following parameters are adjustable for Step 3: Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_seurat_object NULL If users skipped Steps 1 and 2, the may provide the path to a directory that contains existing Seurat objects to initiate the pipeline at Step 3 par_nFeature_RNA_L NULL Only retain cells expressing a minimum number of genes par_nFeature_RNA_U NULL Only retain cells expressing a maximum number of genes par_nCount_RNA_L NULL Only retain cells with a minimum number of unique transcripts par_nCount_RNA_U NULL Only retain cells with a maximum number of unique transcripts par_mitochondria_percent_L NULL Only retain cells with a minimum percentage of mitochondrial genes par_mitochondria_percent_U NULL Only retain cells with a maximum percentage of mitochondrial genes par_ribosomal_percent_L NULL Only retain cells with a minimum percentage of ribosomal genes par_ribosomal_percent_U NULL Only retain cells with a maximum percentage of ribosomal genes par_remove_mitochondrial_genes Yes Whether or not to remove mitochondrial genes par_remove_ribosomal_genes Yes Whether or not to remove ribosomal genes par_remove_genes NULL If users want to remove specific genes from their data, they may define a list of gene identifiers par_normalization.method LogNormalize Method to use for normalization par_scale.factor 10000 Scale factor for scaling the data par_selection.method vst Method for choosing the top variable features par_nfeatures 2500 Number of features to select as top variable features par_top 10 Number of most variable features to be reported in the csv file par_npcs_pca 30 Total Number of principal components to compute and store for principal component analysis (PCA) par_cells 500 Number of cells to include in Seurat's dimheatmap function par_dims 12 Number of dimensions to include in Seurat's dimheatmap function par_dims_umap 10 Number of dimensions to use as input features for uniform manifold approximation and projection (UMAP) par_n.neighbors 65 Number of neighboring points to use in local approximations of manifold structure To run Step 3, use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 3 The resulting output files are deposited into ~/working_directory/step3 Step 4: Doublet removal Doublets are identified and removed from downstream analysis (optional) using the DoubletFinder tool (McGinnis et al. 2019). The following parameters are adjustable for Step 4: Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_dropDN Yes Whether or not to remove predicted doublets from downstream analyses par_PCs 20 The number of statistically significant principal components. Can be informed by elbow plot produced in Step 3 par_pN 0.25 The number of artificial doublets to generate. DoubletFinderr is largely invariant to this parameter. We suggest keeping 0.25 par_sct FALSE Logical representing whether SCTransform was used during original Seurat object pre-processing par_sample_names NULL A list of sample names for each sample in the experiement, corresponding to the expected doublet rates listed in the parameter below. Sample names should be the same as those used to produce the samples_info folder during the setup procedures. par_expected_doublet_rate NULL A list of expected doublet rates for each sample, corresponding to the sample names listed in the above parameter To run Step 4, use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 4 The resulting output files are deposited into ~/working_directory/step4 Step 5: Integration and linear dimensional reduction Individual Seurat objects are integrated to enable the joint analysis across samples using Seurat's integration algorithm (Stuart et al. 2019); if experiments are limited to a single sequencing run, the integration Step can be bypassed. Normalization, scaling, and linear dimensional reduction is then performed on the resulting Seurat object to inform the optimal parameters for clustering in Step 6. The following parameters are adjustable for Step 5: Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_skip_integration No Whether or not to skip integration. This is applicable for experiments that comprises of only one sequencing run. par_FindIntegrationAnchors_dim 25 Which dimensions to use from the canonical correlation analysis (CCA) to specify the neighbor search space par_DefaultAssay RNA The assay to perform normalization, scaling, and linear dimensiona reduction on. For most use cases this will be RNA. par_normalization.method LogNormalize Method to use for normalization par_selection.method vst Method for detecting top variable features par_nfeatures 2500 Number of features to select as top variable features par_RunUMAP_n.neighbors 65 Number of neighboring points used in local approximations of manifold structure par_RunPCA_npcs 30 Total Number of principal components to compute and store for principal component analysis (PCA) par_RunUMAP_dims 10 Number of dimensions to use as input features for uniform manifold approximation and projection (UMAP) par_compute_jackstraw No Whether or not to perform JackStraw computation. This computation takes a long time. To run Step 5, use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 5 The resulting output files are deposited into ~/working_directory/step5 Step 6: Clustering Clustering is performed to define groups of cells with similar expression profiles using the graph-based clustering approach implemented in the Seurat framework (Macosko et al. 2015). The following parameters are adjustable for Step 6: Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_skip_step5 No Whether or not the user skipped integration in Step 5 par_FindNeighbors_dims 30 Number of dimensions from linear dimensional reduction used as input to identify neighbours. Can be informed by the elbow and Jackstraw plots produced in Step 5 par_RunUMAP_dims 30 Number of dimensions from linear dimensional reduction used as input to compute UMAP. Can be informed by the elbow and Jackstraw plots produced in Step 5 par_FindNeighbors_k.param 60 Defines k for the k-nearest neighbor algorithm par_FindNeighbors_prune.SNN 1/15 Sets the cutoff for acceptable Jaccard index when computing the neighborhood overlap for the shared nearest-neighbour (SNN) construction par_FindClusters_resolution 0.1 to 0.9, in intervals of 0.1 Value of the clustering resolution parameter. You may provide multiple resolution values par_compute_ARI Yes Whether or not you want to compute the Adjusted Rand Index (ARI) between clusters at a given clustering resolution par_RI_reps 100 Number of iterations for clustering the data at a given resolution in order to calculate the ARI To run Step 6, use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 6 The resulting output files are deposited into ~/working_directory/step6 Step 7: Cluster annotation Cell populations, or clusters, are annotated to define cell types by three distinct methods: Method 1. Cluster marker gene set enrichment analysis (GSEA) : Seurat's FindAllMarkers function is used to identify differentially expressed marker genes (DEG) by the Wilcoxon rank-sum test (Macosko et al. 2015). DEGs in the positive direction (Log2 fold-change > 0.00) are then tested for enrichment across user-defined gene set libraries that define cell types using the EnrichR tool (Chen et al. 2013). Method 2. Module score : Seurat\u2019s implementation ( AddModuleScore ) of Tirosh et al.\u2019s algorithm is used to comparatively quantify the expression of gene sets across clusters at the single-cell level (Tirosh et al. 2016). Users must define their desired gene sets in the parameters file of Step 7. Gene sets should be defined in a csv file, where the column names correspond to the arbitrary name of the gene set and the corresponding rows define the genes in the gene set. For example: gene_set_1 gene_set_2 gene_set_3 CLDN5 IFITM3 TM4SF1 ANGPT2 EGFL7 IGFBP FLT1 A2M GIMAP7 DEPP1 SOD2 EMP2 TMSB10 PODXL B2M HLA-E VWF BST2 SLCO4A1 PECAM1 BSG TGM2 SLC2A3 PARP14 IFI27 TSC22D1 NFKBIA MT2A HLA-B ID3 EPAS1 IFITM2 Method 3. Reference-based annotation : Seurat's FindTransferAnchors and TransferData functions are used to leverage cell-type annotations from a reference Seurat object and generate annotation predictions for the query dataset (Macosko et al. 2015). User's must define the location of their referene Seurat object in the parameters file of Step 7. In addition to the three annotation methods, scRNAbox allows users to visualize the expression of select features at the cluster or cell level via a user-provided list of gene identifiers in order to further inform the cellular species that make up specific clusters. The following parameters are adjustable for Step 7: Parameter Default Description (the cluster annotation method associated with the parameter is shown) par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_level_cluster integrated_snn_res.0.7 The cluster resolution that you want to use for downstream analyses. If you skipped integration in Step 5, use par_level_cluster='RNA_snn_res.0.7', if you want to proceed with a clustering resolution of 0.7 par_top_sel 5 Method 1: Number of top markers to identify based on avg_log2FC par_db Descartes_Cell_Types_and_Tissue_2021, CellMarker_Augmented_2021, Azimuth_Cell_Types_2021 Method 1: Character vector of EnrichR databases that define cell types. The top marker genes for each cluster will be tested for enrichment across these databases. par_compute_module_score Yes Method 2: Whether or not to perform the module score computation par_compute_module_score Yes Method 2: Whether or not to perform the module score computation par_module_score NULL Method 2: Path defining the location of the directory that contains the csv file of the gene sets used to compute the module score par_reference NULL Method 3: Path defining the location of the reference Seurat object par_level_celltype NULL Method 3: The name of the metadata column in the reference Seurat object that defines cell types par_FindTransferAnchors_dim 10 Method 3: Number of dimensions from linear dimensional reduction used to find transfer anchors between the reference and query Seurat objects par_futureglobalsmaxSize 50000 * 1024^2 Method 3: This will increase your RAM usage so set this number mindfully par_visualize_select_features No Visualize select features: Whether or not to visualize select features par_select_features NULL Visualize select features: list of gene identifiers to visualize the expression of select features To identify cluster marker genes ( Method 1 ), compute the module score for user-defined gene sets ( Method 2 ), and visualize select features , use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --marker T Then, to test the top cluster marker genes for enrichment across gene set libraries that define cell types ( Method 1 ), use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --enrich T Note: In order to test the cluster marker genes for enrichment across EnrichR libraries, the HPC must have access to the internet. If your HPC cannot access the internet, it is possible to run the enrichment step on your local machine directly in R. To do so, begin by downloading the Step 6 Seurat RDS object ( ~/working_directory/step6/objs6/seu_step6.rds ) and cluster marker RDS object ( ~/working_directory/step7/info7/marker/ClusterMarkers.rds ) to your computer using the following commands: scp username@beluga.computecanada.ca:~/working_directory/step7/info7/marker/ClusterMarkers.rds ~/Desktop/working_directory scp username@beluga.computecanada.ca:~/working_directory/step6/objs6/seu_step6.rds ~/Desktop/working_directory Then run the follwing code in R: SCRNABOX_PWD <- \"~/Desktop/working_directory\" dir.create(\"SCRNABOX_PWD/step7/annot\") level_cluster='integrated_snn_res.0.7' ClusterMarkers='SCRNABOX_PWD/step7/info7/ClusterMarkers.rds' PWD='SCRNABOX_PWD/step7/annot/' PSUE='SCRNABOX_PWD/step6/objs6/seu_step6.rds' top_sel=5 db <- c('Descartes_Cell_Types_and_Tissue_2021','CellMarker_Augmented_2021','Azimuth_Cell_Types_2021') scrnaboxR::annotation(level_cluster,ClusterMarkers,PWD,PSUE,top_sel,db) To perform reference-based annotation ( Method 3 ), run the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --fta T The resulting output files are deposited into ~/working_directory/step7 . Step 8: Differential gene expression contrasts This step performs differential gene expression (DGE) analyses according to user-defined contrasts. Contrast can be performed between samples (e.g. case vs control; sample-sample contrasts ) or between samples, stratified by cell type (e.g. case vs control for excitatory neurons only; sample-cell contrasts ). The following parameters are adjustable for Step 8: Parameter Default Description (the cluster annotation method associated with the parameter is shown) par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_level_cluster integrated_snn_res.0.7 The cluster resolution that you used in the cluster annotation module. If you skipped integration in Step 5, use par_level_cluster='RNA_snn_res.0.7', if you want to proceed with a clustering resolution of 0.7 par_step8_clus_label NULL List of user-currated cluster labels obtained from the annotation module. Make sure to have the same number of labels as clusters at the desired clustering resolution. par_new_genotype yes Whether or not you want to add new sample labels to simplify the contrasts. For example, you may wish to set both control1 and control2 as control. par_old_sample_label NULL list of old sample labels (i.e. those used to create the samples_info folder in the setup procedures) par_new_sample_label NULL list of new sample labels corresponding to the old sample labels defined in the parameter above The first step of the DGE contrasts module is to create a DGEListobject. This step may require alot of RAM, we suggest 3*size(seu_int_clu.rds). Users can adjust the RAM in the scrnabox_config.ini file located in ~/working_directory/job_info/configs . To create a DGEListobject, run the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --dgelist T The next step is to perform DGE contrasts. As mentioned, users can perform sample-sample contrasts or sample-cell contrasts . To perform sample-sample contrasts , users must first modify the step8_contrast_genotype.txt contrast matrix located in ~/working_directory/job_info/parameters . The contrast matrix comprises three columns that define the arbitrary name of the contrast (cont_name), the control sample (control), and the case sample (versus). For example: cont_name control versus design1 control case1,case2,case3,case4,case5 design2 control case1 design3 control case2 design4 control case3 design5 control case4 design6 control case5 design7 control case1,case2,case3,case4 design8 control case1,case2,case3 design9 control case1,case2 To perform sample-sample contrasts , run the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --genotype T To perform sample-cell contrasts , users must first modify the step8_contrast_celltype.txt contrast matrix located in ~/working_directory/job_info/parameters . The contrast matrix comprises four columns that define the arbitrary name of the contrast (cont_name), the cell type (cell), the control sample (control), and the case sample (versus). For example: cont_name cell control versus design1 excitatory_neuron control case1,case2,case3,case4,case5 design2 excitatory_neuron control case1 design3 excitatory_neuron control case2 design4 excitatory_neuron control case3 design5 excitatory_neuron control case4 design6 excitatory_neuron control case5 design7 excitatory_neuron control case1,case2,case3,case4 design8 excitatory_neuron control case1,case2,case3 design9 excitatory_neuron control case1,case2 To perform sample-cell contrasts , run the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --celltype T The resulting output files are deposited into ~/working_directory/step8 . Note: If you have a large number of contrasts to run, it may be more efficient to split them up and submit batch jobs instead.","title":"- Standard Analysis Track"},{"location":"SCRNA/#scrnabox-pipeline-standard-scrnaseq-analysis-track","text":"","title":"ScRNAbox pipeline: Standard scRNAseq Analysis Track"},{"location":"SCRNA/#contents","text":"Introduction Setup Step 1: FASTQ pre-processing Step 2: Ambient RNA removal and create Seurat object Step 3: Quality control and filtering Step 4: Doublet removal Step 5: Integration and linear dimensional reduction Step 6: Clustering step 7: Cluster annotation step 8: Differential gene expression contrasts","title":"Contents"},{"location":"SCRNA/#introduction","text":"This guide provides an overview of the Analytical Steps that comprise the Standard Analysis Track of the scRNAbox pipeline. The Standard Analysis Track is designed for scRNAseq experiments where each sample is captured and sequenced separately; thus, users should have unique FASTQ files for each of the samples in their experiment. If instead samples were labelled with sample-specific barcodes and pooled prior to sequencing, users should leverage the Cell Hashtag scRNAseq Analysis Track. The Analytical Steps involved in the Standard Analysis Track of the scRNAbox pipeline are outlined in the figure below. Note: This tutorial assumes that scrnabox.slurm , CellRanger , R , and the required R packages have already been installed onto the HPC system. If this is not the case, please visit Installation to do so before proceeding. If the required packages are installed, you can proceed to Setup .","title":"Introduction"},{"location":"SCRNA/#setup","text":"Before running the pipeline, create a dedicated folder for the analysis (hereafter referred to as the working directory). Then, export the path to the working directory and the path to scrnabox.slurm : mkdir ~/working_directory cd ~/working_directory export SCRNABOX_HOME=~/scrnabox.slurm export SCRNABOX_PWD=~/working_directory Next, run the pipeline initiation Step ( --steps 0 ) and define the Standard scRNAseq Analysis Track ( --method SCRNA ) using the following command from the working directory: cd ~/working_directory bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 0 \\ --method SCRNA After running the pipeline initiation Step, the structure of the working directory should be as follows: working_directory \u2514\u2500\u2500 job_info \u251c\u2500\u2500 configs \u251c\u2500\u2500 logs \u2514\u2500\u2500 parameters The configs/ directory contains the scrnabox_config.ini file which allows users to specify their job allocations (memory, threads, and walltime) for each Analytical Step using the Slurm Workload Manager; The logs/ directory records the events of each Analytical Step; The parameters/ directory contains adjustable, Step-specific text files which allow users to define the execution parameters for each Analytical Step. Next, navigate to the scrnabox_config.ini file in ~/working_directory/job_info/configs to define the path to the R library, the version of R, and the path to CellRanger. For example: MODULECELLRANGER=mugqic/cellranger/5.0.1 R_VERSION=4.2.1 R_LIB_PATH=Path/to/R/library Upon completing the setup procedures, users can run their analysis using the scRNAbox pipeline.","title":"Setup"},{"location":"SCRNA/#scrnabox-analytical-steps","text":"Specific Analytical Steps are called using the --steps flag. The output of each Analytical Step is deposited into its respective folder within the working directory (e.g. ~/working_directory/step1 ). Prior to running each Analytical Step, users are strongly encouraged to modify the execution parameters of the analysis using the adjustable, Step-specific parameters text files. The parameters text files are located in ~/working_directory/job_info/parameters . To ensure replicability, a summary report file documents the execution parameters for each iteration of each Analytical Step, which is located in ~/working_directory/job_info/summary_report.txt . For detailed descriptions of each Analytical Step please see our pre-print manuscript.","title":"scRNAbox Analytical Steps"},{"location":"SCRNA/#step-1-fastq-pre-processing","text":"In this step, feature-barcode expression matrices are generated from FASTQ files using the CellRanger counts pipeline. Prior to running CellRanger, library.csv files must be prepared to define the FASTQ files for each sample. ScRNAbox provides an option for automating this process or users may manually prepare the libraries. For more information, please see the the Library preparation tutorial. The following parameters are adjustable for Step 1: Parameter Default Description REF_DIR_GRCH NULL Path to reference genome for FASTQ alignment. 10X Genomics reference genomes are available for download. For more information see their documentation . R1LENGTH NULL Minimum number of bases to retain for R1 sequence of gene expression MEMPERCORE 30 For clusters whose job managers do not support memory requests, it is possible to request memory in the form of cores. This option will scale up the number of threads requested via the MRO_THREADS variable according to how much memory a stage requires when given to the ratio of memory on your nodes. par_automated_library_prep No Whether or not to perform automated library prep. Alternatively, you may set this parameter to \"no\" and manually prepare the libraries. par_fastq_directory NULL Path to directory containing the FASTQ files. This directory should only contain FASTQ files for the experiment. par_sample_names NULL The sample names used to name the FASTQ files according to CellRanger nomeclature par_rename_samples Yes Whether or not you want to rename your samples. These names will be used to identify cells in the Seurat objects par_new_sample_names NULL New sample names. Make sure they are defined in the same order as 'par_sample_names' par_paired_end_seq Yes Whether or not paired-end sequencing was performed Given that CellRanger runs a user interface, it is recommended to run Step 1 in a 'screen'. To run Step 1, use the following command: screen -S run_scrnabox bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 1 The resulting output files are deposited into ~/working_directory/step1 Note: If you do not have access to FASTQ files for your experiment, you may intiate the pipeline at which ever Analytical Step takes your data object as input. In the case where FASTQ files are not available, users do not have to create the samples_info folder. For more information see Processed Data .","title":"Step 1: FASTQ pre-processing"},{"location":"SCRNA/#step-2-ambient-rna-removal-and-create-seurat-object","text":"In this step, the ambient RNA rate is estimated and the gene expression profiles are corrected for RNA contamination (optional) using SoupX (Young et al. 2020). Then, CellRanger- or SoupX-generated feature-barcode expression matrices are transformed into Seurat objects. Genes expressed in less than a minimum number of cells and cells expressing less than a minimum number of genes can be filtered. The following parameters are adjustable for Step 2: Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_ambient_RNA Yes Whether or not to correct the feature-barcode expression matrices for ambient RNA contamination par_count_matrices NULL If users skipped Step 1, the may provide the path to a directory that contains existing feature-barcode expression matrices to initiate the pipeline at Step 2 par_min.cells_L 0 Only retain genes expressed in a minimum number of cells par_min.features_L 0 Only retain cells expressing a minimum number of genes To run Step 2, use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 2 The resulting output files are deposited into ~/working_directory/step2","title":"Step 2: Ambient RNA removal and create Seurat object"},{"location":"SCRNA/#step-3-quality-control-and-filtering","text":"Low quality cells are filtered based on the user-defined thresholds for: the number of genes detected per cell; the number of unique transcripts detected per cell; the percentage of mitochondrial-encoded transcripts; the percentage of ribosomal-encoded transcripts. In addition, mitochondrial- and ribosomal-encoded genes can be filtered out, as well as a custom user-defined list of genes. Finally, normalization and scaling is performed on the individual Seurat objects prior to cell-cycle scoring. The following parameters are adjustable for Step 3: Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_seurat_object NULL If users skipped Steps 1 and 2, the may provide the path to a directory that contains existing Seurat objects to initiate the pipeline at Step 3 par_nFeature_RNA_L NULL Only retain cells expressing a minimum number of genes par_nFeature_RNA_U NULL Only retain cells expressing a maximum number of genes par_nCount_RNA_L NULL Only retain cells with a minimum number of unique transcripts par_nCount_RNA_U NULL Only retain cells with a maximum number of unique transcripts par_mitochondria_percent_L NULL Only retain cells with a minimum percentage of mitochondrial genes par_mitochondria_percent_U NULL Only retain cells with a maximum percentage of mitochondrial genes par_ribosomal_percent_L NULL Only retain cells with a minimum percentage of ribosomal genes par_ribosomal_percent_U NULL Only retain cells with a maximum percentage of ribosomal genes par_remove_mitochondrial_genes Yes Whether or not to remove mitochondrial genes par_remove_ribosomal_genes Yes Whether or not to remove ribosomal genes par_remove_genes NULL If users want to remove specific genes from their data, they may define a list of gene identifiers par_normalization.method LogNormalize Method to use for normalization par_scale.factor 10000 Scale factor for scaling the data par_selection.method vst Method for choosing the top variable features par_nfeatures 2500 Number of features to select as top variable features par_top 10 Number of most variable features to be reported in the csv file par_npcs_pca 30 Total Number of principal components to compute and store for principal component analysis (PCA) par_cells 500 Number of cells to include in Seurat's dimheatmap function par_dims 12 Number of dimensions to include in Seurat's dimheatmap function par_dims_umap 10 Number of dimensions to use as input features for uniform manifold approximation and projection (UMAP) par_n.neighbors 65 Number of neighboring points to use in local approximations of manifold structure To run Step 3, use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 3 The resulting output files are deposited into ~/working_directory/step3","title":"Step 3: Quality control and filtering"},{"location":"SCRNA/#step-4-doublet-removal","text":"Doublets are identified and removed from downstream analysis (optional) using the DoubletFinder tool (McGinnis et al. 2019). The following parameters are adjustable for Step 4: Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_dropDN Yes Whether or not to remove predicted doublets from downstream analyses par_PCs 20 The number of statistically significant principal components. Can be informed by elbow plot produced in Step 3 par_pN 0.25 The number of artificial doublets to generate. DoubletFinderr is largely invariant to this parameter. We suggest keeping 0.25 par_sct FALSE Logical representing whether SCTransform was used during original Seurat object pre-processing par_sample_names NULL A list of sample names for each sample in the experiement, corresponding to the expected doublet rates listed in the parameter below. Sample names should be the same as those used to produce the samples_info folder during the setup procedures. par_expected_doublet_rate NULL A list of expected doublet rates for each sample, corresponding to the sample names listed in the above parameter To run Step 4, use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 4 The resulting output files are deposited into ~/working_directory/step4","title":"Step 4: Doublet removal"},{"location":"SCRNA/#step-5-integration-and-linear-dimensional-reduction","text":"Individual Seurat objects are integrated to enable the joint analysis across samples using Seurat's integration algorithm (Stuart et al. 2019); if experiments are limited to a single sequencing run, the integration Step can be bypassed. Normalization, scaling, and linear dimensional reduction is then performed on the resulting Seurat object to inform the optimal parameters for clustering in Step 6. The following parameters are adjustable for Step 5: Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_skip_integration No Whether or not to skip integration. This is applicable for experiments that comprises of only one sequencing run. par_FindIntegrationAnchors_dim 25 Which dimensions to use from the canonical correlation analysis (CCA) to specify the neighbor search space par_DefaultAssay RNA The assay to perform normalization, scaling, and linear dimensiona reduction on. For most use cases this will be RNA. par_normalization.method LogNormalize Method to use for normalization par_selection.method vst Method for detecting top variable features par_nfeatures 2500 Number of features to select as top variable features par_RunUMAP_n.neighbors 65 Number of neighboring points used in local approximations of manifold structure par_RunPCA_npcs 30 Total Number of principal components to compute and store for principal component analysis (PCA) par_RunUMAP_dims 10 Number of dimensions to use as input features for uniform manifold approximation and projection (UMAP) par_compute_jackstraw No Whether or not to perform JackStraw computation. This computation takes a long time. To run Step 5, use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 5 The resulting output files are deposited into ~/working_directory/step5","title":"Step 5: Integration and linear dimensional reduction"},{"location":"SCRNA/#step-6-clustering","text":"Clustering is performed to define groups of cells with similar expression profiles using the graph-based clustering approach implemented in the Seurat framework (Macosko et al. 2015). The following parameters are adjustable for Step 6: Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_skip_step5 No Whether or not the user skipped integration in Step 5 par_FindNeighbors_dims 30 Number of dimensions from linear dimensional reduction used as input to identify neighbours. Can be informed by the elbow and Jackstraw plots produced in Step 5 par_RunUMAP_dims 30 Number of dimensions from linear dimensional reduction used as input to compute UMAP. Can be informed by the elbow and Jackstraw plots produced in Step 5 par_FindNeighbors_k.param 60 Defines k for the k-nearest neighbor algorithm par_FindNeighbors_prune.SNN 1/15 Sets the cutoff for acceptable Jaccard index when computing the neighborhood overlap for the shared nearest-neighbour (SNN) construction par_FindClusters_resolution 0.1 to 0.9, in intervals of 0.1 Value of the clustering resolution parameter. You may provide multiple resolution values par_compute_ARI Yes Whether or not you want to compute the Adjusted Rand Index (ARI) between clusters at a given clustering resolution par_RI_reps 100 Number of iterations for clustering the data at a given resolution in order to calculate the ARI To run Step 6, use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 6 The resulting output files are deposited into ~/working_directory/step6","title":"Step 6: Clustering"},{"location":"SCRNA/#step-7-cluster-annotation","text":"Cell populations, or clusters, are annotated to define cell types by three distinct methods: Method 1. Cluster marker gene set enrichment analysis (GSEA) : Seurat's FindAllMarkers function is used to identify differentially expressed marker genes (DEG) by the Wilcoxon rank-sum test (Macosko et al. 2015). DEGs in the positive direction (Log2 fold-change > 0.00) are then tested for enrichment across user-defined gene set libraries that define cell types using the EnrichR tool (Chen et al. 2013). Method 2. Module score : Seurat\u2019s implementation ( AddModuleScore ) of Tirosh et al.\u2019s algorithm is used to comparatively quantify the expression of gene sets across clusters at the single-cell level (Tirosh et al. 2016). Users must define their desired gene sets in the parameters file of Step 7. Gene sets should be defined in a csv file, where the column names correspond to the arbitrary name of the gene set and the corresponding rows define the genes in the gene set. For example: gene_set_1 gene_set_2 gene_set_3 CLDN5 IFITM3 TM4SF1 ANGPT2 EGFL7 IGFBP FLT1 A2M GIMAP7 DEPP1 SOD2 EMP2 TMSB10 PODXL B2M HLA-E VWF BST2 SLCO4A1 PECAM1 BSG TGM2 SLC2A3 PARP14 IFI27 TSC22D1 NFKBIA MT2A HLA-B ID3 EPAS1 IFITM2 Method 3. Reference-based annotation : Seurat's FindTransferAnchors and TransferData functions are used to leverage cell-type annotations from a reference Seurat object and generate annotation predictions for the query dataset (Macosko et al. 2015). User's must define the location of their referene Seurat object in the parameters file of Step 7. In addition to the three annotation methods, scRNAbox allows users to visualize the expression of select features at the cluster or cell level via a user-provided list of gene identifiers in order to further inform the cellular species that make up specific clusters. The following parameters are adjustable for Step 7: Parameter Default Description (the cluster annotation method associated with the parameter is shown) par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_level_cluster integrated_snn_res.0.7 The cluster resolution that you want to use for downstream analyses. If you skipped integration in Step 5, use par_level_cluster='RNA_snn_res.0.7', if you want to proceed with a clustering resolution of 0.7 par_top_sel 5 Method 1: Number of top markers to identify based on avg_log2FC par_db Descartes_Cell_Types_and_Tissue_2021, CellMarker_Augmented_2021, Azimuth_Cell_Types_2021 Method 1: Character vector of EnrichR databases that define cell types. The top marker genes for each cluster will be tested for enrichment across these databases. par_compute_module_score Yes Method 2: Whether or not to perform the module score computation par_compute_module_score Yes Method 2: Whether or not to perform the module score computation par_module_score NULL Method 2: Path defining the location of the directory that contains the csv file of the gene sets used to compute the module score par_reference NULL Method 3: Path defining the location of the reference Seurat object par_level_celltype NULL Method 3: The name of the metadata column in the reference Seurat object that defines cell types par_FindTransferAnchors_dim 10 Method 3: Number of dimensions from linear dimensional reduction used to find transfer anchors between the reference and query Seurat objects par_futureglobalsmaxSize 50000 * 1024^2 Method 3: This will increase your RAM usage so set this number mindfully par_visualize_select_features No Visualize select features: Whether or not to visualize select features par_select_features NULL Visualize select features: list of gene identifiers to visualize the expression of select features To identify cluster marker genes ( Method 1 ), compute the module score for user-defined gene sets ( Method 2 ), and visualize select features , use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --marker T Then, to test the top cluster marker genes for enrichment across gene set libraries that define cell types ( Method 1 ), use the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --enrich T Note: In order to test the cluster marker genes for enrichment across EnrichR libraries, the HPC must have access to the internet. If your HPC cannot access the internet, it is possible to run the enrichment step on your local machine directly in R. To do so, begin by downloading the Step 6 Seurat RDS object ( ~/working_directory/step6/objs6/seu_step6.rds ) and cluster marker RDS object ( ~/working_directory/step7/info7/marker/ClusterMarkers.rds ) to your computer using the following commands: scp username@beluga.computecanada.ca:~/working_directory/step7/info7/marker/ClusterMarkers.rds ~/Desktop/working_directory scp username@beluga.computecanada.ca:~/working_directory/step6/objs6/seu_step6.rds ~/Desktop/working_directory Then run the follwing code in R: SCRNABOX_PWD <- \"~/Desktop/working_directory\" dir.create(\"SCRNABOX_PWD/step7/annot\") level_cluster='integrated_snn_res.0.7' ClusterMarkers='SCRNABOX_PWD/step7/info7/ClusterMarkers.rds' PWD='SCRNABOX_PWD/step7/annot/' PSUE='SCRNABOX_PWD/step6/objs6/seu_step6.rds' top_sel=5 db <- c('Descartes_Cell_Types_and_Tissue_2021','CellMarker_Augmented_2021','Azimuth_Cell_Types_2021') scrnaboxR::annotation(level_cluster,ClusterMarkers,PWD,PSUE,top_sel,db) To perform reference-based annotation ( Method 3 ), run the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 7 \\ --fta T The resulting output files are deposited into ~/working_directory/step7 .","title":"Step 7: Cluster annotation"},{"location":"SCRNA/#step-8-differential-gene-expression-contrasts","text":"This step performs differential gene expression (DGE) analyses according to user-defined contrasts. Contrast can be performed between samples (e.g. case vs control; sample-sample contrasts ) or between samples, stratified by cell type (e.g. case vs control for excitatory neurons only; sample-cell contrasts ). The following parameters are adjustable for Step 8: Parameter Default Description (the cluster annotation method associated with the parameter is shown) par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_level_cluster integrated_snn_res.0.7 The cluster resolution that you used in the cluster annotation module. If you skipped integration in Step 5, use par_level_cluster='RNA_snn_res.0.7', if you want to proceed with a clustering resolution of 0.7 par_step8_clus_label NULL List of user-currated cluster labels obtained from the annotation module. Make sure to have the same number of labels as clusters at the desired clustering resolution. par_new_genotype yes Whether or not you want to add new sample labels to simplify the contrasts. For example, you may wish to set both control1 and control2 as control. par_old_sample_label NULL list of old sample labels (i.e. those used to create the samples_info folder in the setup procedures) par_new_sample_label NULL list of new sample labels corresponding to the old sample labels defined in the parameter above The first step of the DGE contrasts module is to create a DGEListobject. This step may require alot of RAM, we suggest 3*size(seu_int_clu.rds). Users can adjust the RAM in the scrnabox_config.ini file located in ~/working_directory/job_info/configs . To create a DGEListobject, run the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --dgelist T The next step is to perform DGE contrasts. As mentioned, users can perform sample-sample contrasts or sample-cell contrasts . To perform sample-sample contrasts , users must first modify the step8_contrast_genotype.txt contrast matrix located in ~/working_directory/job_info/parameters . The contrast matrix comprises three columns that define the arbitrary name of the contrast (cont_name), the control sample (control), and the case sample (versus). For example: cont_name control versus design1 control case1,case2,case3,case4,case5 design2 control case1 design3 control case2 design4 control case3 design5 control case4 design6 control case5 design7 control case1,case2,case3,case4 design8 control case1,case2,case3 design9 control case1,case2 To perform sample-sample contrasts , run the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --genotype T To perform sample-cell contrasts , users must first modify the step8_contrast_celltype.txt contrast matrix located in ~/working_directory/job_info/parameters . The contrast matrix comprises four columns that define the arbitrary name of the contrast (cont_name), the cell type (cell), the control sample (control), and the case sample (versus). For example: cont_name cell control versus design1 excitatory_neuron control case1,case2,case3,case4,case5 design2 excitatory_neuron control case1 design3 excitatory_neuron control case2 design4 excitatory_neuron control case3 design5 excitatory_neuron control case4 design6 excitatory_neuron control case5 design7 excitatory_neuron control case1,case2,case3,case4 design8 excitatory_neuron control case1,case2,case3 design9 excitatory_neuron control case1,case2 To perform sample-cell contrasts , run the following command: bash $SCRNABOX_HOME/launch_scrnabox.sh \\ -d ${SCRNABOX_PWD} \\ --steps 8 \\ --celltype T The resulting output files are deposited into ~/working_directory/step8 . Note: If you have a large number of contrasts to run, it may be more efficient to split them up and submit batch jobs instead.","title":"Step 8: Differential gene expression contrasts"},{"location":"about/","text":"Coming soon","title":"Coming soon"},{"location":"about/#coming-soon","text":"","title":"Coming soon"},{"location":"changelog/","text":"Changelog v0.1.1 This is the initial release. v0.1.2 Deployed on 2023-08-23 -- new features Possibility to consider multiple control Works with sole sample v0.1.25 Supposed to add Complete the documentation Add CellBender","title":"- Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#v011","text":"This is the initial release.","title":"v0.1.1"},{"location":"changelog/#v012","text":"Deployed on 2023-08-23 -- new features Possibility to consider multiple control Works with sole sample","title":"v0.1.2"},{"location":"changelog/#v0125","text":"Supposed to add Complete the documentation Add CellBender","title":"v0.1.25"},{"location":"contributing/","text":"Contributing This is an early version, any contribute or suggestion is appreciated, it is supposed to be an easy-to-use pipline for scRNA analysis, so you can directly contact with Saeid Amiri or Rhalena Thomas . If you encounter any issue , please file its Github repository.","title":"- Contributing"},{"location":"contributing/#contributing","text":"This is an early version, any contribute or suggestion is appreciated, it is supposed to be an easy-to-use pipline for scRNA analysis, so you can directly contact with Saeid Amiri or Rhalena Thomas . If you encounter any issue , please file its Github repository.","title":"Contributing"},{"location":"installation/","text":"Installation To use the scRNAbox pipeline, the folowing must be installed on your High-Performance Computing (HPC) system: scrnabox.slurm CellRanger R and R packages scrnabox.slurm installation scrnabox.slurm is written in bash and can be used with any Slurm system. To download the latest version of scrnabox.slurm (v0.1.35) run the following command: wget https://github.com/neurobioinfo/scrnabox/releases/download/v0.1.35/scrnabox.slurm.zip unzip scrnabox.slurm.zip For a description of the options for running scrnabox.slurm run the following command: bash ~/scrnabox.slurm/launch_scrnabox.sh -h If the scrnabox.slurm has been installed properly, the above command should return the folllowing: mandatory arguments: -d (--dir) = Working directory (where all the outputs will be printed) (give full path) --steps = Specify what steps, e.g., 2 to run just step 2, 2-4, run steps 2 through 4) optional arguments: -h (--help) = See helps regarding the pipeline options. --method = Choose what scRNA method you want to use; use HTO and SCRNA for for hashtag nad Standard scRNA, respectively. --nFeature_RNA_L = Lower threshold of number of unique RNA transcripts for each cell, it filters nFeature_RNA > nFeature_RNA_L. --nFeature_RNA_U = Upper threshold of number of unique RNA transcripts for each cell, it filters --nFeature_RNA_U. --nCount_RNA_L = Lower threshold for nCount_RNA, it filters nCount_RNA > nCount_RNA_L --nCount_RNA_U = Upper threshold for nCount_RNA, it filters nCount_RNA < nCount_RNA_U --mitochondria_percent_L = Lower threshold for the amount of mitochondrial transcript, it is in percent, mitochondria_percent > mitochondria_percent_L. --mitochondria_percent_U = Upper threshold for the amount of mitochondrial transcript, it is in percent, mitochondria_percent < mitochondria_percent_U. --log10GenesPerUMI_U = Upper threshold for the log number of genes per UMI for each cell, it is in percent,log10GenesPerUMI=log10(nFeature_RNA)/log10(nCount_RNA). mitochondria_percent < log10GenesPerUMI_U. --log10GenesPerUMI_L = Lower threshold for the log number of genes per UMI for each cell, log10GenesPerUMI=log10(nFeature_RNA)/log10(nCount_RNA). mitochondria_percent > log10GenesPerUMI_L. --msd = you can get the hashtag labels by running the following code --marker = Find marker. --sinfo = Do you need sample info? --fta = FindTransferAnchors --enrich = Annotation --dgelist = creates a DGEListobject from a table of counts obtained from seurate objects. --genotype = Run the genotype contrast. --celltype = Run the Genotype-cell contrast. --cont = You can directly call the contrast to the pipeline. --seulist = You can directly call the list of seurat objects to the pipeline. CellRanger installation For information regarding the installation of CellRanger , please visit the 10X Genomics documentation . If CellRanger is already installed on your HPC system, you may skip the CellRanger installation procedures. R library preparation and R package installation Users must first install R onto their HPC system: # install R module load r/4.2.1 Then, users should create a designated directory on their HPC system where the required R packages will be installed: # make common R library mkdir R_library cd R_library # open R R # set common R library path R_LIB_PATH=\"~/R_library\" .libPaths(R_LIB_PATH) # load packages library(Seurat) library(ggplot2) library(dplyr) library(foreach) library(doParallel) library(Matrix) library(DoubletFinder) library(cowplot) library(clustree) library(xlsx) library(enrichR) library(stringi) library(limma) library(tidyverse) library(edgeR) library(vctrs) library(RColorBrewer) library(fossil) library(openxlsx) library(stringr) library(ggpubr) devtools::install_github(\u201cneurobioinfo/scrnabox/scrnaboxR\u201d) Upon completing the installation procedures, users can proceed with the scRNAbox pipeline using either the Standard scRNAseq Analysis Track or Cell Hashtag scRNAseq Analysis Track .","title":"Installation"},{"location":"installation/#installation","text":"To use the scRNAbox pipeline, the folowing must be installed on your High-Performance Computing (HPC) system: scrnabox.slurm CellRanger R and R packages","title":"Installation"},{"location":"installation/#scrnaboxslurm-installation","text":"scrnabox.slurm is written in bash and can be used with any Slurm system. To download the latest version of scrnabox.slurm (v0.1.35) run the following command: wget https://github.com/neurobioinfo/scrnabox/releases/download/v0.1.35/scrnabox.slurm.zip unzip scrnabox.slurm.zip For a description of the options for running scrnabox.slurm run the following command: bash ~/scrnabox.slurm/launch_scrnabox.sh -h If the scrnabox.slurm has been installed properly, the above command should return the folllowing: mandatory arguments: -d (--dir) = Working directory (where all the outputs will be printed) (give full path) --steps = Specify what steps, e.g., 2 to run just step 2, 2-4, run steps 2 through 4) optional arguments: -h (--help) = See helps regarding the pipeline options. --method = Choose what scRNA method you want to use; use HTO and SCRNA for for hashtag nad Standard scRNA, respectively. --nFeature_RNA_L = Lower threshold of number of unique RNA transcripts for each cell, it filters nFeature_RNA > nFeature_RNA_L. --nFeature_RNA_U = Upper threshold of number of unique RNA transcripts for each cell, it filters --nFeature_RNA_U. --nCount_RNA_L = Lower threshold for nCount_RNA, it filters nCount_RNA > nCount_RNA_L --nCount_RNA_U = Upper threshold for nCount_RNA, it filters nCount_RNA < nCount_RNA_U --mitochondria_percent_L = Lower threshold for the amount of mitochondrial transcript, it is in percent, mitochondria_percent > mitochondria_percent_L. --mitochondria_percent_U = Upper threshold for the amount of mitochondrial transcript, it is in percent, mitochondria_percent < mitochondria_percent_U. --log10GenesPerUMI_U = Upper threshold for the log number of genes per UMI for each cell, it is in percent,log10GenesPerUMI=log10(nFeature_RNA)/log10(nCount_RNA). mitochondria_percent < log10GenesPerUMI_U. --log10GenesPerUMI_L = Lower threshold for the log number of genes per UMI for each cell, log10GenesPerUMI=log10(nFeature_RNA)/log10(nCount_RNA). mitochondria_percent > log10GenesPerUMI_L. --msd = you can get the hashtag labels by running the following code --marker = Find marker. --sinfo = Do you need sample info? --fta = FindTransferAnchors --enrich = Annotation --dgelist = creates a DGEListobject from a table of counts obtained from seurate objects. --genotype = Run the genotype contrast. --celltype = Run the Genotype-cell contrast. --cont = You can directly call the contrast to the pipeline. --seulist = You can directly call the list of seurat objects to the pipeline.","title":"scrnabox.slurm installation"},{"location":"installation/#cellranger-installation","text":"For information regarding the installation of CellRanger , please visit the 10X Genomics documentation . If CellRanger is already installed on your HPC system, you may skip the CellRanger installation procedures.","title":"CellRanger installation"},{"location":"installation/#r-library-preparation-and-r-package-installation","text":"Users must first install R onto their HPC system: # install R module load r/4.2.1 Then, users should create a designated directory on their HPC system where the required R packages will be installed: # make common R library mkdir R_library cd R_library # open R R # set common R library path R_LIB_PATH=\"~/R_library\" .libPaths(R_LIB_PATH) # load packages library(Seurat) library(ggplot2) library(dplyr) library(foreach) library(doParallel) library(Matrix) library(DoubletFinder) library(cowplot) library(clustree) library(xlsx) library(enrichR) library(stringi) library(limma) library(tidyverse) library(edgeR) library(vctrs) library(RColorBrewer) library(fossil) library(openxlsx) library(stringr) library(ggpubr) devtools::install_github(\u201cneurobioinfo/scrnabox/scrnaboxR\u201d) Upon completing the installation procedures, users can proceed with the scRNAbox pipeline using either the Standard scRNAseq Analysis Track or Cell Hashtag scRNAseq Analysis Track .","title":"R library preparation and R package installation"},{"location":"library_prep/","text":"Finally, in preparation for Step 1 (FASTQ pre-processing with CellRanger) users must create library.csv and feature_ref.csv files for each of their sequencing runs. library.csv The library.csv file defines the necessary information of the FASTQ files for the experiment, including the gene expression and antibody assays. The structure of the library.csv file should be: fastqs,sample,library_type ~/fastqs/,RUN1GEX,Gene Expression ~/fastqs/,RUN1HTO,Antibody Capture The fastqs column defines the path to the directory that contains the FASTQ files for the experiment. The sample column defines the sample name of the corresponding FASTQ file. Please note that FASTQ files must be named according to standard CellRanger nomenclature. For example, \"CTRL1_S1_L001_R1_001.fastq\". For more information please visit CellRanger's documentation . The library_type column defines the assay type. For the Cell Hashtag Analysis track, each sequencing run should have a \"Gene Expression\" and \"Antibody Capture\" assay. For more information, please visit CellRanger's documentation For example, if the experiment comprises three sequencing runs the following steps should be taken: 1) Navigate to the working directory and create a samples_info folder: cd ~/working_directory mkdir samples_info 2) Navigate to the samples_info folder and create a folder for each sequencing run: cd samples_info mkdir run1 mkdir run2 mkdir run3 3) Navigate to the folder for each sequencing and create the library.csv file. After performing steps 1-3 above, the structure of the samples_info folder for an experiment with three sequencing runs should be: \u251c\u2500\u2500 working_directory \u251c\u2500\u2500 samples_info \u251c\u2500\u2500 run1 \u251c\u2500\u2500 library.csv \u251c\u2500\u2500 run2 \u251c\u2500\u2500 library.csv \u251c\u2500\u2500 run3 \u251c\u2500\u2500 library.csv feature_ref.csv The feature_ref.csv file defines the necessary information for processing the sample-specific barcodes that will eventually be used to demultiplex the pooled samples. For example, if there are four samples pooled together with four unique barcode identifiers, the structure of the feature_ref.csv file should be: id,name,read,pattern,sequence,feature_type Hash1,B0251_TotalSeqB,R2,5PNNNNNNNNNN(BC),GTCAACTCTTTAGCG,Antibody Capture Hash2,B0252_TotalSeqB,R2,5PNNNNNNNNNN(BC),TGATGGCCTATTGGG,Antibody Capture Hash3,B0253_TotalSeqB,R2,5PNNNNNNNNNN(BC),TTCCGCCTCTCTTTG,Antibody Capture Hash4,B0254_TotalSeqB,R2,5PNNNNNNNNNN(BC),AGTAAGTTCAGCGTA,Antibody Capture The id column defines the barcode ID which will be used to track the feature counts. The name column defines the arbitrary name for the barcode identifier. The read column defines which RNA sequencing read contains the barcode sequence. This value Will be either R1 or R2. The pattern column defines the pattern of the barcode identifiers. For more information please visit the 10X Genomics documentation The sequence column defines nucleotide sequence associated with the barcode identifier. The feature_type column defines the type of feature used for sample identification. Please ensure that the feature_type in the feature_ref.csv file matches a library_type in the library.csv file. For more information regarding the preparation of the feature_ref.csv , please see CellRanger's documentation . feature_ref.csv files can be prepared the same way as the library.csv files. After producing the feature_ref.csv for each sequncing run, the structure of the samples_info folder for an experiment with three sequencing runs should be: \u251c\u2500\u2500 working_directory \u251c\u2500\u2500 samples_info \u251c\u2500\u2500 run1 \u251c\u2500\u2500 library.csv \u251c\u2500\u2500 feature_ref.csv \u251c\u2500\u2500 run2 \u251c\u2500\u2500 library.csv \u251c\u2500\u2500 feature_ref.csv \u251c\u2500\u2500 run3 \u251c\u2500\u2500 library.csv \u251c\u2500\u2500 feature_ref.csv","title":"- Library preparation"},{"location":"library_prep/#librarycsv","text":"The library.csv file defines the necessary information of the FASTQ files for the experiment, including the gene expression and antibody assays. The structure of the library.csv file should be: fastqs,sample,library_type ~/fastqs/,RUN1GEX,Gene Expression ~/fastqs/,RUN1HTO,Antibody Capture The fastqs column defines the path to the directory that contains the FASTQ files for the experiment. The sample column defines the sample name of the corresponding FASTQ file. Please note that FASTQ files must be named according to standard CellRanger nomenclature. For example, \"CTRL1_S1_L001_R1_001.fastq\". For more information please visit CellRanger's documentation . The library_type column defines the assay type. For the Cell Hashtag Analysis track, each sequencing run should have a \"Gene Expression\" and \"Antibody Capture\" assay. For more information, please visit CellRanger's documentation For example, if the experiment comprises three sequencing runs the following steps should be taken: 1) Navigate to the working directory and create a samples_info folder: cd ~/working_directory mkdir samples_info 2) Navigate to the samples_info folder and create a folder for each sequencing run: cd samples_info mkdir run1 mkdir run2 mkdir run3 3) Navigate to the folder for each sequencing and create the library.csv file. After performing steps 1-3 above, the structure of the samples_info folder for an experiment with three sequencing runs should be: \u251c\u2500\u2500 working_directory \u251c\u2500\u2500 samples_info \u251c\u2500\u2500 run1 \u251c\u2500\u2500 library.csv \u251c\u2500\u2500 run2 \u251c\u2500\u2500 library.csv \u251c\u2500\u2500 run3 \u251c\u2500\u2500 library.csv","title":"library.csv"},{"location":"library_prep/#feature_refcsv","text":"The feature_ref.csv file defines the necessary information for processing the sample-specific barcodes that will eventually be used to demultiplex the pooled samples. For example, if there are four samples pooled together with four unique barcode identifiers, the structure of the feature_ref.csv file should be: id,name,read,pattern,sequence,feature_type Hash1,B0251_TotalSeqB,R2,5PNNNNNNNNNN(BC),GTCAACTCTTTAGCG,Antibody Capture Hash2,B0252_TotalSeqB,R2,5PNNNNNNNNNN(BC),TGATGGCCTATTGGG,Antibody Capture Hash3,B0253_TotalSeqB,R2,5PNNNNNNNNNN(BC),TTCCGCCTCTCTTTG,Antibody Capture Hash4,B0254_TotalSeqB,R2,5PNNNNNNNNNN(BC),AGTAAGTTCAGCGTA,Antibody Capture The id column defines the barcode ID which will be used to track the feature counts. The name column defines the arbitrary name for the barcode identifier. The read column defines which RNA sequencing read contains the barcode sequence. This value Will be either R1 or R2. The pattern column defines the pattern of the barcode identifiers. For more information please visit the 10X Genomics documentation The sequence column defines nucleotide sequence associated with the barcode identifier. The feature_type column defines the type of feature used for sample identification. Please ensure that the feature_type in the feature_ref.csv file matches a library_type in the library.csv file. For more information regarding the preparation of the feature_ref.csv , please see CellRanger's documentation . feature_ref.csv files can be prepared the same way as the library.csv files. After producing the feature_ref.csv for each sequncing run, the structure of the samples_info folder for an experiment with three sequencing runs should be: \u251c\u2500\u2500 working_directory \u251c\u2500\u2500 samples_info \u251c\u2500\u2500 run1 \u251c\u2500\u2500 library.csv \u251c\u2500\u2500 feature_ref.csv \u251c\u2500\u2500 run2 \u251c\u2500\u2500 library.csv \u251c\u2500\u2500 feature_ref.csv \u251c\u2500\u2500 run3 \u251c\u2500\u2500 library.csv \u251c\u2500\u2500 feature_ref.csv","title":"feature_ref.csv"},{"location":"outputs/","text":"Outputs of each Analytical Step in the scRNAbox pipeline Standard scRNAseq Analysis Track Cell Hashtag scRNAseq Analysis Track Standard scRNAseq Analysis Track Step 1: FASTQ pre-processing All of the outputs of the CellRanger counts pipeline are produced. For more information on the outputs, please visit the CellRanger documentation . Step 2: Ambient RNA removal and create Seurat object Output type Name Description Figure vioplot_sample_name.png Sample-specific violin plot showing the distribution of cells according to QC metrics Info sample_name_RNA.txt Sample-specific sparse matrix of RNA assay Info MetaData_sample_name.txt Sample-specific dataframe showing the Seurat object metadata Info meta_info_sample_name.txt Sample-specific text file showing the column names of the Seurat object metadata Info summary_sample_name.txt Sample-specific text file showing the summary of QC metrics (Minimum, 1st Quartile, Median, Mean, 3rd Quartile, Maximum) Info sessionInfo.txt Session information for the R session Data object sample_name.rds Sample-specific intermediate Seurat RDS object Step 3: Quality control and filtering Output type Name Description Figure cellcycle_sample_name.png Sample-specific violin plot showing the distribution of cells according to cell cycle S and G2M scores Figure dimplot_pca_sample_name.png Sample-specific PCA showing the first two PCs Figure dimplot_umap_sample_name.png Sample-specific UMAP Figure QC_vioplot_sample_name.png Sample-specific violin plot showing the distribution of cells according to QC metrics after filtering Figure VariableFeaturePlot_sample_name.png Sample-specific figure showing the most variably expressed genes Info sample_name_RNA.txt Sample-specific sparse matrix of RNA assay Info MetaData_sample_name.txt Sample-specific dataframe showing the Seurat object metadata Info meta_info_sample_name.txt Sample-specific text file showing the column names of the Seurat object metadata Info most_variable_genes_sample_name.txt Sample-specific text file showing the column names of the Seurat object metadata Info summary_sample_name.txt Sample-specific text file showing the summary of QC metrics (Minimum, 1st Quartile, Median, Mean, 3rd Quartile, Maximum) Info sessionInfo.txt Session information for the R session Data object sample_name.rds Sample-specific intermediate Seurat RDS object Step 4: Doublet removal Output type Name Description Figure sample_nameDF.classifications.png Sample-specific UMAP plot showing droplet classifications (singlet or doublet) Info sample_name_RNA.txt Sample-specific sparse matrix of RNA assay Info MetaData_sample_name.txt Sample-specific dataframe showing the Seurat object metadata Info meta_info_sample_name.txt Sample-specific text file showing the column names of the Seurat object metadata Info sessionInfo.txt Session information for the R session Data object sample_name.rds Sample-specific intermediate Seurat RDS object Step 5: Integration and linear dimensional reduction Output type Name Description Figure DimPlot_pca.png PCA showing the first two PCs, colour-coded by sample Figure DimPlot_umap.png UMAP, colour-coded by sample Figure elbow.png Elbow plot to visualize the percentage of variance explained by each PC Figure Jackstraw_plot.png Jackstraw plot to visualize the distribution of p-values for each PC Info seu_int_RNA.txt Sparse matrix of integrated assay Info seu_int_MetaData.txt Dataframe showing the Seurat object metadata Info meta_info_seu_step5.csv Text file showing the column names of the Seurat object metadata Info sessionInfo.txt Session information for the R session Data object seu_step5.rds Integrated intermediate Seurat RDS object Step 6: Clustering Output type Name Description Figure clustree_int.png Clustree plot showing the stability across the user-defied clustering resolutions Figure integrated_snn_res.png UMAP at the user defined clustering-resolution Figure ARI.png Mean and standard deviation of the Adjusted Rand Index (ARI) between clustering pairs at a user-defined resolution Info test.xlsx Excel file showing the mean and standard deviation of the ARI between clustering pairs at a user-defined resolution Info seu_RNA.txt Sparse matrix of integrated assay Info seu_MetaData.txt Dataframe showing the Seurat object metadata Info meta_info.csv Text file showing the column names of the Seurat object metadata Info sessionInfo.txt Session information for the R session Data object seu_step6.rds Intermediate Seurat RDS object Step 7: Cluster annotation Cluster annotation method Output type Name Description General Figure umap.pdf UMAP plot of integrated assay at the user-defined clustering resolution used for cluster annotation General Figure umap_splitted.pdf UMAP plot of integrated assay at the user-defined clustering resolution used for cluster annotation, split by sample Cluster marker GSEA (Method 1) Figure heatmap.pdf Heatmap showing the expression of the top marker genes across cells, stratified by cluster Cluster marker GSEA (Method 1) Figure plotenrich.pdf Barplot showing the 20 most enriched terms for a particular cluster and cell type library Module score (Method 2) Figure module_score_gene_set.png UMAP plot showing the module score across cells for user-defined gene sets Reference-based annotations (Method 3) Figure UMAP_transferred_labels.pdf UMAP plots showing the cluster annotations from the reference Seurat object projected onto the query Seurat object Visualize select features Figure select_feature_dot_plot.pdf Dotplot showing the expression of user-defined features at the cluster level Visualize select features Figure select_feature_violin_plot.pdf Violin plot showing the expression of user-defined features at the cluster level Visualize select features Figure select_feature_feature_plot.pdf UMAP plots showing the expression of user-defined features at the cell level General Info meta_info_seu_step7.txt Text file showing the column names of the Seurat object metadata General Info sessionInfo_marker.txt Session information for the R session Cluster marker GSEA (Method 1) Info cluster_just_genes.xlsx Excel file showing the marker genes for each cluster Cluster marker GSEA (Method 1) Info cluster_whole.xlsx Excel file showing the marker genes and corresponding summary statistics for each cluster Cluster marker GSEA (Method 1) Info ClusterMarkers.csv csv file showing the marker genes and corresponding summary statistics for each cluster Cluster marker GSEA (Method 1) Info top_sel.csv csv file showing the top n marker genes for each cluster. The user defined n in the execution parameters Cluster marker GSEA (Method 1) Info Er.genes.csv Enrichment terms and the corresponding statistics for a particular cluster and cell type library Module score (Method 2) Info geneset_by_cluster.csv Mean module score across clusters for each user-defined gene set General Data object seu_step7.rds Intermediate Seurat RDS object Cluster marker GSEA (Method 1) Data object ClusterMarkers.rds RDS object containing the marker genes for each cluster Step 8: Differential gene expression contrasts Cell Hashtag scRNAseq Analysis Track Step 1: FASTQ pre-processing All of the outputs of the CellRanger counts pipeline are produced. For more information on the outputs, please visit the CellRanger documentation . Step 2: Ambient RNA removal and create Seurat object Output type Name Description Figure vioplot_sample_name.png Sample-specific violin plot showing the distribution of cells according to QC metrics Info sample_name_RNA.txt Sample-specific sparse matrix of RNA assay Info MetaData_sample_name.txt Sample-specific dataframe showing the Seurat object metadata Info meta_info_sample_name.txt Sample-specific text file showing the column names of the Seurat object metadata Info summary_sample_name.txt Sample-specific text file showing the summary of QC metrics (Minimum, 1st Quartile, Median, Mean, 3rd Quartile, Maximum) Info sessionInfo.txt Session information for the R session Data object sample_name.rds Sample-specific intermediate Seurat RDS object Step 3: Quality control and filtering Output type Name Description Figure cellcycle_sample_name.png Sample-specific violin plot showing the distribution of cells according to cell cycle S and G2M scores Figure dimplot_pca_sample_name.png Sample-specific PCA showing the first two PCs Figure dimplot_umap_sample_name.png Sample-specific UMAP Figure QC_vioplot_sample_name.png Sample-specific violin plot showing the distribution of cells according to QC metrics after filtering Figure VariableFeaturePlot_sample_name.png Sample-specific figure showing the most variably expressed genes Info sample_name_RNA.txt Sample-specific sparse matrix of RNA assay Info MetaData_sample_name.txt Sample-specific dataframe showing the Seurat object metadata Info meta_info_sample_name.txt Sample-specific text file showing the column names of the Seurat object metadata Info most_variable_genes_sample_name.txt Sample-specific text file showing the column names of the Seurat object metadata Info summary_sample_name.txt Sample-specific text file showing the summary of QC metrics (Minimum, 1st Quartile, Median, Mean, 3rd Quartile, Maximum) Info sessionInfo.txt Session information for the R session Data object sample_name.rds Sample-specific intermediate Seurat RDS object Step 4: Demultiplexing and doublet removal Step 5: Integration and linear dimensional reduction Output type Name Description Figure DimPlot_pca.png PCA showing the first two PCs, colour-coded by sample Figure DimPlot_umap.png UMAP, colour-coded by sample Figure elbow.png Elbow plot to visualize the percentage of variance explained by each PC Figure Jackstraw_plot.png Jackstraw plot to visualize the distribution of p-values for each PC Info seu_int_RNA.txt Sparse matrix of integrated assay Info seu_int_MetaData.txt Dataframe showing the Seurat object metadata Info meta_info_seu_step5.csv Text file showing the column names of the Seurat object metadata Info sessionInfo.txt Session information for the R session Data object seu_step5.rds Integrated intermediate Seurat RDS object Step 6: Clustering Output type Name Description Figure clustree_int.png Clustree plot showing the stability across the user-defied clustering resolutions Figure integrated_snn_res.png UMAP at the user defined clustering-resolution Figure ARI.png Mean and standard deviation of the Adjusted Rand Index (ARI) between clustering pairs at a user-defined resolution Info test.xlsx Excel file showing the mean and standard deviation of the ARI between clustering pairs at a user-defined resolution Info seu_RNA.txt Sparse matrix of integrated assay Info seu_MetaData.txt Dataframe showing the Seurat object metadata Info meta_info.csv Text file showing the column names of the Seurat object metadata Info sessionInfo.txt Session information for the R session Data object seu_step6.rds Intermediate Seurat RDS object Step 7: Cluster annotation Cluster annotation method Output type Name Description General Figure umap.pdf UMAP plot of integrated assay at the user-defined clustering resolution used for cluster annotation General Figure umap_splitted.pdf UMAP plot of integrated assay at the user-defined clustering resolution used for cluster annotation, split by sample Cluster marker GSEA (Method 1) Figure heatmap.pdf Heatmap showing the expression of the top marker genes across cells, stratified by cluster Cluster marker GSEA (Method 1) Figure plotenrich.pdf Barplot showing the 20 most enriched terms for a particular cluster and cell type library Module score (Method 2) Figure module_score_gene_set.png UMAP plot showing the module score across cells for user-defined gene sets Reference-based annotations (Method 3) Figure UMAP_transferred_labels.pdf UMAP plots showing the cluster annotations from the reference Seurat object projected onto the query Seurat object Visualize select features Figure select_feature_dot_plot.pdf Dotplot showing the expression of user-defined features at the cluster level Visualize select features Figure select_feature_violin_plot.pdf Violin plot showing the expression of user-defined features at the cluster level Visualize select features Figure select_feature_feature_plot.pdf UMAP plots showing the expression of user-defined features at the cell level General Info meta_info_seu_step7.txt Text file showing the column names of the Seurat object metadata General Info sessionInfo_marker.txt Session information for the R session Cluster marker GSEA (Method 1) Info cluster_just_genes.xlsx Excel file showing the marker genes for each cluster Cluster marker GSEA (Method 1) Info cluster_whole.xlsx Excel file showing the marker genes and corresponding summary statistics for each cluster Cluster marker GSEA (Method 1) Info ClusterMarkers.csv csv file showing the marker genes and corresponding summary statistics for each cluster Cluster marker GSEA (Method 1) Info top_sel.csv csv file showing the top n marker genes for each cluster. The user defined n in the execution parameters Cluster marker GSEA (Method 1) Info Er.genes.csv Enrichment terms and the corresponding statistics for a particular cluster and cell type library Module score (Method 2) Info geneset_by_cluster.csv Mean module score across clusters for each user-defined gene set General Data object seu_step7.rds Intermediate Seurat RDS object Cluster marker GSEA (Method 1) Data object ClusterMarkers.rds RDS object containing the marker genes for each cluster Step 8: Differential gene expression contrasts","title":"- Outputs"},{"location":"outputs/#outputs-of-each-analytical-step-in-the-scrnabox-pipeline","text":"Standard scRNAseq Analysis Track Cell Hashtag scRNAseq Analysis Track","title":"Outputs of each Analytical Step in the scRNAbox pipeline"},{"location":"outputs/#standard-scrnaseq-analysis-track","text":"","title":"Standard scRNAseq Analysis Track"},{"location":"outputs/#step-1-fastq-pre-processing","text":"All of the outputs of the CellRanger counts pipeline are produced. For more information on the outputs, please visit the CellRanger documentation .","title":"Step 1: FASTQ pre-processing"},{"location":"outputs/#step-2-ambient-rna-removal-and-create-seurat-object","text":"Output type Name Description Figure vioplot_sample_name.png Sample-specific violin plot showing the distribution of cells according to QC metrics Info sample_name_RNA.txt Sample-specific sparse matrix of RNA assay Info MetaData_sample_name.txt Sample-specific dataframe showing the Seurat object metadata Info meta_info_sample_name.txt Sample-specific text file showing the column names of the Seurat object metadata Info summary_sample_name.txt Sample-specific text file showing the summary of QC metrics (Minimum, 1st Quartile, Median, Mean, 3rd Quartile, Maximum) Info sessionInfo.txt Session information for the R session Data object sample_name.rds Sample-specific intermediate Seurat RDS object","title":"Step 2: Ambient RNA removal and create Seurat object"},{"location":"outputs/#step-3-quality-control-and-filtering","text":"Output type Name Description Figure cellcycle_sample_name.png Sample-specific violin plot showing the distribution of cells according to cell cycle S and G2M scores Figure dimplot_pca_sample_name.png Sample-specific PCA showing the first two PCs Figure dimplot_umap_sample_name.png Sample-specific UMAP Figure QC_vioplot_sample_name.png Sample-specific violin plot showing the distribution of cells according to QC metrics after filtering Figure VariableFeaturePlot_sample_name.png Sample-specific figure showing the most variably expressed genes Info sample_name_RNA.txt Sample-specific sparse matrix of RNA assay Info MetaData_sample_name.txt Sample-specific dataframe showing the Seurat object metadata Info meta_info_sample_name.txt Sample-specific text file showing the column names of the Seurat object metadata Info most_variable_genes_sample_name.txt Sample-specific text file showing the column names of the Seurat object metadata Info summary_sample_name.txt Sample-specific text file showing the summary of QC metrics (Minimum, 1st Quartile, Median, Mean, 3rd Quartile, Maximum) Info sessionInfo.txt Session information for the R session Data object sample_name.rds Sample-specific intermediate Seurat RDS object","title":"Step 3: Quality control and filtering"},{"location":"outputs/#step-4-doublet-removal","text":"Output type Name Description Figure sample_nameDF.classifications.png Sample-specific UMAP plot showing droplet classifications (singlet or doublet) Info sample_name_RNA.txt Sample-specific sparse matrix of RNA assay Info MetaData_sample_name.txt Sample-specific dataframe showing the Seurat object metadata Info meta_info_sample_name.txt Sample-specific text file showing the column names of the Seurat object metadata Info sessionInfo.txt Session information for the R session Data object sample_name.rds Sample-specific intermediate Seurat RDS object","title":"Step 4: Doublet removal"},{"location":"outputs/#step-5-integration-and-linear-dimensional-reduction","text":"Output type Name Description Figure DimPlot_pca.png PCA showing the first two PCs, colour-coded by sample Figure DimPlot_umap.png UMAP, colour-coded by sample Figure elbow.png Elbow plot to visualize the percentage of variance explained by each PC Figure Jackstraw_plot.png Jackstraw plot to visualize the distribution of p-values for each PC Info seu_int_RNA.txt Sparse matrix of integrated assay Info seu_int_MetaData.txt Dataframe showing the Seurat object metadata Info meta_info_seu_step5.csv Text file showing the column names of the Seurat object metadata Info sessionInfo.txt Session information for the R session Data object seu_step5.rds Integrated intermediate Seurat RDS object","title":"Step 5: Integration and linear dimensional reduction"},{"location":"outputs/#step-6-clustering","text":"Output type Name Description Figure clustree_int.png Clustree plot showing the stability across the user-defied clustering resolutions Figure integrated_snn_res.png UMAP at the user defined clustering-resolution Figure ARI.png Mean and standard deviation of the Adjusted Rand Index (ARI) between clustering pairs at a user-defined resolution Info test.xlsx Excel file showing the mean and standard deviation of the ARI between clustering pairs at a user-defined resolution Info seu_RNA.txt Sparse matrix of integrated assay Info seu_MetaData.txt Dataframe showing the Seurat object metadata Info meta_info.csv Text file showing the column names of the Seurat object metadata Info sessionInfo.txt Session information for the R session Data object seu_step6.rds Intermediate Seurat RDS object","title":"Step 6: Clustering"},{"location":"outputs/#step-7-cluster-annotation","text":"Cluster annotation method Output type Name Description General Figure umap.pdf UMAP plot of integrated assay at the user-defined clustering resolution used for cluster annotation General Figure umap_splitted.pdf UMAP plot of integrated assay at the user-defined clustering resolution used for cluster annotation, split by sample Cluster marker GSEA (Method 1) Figure heatmap.pdf Heatmap showing the expression of the top marker genes across cells, stratified by cluster Cluster marker GSEA (Method 1) Figure plotenrich.pdf Barplot showing the 20 most enriched terms for a particular cluster and cell type library Module score (Method 2) Figure module_score_gene_set.png UMAP plot showing the module score across cells for user-defined gene sets Reference-based annotations (Method 3) Figure UMAP_transferred_labels.pdf UMAP plots showing the cluster annotations from the reference Seurat object projected onto the query Seurat object Visualize select features Figure select_feature_dot_plot.pdf Dotplot showing the expression of user-defined features at the cluster level Visualize select features Figure select_feature_violin_plot.pdf Violin plot showing the expression of user-defined features at the cluster level Visualize select features Figure select_feature_feature_plot.pdf UMAP plots showing the expression of user-defined features at the cell level General Info meta_info_seu_step7.txt Text file showing the column names of the Seurat object metadata General Info sessionInfo_marker.txt Session information for the R session Cluster marker GSEA (Method 1) Info cluster_just_genes.xlsx Excel file showing the marker genes for each cluster Cluster marker GSEA (Method 1) Info cluster_whole.xlsx Excel file showing the marker genes and corresponding summary statistics for each cluster Cluster marker GSEA (Method 1) Info ClusterMarkers.csv csv file showing the marker genes and corresponding summary statistics for each cluster Cluster marker GSEA (Method 1) Info top_sel.csv csv file showing the top n marker genes for each cluster. The user defined n in the execution parameters Cluster marker GSEA (Method 1) Info Er.genes.csv Enrichment terms and the corresponding statistics for a particular cluster and cell type library Module score (Method 2) Info geneset_by_cluster.csv Mean module score across clusters for each user-defined gene set General Data object seu_step7.rds Intermediate Seurat RDS object Cluster marker GSEA (Method 1) Data object ClusterMarkers.rds RDS object containing the marker genes for each cluster","title":"Step 7: Cluster annotation"},{"location":"outputs/#step-8-differential-gene-expression-contrasts","text":"","title":"Step 8: Differential gene expression contrasts"},{"location":"outputs/#cell-hashtag-scrnaseq-analysis-track","text":"","title":"Cell Hashtag scRNAseq Analysis Track"},{"location":"outputs/#step-1-fastq-pre-processing_1","text":"All of the outputs of the CellRanger counts pipeline are produced. For more information on the outputs, please visit the CellRanger documentation .","title":"Step 1: FASTQ pre-processing"},{"location":"outputs/#step-2-ambient-rna-removal-and-create-seurat-object_1","text":"Output type Name Description Figure vioplot_sample_name.png Sample-specific violin plot showing the distribution of cells according to QC metrics Info sample_name_RNA.txt Sample-specific sparse matrix of RNA assay Info MetaData_sample_name.txt Sample-specific dataframe showing the Seurat object metadata Info meta_info_sample_name.txt Sample-specific text file showing the column names of the Seurat object metadata Info summary_sample_name.txt Sample-specific text file showing the summary of QC metrics (Minimum, 1st Quartile, Median, Mean, 3rd Quartile, Maximum) Info sessionInfo.txt Session information for the R session Data object sample_name.rds Sample-specific intermediate Seurat RDS object","title":"Step 2: Ambient RNA removal and create Seurat object"},{"location":"outputs/#step-3-quality-control-and-filtering_1","text":"Output type Name Description Figure cellcycle_sample_name.png Sample-specific violin plot showing the distribution of cells according to cell cycle S and G2M scores Figure dimplot_pca_sample_name.png Sample-specific PCA showing the first two PCs Figure dimplot_umap_sample_name.png Sample-specific UMAP Figure QC_vioplot_sample_name.png Sample-specific violin plot showing the distribution of cells according to QC metrics after filtering Figure VariableFeaturePlot_sample_name.png Sample-specific figure showing the most variably expressed genes Info sample_name_RNA.txt Sample-specific sparse matrix of RNA assay Info MetaData_sample_name.txt Sample-specific dataframe showing the Seurat object metadata Info meta_info_sample_name.txt Sample-specific text file showing the column names of the Seurat object metadata Info most_variable_genes_sample_name.txt Sample-specific text file showing the column names of the Seurat object metadata Info summary_sample_name.txt Sample-specific text file showing the summary of QC metrics (Minimum, 1st Quartile, Median, Mean, 3rd Quartile, Maximum) Info sessionInfo.txt Session information for the R session Data object sample_name.rds Sample-specific intermediate Seurat RDS object","title":"Step 3: Quality control and filtering"},{"location":"outputs/#step-4-demultiplexing-and-doublet-removal","text":"","title":"Step 4: Demultiplexing and doublet removal"},{"location":"outputs/#step-5-integration-and-linear-dimensional-reduction_1","text":"Output type Name Description Figure DimPlot_pca.png PCA showing the first two PCs, colour-coded by sample Figure DimPlot_umap.png UMAP, colour-coded by sample Figure elbow.png Elbow plot to visualize the percentage of variance explained by each PC Figure Jackstraw_plot.png Jackstraw plot to visualize the distribution of p-values for each PC Info seu_int_RNA.txt Sparse matrix of integrated assay Info seu_int_MetaData.txt Dataframe showing the Seurat object metadata Info meta_info_seu_step5.csv Text file showing the column names of the Seurat object metadata Info sessionInfo.txt Session information for the R session Data object seu_step5.rds Integrated intermediate Seurat RDS object","title":"Step 5: Integration and linear dimensional reduction"},{"location":"outputs/#step-6-clustering_1","text":"Output type Name Description Figure clustree_int.png Clustree plot showing the stability across the user-defied clustering resolutions Figure integrated_snn_res.png UMAP at the user defined clustering-resolution Figure ARI.png Mean and standard deviation of the Adjusted Rand Index (ARI) between clustering pairs at a user-defined resolution Info test.xlsx Excel file showing the mean and standard deviation of the ARI between clustering pairs at a user-defined resolution Info seu_RNA.txt Sparse matrix of integrated assay Info seu_MetaData.txt Dataframe showing the Seurat object metadata Info meta_info.csv Text file showing the column names of the Seurat object metadata Info sessionInfo.txt Session information for the R session Data object seu_step6.rds Intermediate Seurat RDS object","title":"Step 6: Clustering"},{"location":"outputs/#step-7-cluster-annotation_1","text":"Cluster annotation method Output type Name Description General Figure umap.pdf UMAP plot of integrated assay at the user-defined clustering resolution used for cluster annotation General Figure umap_splitted.pdf UMAP plot of integrated assay at the user-defined clustering resolution used for cluster annotation, split by sample Cluster marker GSEA (Method 1) Figure heatmap.pdf Heatmap showing the expression of the top marker genes across cells, stratified by cluster Cluster marker GSEA (Method 1) Figure plotenrich.pdf Barplot showing the 20 most enriched terms for a particular cluster and cell type library Module score (Method 2) Figure module_score_gene_set.png UMAP plot showing the module score across cells for user-defined gene sets Reference-based annotations (Method 3) Figure UMAP_transferred_labels.pdf UMAP plots showing the cluster annotations from the reference Seurat object projected onto the query Seurat object Visualize select features Figure select_feature_dot_plot.pdf Dotplot showing the expression of user-defined features at the cluster level Visualize select features Figure select_feature_violin_plot.pdf Violin plot showing the expression of user-defined features at the cluster level Visualize select features Figure select_feature_feature_plot.pdf UMAP plots showing the expression of user-defined features at the cell level General Info meta_info_seu_step7.txt Text file showing the column names of the Seurat object metadata General Info sessionInfo_marker.txt Session information for the R session Cluster marker GSEA (Method 1) Info cluster_just_genes.xlsx Excel file showing the marker genes for each cluster Cluster marker GSEA (Method 1) Info cluster_whole.xlsx Excel file showing the marker genes and corresponding summary statistics for each cluster Cluster marker GSEA (Method 1) Info ClusterMarkers.csv csv file showing the marker genes and corresponding summary statistics for each cluster Cluster marker GSEA (Method 1) Info top_sel.csv csv file showing the top n marker genes for each cluster. The user defined n in the execution parameters Cluster marker GSEA (Method 1) Info Er.genes.csv Enrichment terms and the corresponding statistics for a particular cluster and cell type library Module score (Method 2) Info geneset_by_cluster.csv Mean module score across clusters for each user-defined gene set General Data object seu_step7.rds Intermediate Seurat RDS object Cluster marker GSEA (Method 1) Data object ClusterMarkers.rds RDS object containing the marker genes for each cluster","title":"Step 7: Cluster annotation"},{"location":"outputs/#step-8-differential-gene-expression-contrasts_1","text":"","title":"Step 8: Differential gene expression contrasts"},{"location":"reference/","text":"Adjustable execution parameters for the scRNAbox pipeline Standard scRNAseq Analysis Track Cell Hashtag scRNAseq Analysis Track Standard scRNAseq Analysis Track Step 1: FASTQ pre-processing Parameter Default Description REF_DIR_GRCH NULL Path to reference genome for FASTQ alignment. 10X Genomics reference genomes are available for download. For more information see their documentation . R1LENGTH NULL Minimum number of bases to retain for R1 sequence of gene expression MEMPERCORE 30 For clusters whose job managers do not support memory requests, it is possible to request memory in the form of cores. This option will scale up the number of threads requested via the MRO_THREADS variable according to how much memory a stage requires when given to the ratio of memory on your nodes. Step 2: Ambient RNA removal and create Seurat object Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_ambient_RNA Yes Whether or not to correct the feature-barcode expression matrices for ambient RNA contamination par_count_matrices NULL If users skipped Step 1, the may provide the path to a directory that contains existing feature-barcode expression matrices to initiate the pipeline at Step 2 par_min.cells_L 0 Only retain genes expressed in a minimum number of cells par_min.features_L 0 Only retain cells expressing a minimum number of genes Step 3: Quality control and filtering Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_seurat_object NULL If users skipped Steps 1 and 2, the may provide the path to a directory that contains existing Seurat objects to initiate the pipeline at Step 3 par_nFeature_RNA_L NULL Only retain cells expressing a minimum number of genes par_nFeature_RNA_U NULL Only retain cells expressing a maximum number of genes par_nCount_RNA_L NULL Only retain cells with a minimum number of unique transcripts par_nCount_RNA_U NULL Only retain cells with a maximum number of unique transcripts par_mitochondria_percent_L NULL Only retain cells with a minimum percentage of mitochondrial genes par_mitochondria_percent_U NULL Only retain cells with a maximum percentage of mitochondrial genes par_ribosomal_percent_L NULL Only retain cells with a minimum percentage of ribosomal genes par_ribosomal_percent_U NULL Only retain cells with a maximum percentage of ribosomal genes par_log10GenesPerUMI_L NULL Only retain cells with a minimum number of genes per unique molecular identifier par_log10GenesPerUMI_U NULL Only retain cells with a maximum number of genes per unique molecular identifier par_remove_mitochondrial_genes Yes Whether or not to remove mitochondrial genes par_remove_ribosomal_genes Yes Whether or not to remove ribosomal genes par_remove_genes NULL If users want to remove specific genes from their data, they may define a list of gene identifiers par_normalization.method LogNormalize Method to use for normalization par_scale.factor 10000 Scale factor for scaling the data par_selection.method vst Method for choosing the top variable features par_nfeatures 2500 Number of features to select as top variable features par_top 10 Number of most variable features to be reported in the csv file par_npcs_pca 30 Total Number of principal components to compute and store for principal component analysis (PCA) par_cells 500 Number of cells to include in Seurat's dimheatmap function par_dims 12 Number of dimensions to include in Seurat's dimheatmap function par_dims_umap 10 Number of dimensions to use as input features for uniform manifold approximation and projection (UMAP) par_n.neighbors 65 Number of neighboring points to use in local approximations of manifold structure Step 4: Doublet removal Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_dropDN Yes Whether or not to remove predicted doublets from downstream analyses par_PCs 20 The number of statistically significant principal components. Can be informed by elbow plot produced in Step 3 par_pN 0.25 The number of artificial doublets to generate. DoubletFinderr is largely invariant to this parameter. We suggest keeping 0.25 par_sct FALSE Logical representing whether SCTransform was used during original Seurat object pre-processing par_sample_names NULL A list of sample names for each sample in the experiement, corresponding to the expected doublet rates listed in the parameter below. Sample names should be the same as those used to produce the samples_info folder during the setup procedures. par_expected_doublet_rate NULL A list of expected doublet rates for each sample, corresponding to the sample names listed in the above parameter Step 5: Integration and linear dimensional reduction Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_skip_integration No Whether or not to skip integration. This is applicable for experiments that comprises of only one sequencing run. par_FindIntegrationAnchors_dim 25 Which dimensions to use from the canonical correlation analysis (CCA) to specify the neighbor search space par_DefaultAssay RNA The assay to perform normalization, scaling, and linear dimensiona reduction on. For most use cases this will be RNA. par_normalization.method LogNormalize Method to use for normalization par_selection.method vst Method for detecting top variable features par_nfeatures 2500 Number of features to select as top variable features par_RunUMAP_n.neighbors 65 Number of neighboring points used in local approximations of manifold structure par_RunPCA_npcs 30 Total Number of principal components to compute and store for principal component analysis (PCA) par_RunUMAP_dims 10 Number of dimensions to use as input features for uniform manifold approximation and projection (UMAP) par_compute_jackstraw No Whether or not to perform JackStraw computation. This computation takes a long time. Step 6: Clustering Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_skip_step5 No Whether or not the user skipped integration in Step 5 par_FindNeighbors_dims 30 Number of dimensions from linear dimensional reduction used as input to identify neighbours. Can be informed by the elbow and Jackstraw plots produced in Step 5 par_FindNeighbors_k.param 60 Defines k for the k-nearest neighbor algorithm par_FindNeighbors_prune.SNN 1/15 Sets the cutoff for acceptable Jaccard index when computing the neighborhood overlap for the shared nearest-neighbour (SNN) construction par_FindClusters_resolution 0.1 to 0.9, in intervals of 0.1 Value of the clustering resolution parameter. You may provide multiple resolution values par_compute_ARI Yes Whether or not you want to compute the Adjusted Rand Index (ARI) between clusters at a given clustering resolution par_RI_reps 100 Number of iterations for clustering the data at a given resolution in order to calculate the ARI Step 7: Cluster annotation Parameter Default Description (the cluster annotation method associated with the parameter is shown) par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_level_cluster integrated_snn_res.0.7 The cluster resolution that you want to use for downstream analyses. If you skipped integration in Step 5, use par_level_cluster='RNA_snn_res.0.7', if you want to proceed with a clustering resolution of 0.7 par_top_sel 5 Method 1: Number of top markers to identify based on avg_log2FC par_db Descartes_Cell_Types_and_Tissue_2021, CellMarker_Augmented_2021, Azimuth_Cell_Types_2021 Method 1: Character vector of EnrichR databases that define cell types. The top marker genes for each cluster will be tested for enrichment across these databases. par_compute_module_score Yes Method 2: Whether or not to perform the module score computation par_compute_module_score Yes Method 2: Whether or not to perform the module score computation par_module_score NULL Method 2: Path defining the location of the directory that contains the csv file of the gene sets used to compute the module score par_reference NULL Method 3: Path defining the location of the reference Seurat object par_level_celltype NULL Method 3: The name of the metadata column in the reference Seurat object that defines cell types par_FindTransferAnchors_dim 10 Method 3: Number of dimensions from linear dimensional reduction used to find transfer anchors between the reference and query Seurat objects par_futureglobalsmaxSize 50000 * 1024^2 Method 3: This will increase your RAM usage so set this number mindfully par_visualize_select_features No Visualize select features: Whether or not to visualize select features par_select_features NULL Visualize select features: list of gene identifiers to visualize the expression of select features Step 8: Differential gene expression contrasts Parameter Default Description (the cluster annotation method associated with the parameter is shown) par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_level_cluster integrated_snn_res.0.7 The cluster resolution that you used in the cluster annotation module. If you skipped integration in Step 5, use par_level_cluster='RNA_snn_res.0.7', if you want to proceed with a clustering resolution of 0.7 par_step8_clus_label NULL List of user-currated cluster labels obtained from the annotation module. Make sure to have the same number of labels as clusters at the desired clustering resolution. par_new_genotype yes Whether or not you want to add new sample labels to simplify the contrasts. For example, you may wish to set both control1 and control2 as control. par_old_sample_label NULL list of old sample labels (i.e. those used to create the samples_info folder in the setup procedures) par_new_sample_label NULL list of new sample labels corresponding to the old sample labels defined in the parameter above Cell Hashtag scRNAseq Analysis Track Step 1: FASTQ pre-processing Parameter Default Description REF_DIR_GRCH NULL Path to reference genome for FASTQ alignment. 10X Genomics reference genomes are available for download. For more information see their documentation . R1LENGTH NULL Minimum number of bases to retain for R1 sequence of gene expression MEMPERCORE 30 For clusters whose job managers do not support memory requests, it is possible to request memory in the form of cores. This option will scale up the number of threads requested via the MRO_THREADS variable according to how much memory a stage requires when given to the ratio of memory on your nodes. Step 2: Ambient RNA removal and create Seurat object Parameter Default Description Save_RNA No Whether or not to export an RNA expression matrix Save_metadata No Whether or not to export a metadata dataframe count_matrices NULL If users skipped Step 1, the may provide the path to a directory that contains existing feature-barcode expression matrices to initiate the pipeline at Step 2 min.cells_L 0 Only retain genes expressed in a minimum number of cells min.features_L 0 Only retain cells expressing a minimum number of genes Step 3: Quality control and filtering Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_seurat_object NULL If users skipped Steps 1 and 2, the may provide the path to a directory that contains existing Seurat objects to initiate the pipeline at Step 3 par_nFeature_RNA_L NULL Only retain cells expressing a minimum number of genes par_nFeature_RNA_U NULL Only retain cells expressing a maximum number of genes par_nCount_RNA_L NULL Only retain cells with a minimum number of unique transcripts par_nCount_RNA_U NULL Only retain cells with a maximum number of unique transcripts par_mitochondria_percent_L NULL Only retain cells with a minimum percentage of mitochondrial genes par_mitochondria_percent_U NULL Only retain cells with a maximum percentage of mitochondrial genes par_ribosomal_percent_L NULL Only retain cells with a minimum percentage of ribosomal genes par_ribosomal_percent_U NULL Only retain cells with a maximum percentage of ribosomal genes par_log10GenesPerUMI_L NULL Only retain cells with a minimum number of genes per unique molecular identifier par_log10GenesPerUMI_U NULL Only retain cells with a maximum number of genes per unique molecular identifier par_remove_mitochondrial_genes Yes Whether or not to remove mitochondrial genes par_remove_ribosomal_genes Yes Whether or not to remove ribosomal genes par_remove_genes NULL If users want to remove specific genes from their data, they may define a list of gene identifiers par_normalization.method LogNormalize Method to use for normalization par_scale.factor 10000 Scale factor for scaling the data par_selection.method vst Method for choosing the top variable features par_nfeatures 2500 Number of features to select as top variable features par_top 10 Number of most variable features to be reported in the csv file par_npcs_pca 30 Total Number of principal components to compute and store for principal component analysis (PCA) par_cells 500 Number of cells to include in Seurat's dimheatmap function par_dims 12 Number of dimensions to include in Seurat's dimheatmap function par_dims_umap 10 Number of dimensions to use as input features for uniform manifold approximation and projection (UMAP) par_n.neighbors 65 Number of neighboring points to use in local approximations of manifold structure Step 4: Doublet removal Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_normalization.method CLR Method for normalizing the HTO assay par_scale.factor 1000 Scale factor for scaling the HTO assay par_selection.method vst Method for selecting the most variable features in the HTO assay par_nfeatures 5 Number of features to select as top variable features for the HTO assay. This value is dependent on the number of sample specific barcodes used in the experiment par_dims_umap 5 Number of dimensions to use as input features for uniform manifold approximation and projection (UMAP) of HTO assay par_n.neighbor 65 Number of neighboring points to use in local approximations of manifold structure par_dimensionality_reduction Yes Whether or not to perform linear dimensionality reduction on the HTO assay par_npcs_pca 30 Total Number of principal components to compute and store for principal component analysis (PCA) of HTO assay par_dropDN Yes Whether or not to remove predicted doublets and negatives from downstream analyses par_label_dropDN Doublet, Negative Labels used to identify doublet and negative droplets par_quantile 0.9 The quantile to use for droplet classification using MULTIseqDemux par_autoThresh TRUE Whether or not to perform automated threshold finding to define the best quantile for droplet classification using MULTIseqDemux par_maxiter 5 Maximum number of iterations to use if autoThresh = TRUE par_RidgePlot_ncol 3 Number of columns used to display RidgePlots, which visualizes the enrichment of barcode labels across samples par_old_antibody_label NULL If you wish to rename the barcode labels, first list the existing barcode labels in this parameter. old antibody labels can be identified in the \"_old_antibody_label_MULTIseqDemuxHTOcounts\" file produced by running Step 4 msd par_new_antibody_label NULL If you wish to rename the barcode labels, list the new labels corresponding to the old labels listed in the parameter above Step 5: Integration and linear dimensional reduction Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_skip_integration No Whether or not to skip integration. This is applicable for experiments that comprises of only one sequencing run. par_FindIntegrationAnchors_dim 25 Which dimensions to use from the canonical correlation analysis (CCA) to specify the neighbor search space par_DefaultAssay RNA The assay to perform normalization, scaling, and linear dimensiona reduction on. For most use cases this will be RNA. par_normalization.method LogNormalize Method to use for normalization par_scale.factor 1000 Scale factor for scaling the data par_selection.method vst Method for detecting top variable features par_nfeatures 2500 Number of features to select as top variable features par_RunUMAP_n.neighbors 65 Number of neighboring points used in local approximations of manifold structure par_RunPCA_npcs 30 Total Number of principal components to compute and store for principal component analysis (PCA) par_RunUMAP_dims 10 Number of dimensions to use as input features for uniform manifold approximation and projection (UMAP) par_compute_jackstraw No Whether or not to perform JackStraw computation. This computation takes a long time. Step 6: Clustering Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_skip_step5 No Whether or not the user skipped integration in Step 5 par_FindNeighbors_dims 30 Number of dimensions from linear dimensional reduction used as input to identify neighbours. Can be informed by the elbow and Jackstraw plots produced in Step 5 par_FindNeighbors_k.param 60 Defines k for the k-nearest neighbor algorithm par_FindNeighbors_prune.SNN 1/15 Sets the cutoff for acceptable Jaccard index when computing the neighborhood overlap for the shared nearest-neighbour (SNN) construction par_FindClusters_resolution 0.1 to 0.9, in intervals of 0.1 Value of the clustering resolution parameter. You may provide multiple resolution values par_compute_ARI Yes Whether or not you want to compute the Adjusted Rand Index (ARI) between clusters at a given clustering resolution par_RI_reps 100 Number of iterations for clustering the data at a given resolution in order to calculate the ARI Step 7: Cluster annotation Parameter Default Description (the cluster annotation method associated with the parameter is shown) par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_level_cluster integrated_snn_res.0.7 The cluster resolution that you want to use for downstream analyses. If you skipped integration in Step 5, use par_level_cluster='RNA_snn_res.0.7', if you want to proceed with a clustering resolution of 0.7 par_level_genotype MULTI_ID_Lables Name of the metadata column in your Seurat object that describes the sample names par_top_sel 5 Method 1: Number of top markers to identify based on avg_log2FC par_db Descartes_Cell_Types_and_Tissue_2021, CellMarker_Augmented_2021, Azimuth_Cell_Types_2021 Method 1: Character vector of EnrichR databases that define cell types. The top marker genes for each cluster will be tested for enrichment across these databases. par_compute_module_score Yes Method 2: Whether or not to perform the module score computation par_compute_module_score Yes Method 2: Whether or not to perform the module score computation par_module_score NULL Method 2: Path defining the location of the directory that contains the csv file of the gene sets used to compute the module score par_reference NULL Method 3: Path defining the location of the reference Seurat object par_level_celltype NULL Method 3: The name of the metadata column in the reference Seurat object that defines cell types par_FindTransferAnchors_dim 10 Method 3: Number of dimensions from linear dimensional reduction used to find transfer anchors between the reference and query Seurat objects par_futureglobalsmaxSize 50000 * 1024^2 Method 3: This will increase your RAM usage so set this number mindfully par_visualize_select_features No Visualize select features: Whether or not to visualize select features par_select_features NULL Visualize select features: list of gene identifiers to visualize the expression of select features Step 8: Differential gene expression contrasts Parameter Default Description (the cluster annotation method associated with the parameter is shown) par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_level_cluster integrated_snn_res.0.7 The cluster resolution that you used in the cluster annotation module. If you skipped integration in Step 5, use par_level_cluster='RNA_snn_res.0.7', if you want to proceed with a clustering resolution of 0.7 par_step8_clus_label NULL List of user-currated cluster labels obtained from the annotation module. Make sure to have the same number of labels as clusters at the desired clustering resolution. par_new_genotype yes Whether or not you want to add new sample labels to simplify the contrasts. For example, you may wish to set both control1 and control2 as control. par_old_antibody_label NULL list of old sample labels (i.e. those used to create the samples_info folder in the setup procedures) par_new_antibody_label NULL list of new sample labels corresponding to the old sample labels defined in the parameter above","title":"- Execution parameters"},{"location":"reference/#adjustable-execution-parameters-for-the-scrnabox-pipeline","text":"Standard scRNAseq Analysis Track Cell Hashtag scRNAseq Analysis Track","title":"Adjustable execution parameters for the scRNAbox pipeline"},{"location":"reference/#standard-scrnaseq-analysis-track","text":"","title":"Standard scRNAseq Analysis Track"},{"location":"reference/#step-1-fastq-pre-processing","text":"Parameter Default Description REF_DIR_GRCH NULL Path to reference genome for FASTQ alignment. 10X Genomics reference genomes are available for download. For more information see their documentation . R1LENGTH NULL Minimum number of bases to retain for R1 sequence of gene expression MEMPERCORE 30 For clusters whose job managers do not support memory requests, it is possible to request memory in the form of cores. This option will scale up the number of threads requested via the MRO_THREADS variable according to how much memory a stage requires when given to the ratio of memory on your nodes.","title":"Step 1: FASTQ pre-processing"},{"location":"reference/#step-2-ambient-rna-removal-and-create-seurat-object","text":"Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_ambient_RNA Yes Whether or not to correct the feature-barcode expression matrices for ambient RNA contamination par_count_matrices NULL If users skipped Step 1, the may provide the path to a directory that contains existing feature-barcode expression matrices to initiate the pipeline at Step 2 par_min.cells_L 0 Only retain genes expressed in a minimum number of cells par_min.features_L 0 Only retain cells expressing a minimum number of genes","title":"Step 2: Ambient RNA removal and create Seurat object"},{"location":"reference/#step-3-quality-control-and-filtering","text":"Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_seurat_object NULL If users skipped Steps 1 and 2, the may provide the path to a directory that contains existing Seurat objects to initiate the pipeline at Step 3 par_nFeature_RNA_L NULL Only retain cells expressing a minimum number of genes par_nFeature_RNA_U NULL Only retain cells expressing a maximum number of genes par_nCount_RNA_L NULL Only retain cells with a minimum number of unique transcripts par_nCount_RNA_U NULL Only retain cells with a maximum number of unique transcripts par_mitochondria_percent_L NULL Only retain cells with a minimum percentage of mitochondrial genes par_mitochondria_percent_U NULL Only retain cells with a maximum percentage of mitochondrial genes par_ribosomal_percent_L NULL Only retain cells with a minimum percentage of ribosomal genes par_ribosomal_percent_U NULL Only retain cells with a maximum percentage of ribosomal genes par_log10GenesPerUMI_L NULL Only retain cells with a minimum number of genes per unique molecular identifier par_log10GenesPerUMI_U NULL Only retain cells with a maximum number of genes per unique molecular identifier par_remove_mitochondrial_genes Yes Whether or not to remove mitochondrial genes par_remove_ribosomal_genes Yes Whether or not to remove ribosomal genes par_remove_genes NULL If users want to remove specific genes from their data, they may define a list of gene identifiers par_normalization.method LogNormalize Method to use for normalization par_scale.factor 10000 Scale factor for scaling the data par_selection.method vst Method for choosing the top variable features par_nfeatures 2500 Number of features to select as top variable features par_top 10 Number of most variable features to be reported in the csv file par_npcs_pca 30 Total Number of principal components to compute and store for principal component analysis (PCA) par_cells 500 Number of cells to include in Seurat's dimheatmap function par_dims 12 Number of dimensions to include in Seurat's dimheatmap function par_dims_umap 10 Number of dimensions to use as input features for uniform manifold approximation and projection (UMAP) par_n.neighbors 65 Number of neighboring points to use in local approximations of manifold structure","title":"Step 3: Quality control and filtering"},{"location":"reference/#step-4-doublet-removal","text":"Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_dropDN Yes Whether or not to remove predicted doublets from downstream analyses par_PCs 20 The number of statistically significant principal components. Can be informed by elbow plot produced in Step 3 par_pN 0.25 The number of artificial doublets to generate. DoubletFinderr is largely invariant to this parameter. We suggest keeping 0.25 par_sct FALSE Logical representing whether SCTransform was used during original Seurat object pre-processing par_sample_names NULL A list of sample names for each sample in the experiement, corresponding to the expected doublet rates listed in the parameter below. Sample names should be the same as those used to produce the samples_info folder during the setup procedures. par_expected_doublet_rate NULL A list of expected doublet rates for each sample, corresponding to the sample names listed in the above parameter","title":"Step 4: Doublet removal"},{"location":"reference/#step-5-integration-and-linear-dimensional-reduction","text":"Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_skip_integration No Whether or not to skip integration. This is applicable for experiments that comprises of only one sequencing run. par_FindIntegrationAnchors_dim 25 Which dimensions to use from the canonical correlation analysis (CCA) to specify the neighbor search space par_DefaultAssay RNA The assay to perform normalization, scaling, and linear dimensiona reduction on. For most use cases this will be RNA. par_normalization.method LogNormalize Method to use for normalization par_selection.method vst Method for detecting top variable features par_nfeatures 2500 Number of features to select as top variable features par_RunUMAP_n.neighbors 65 Number of neighboring points used in local approximations of manifold structure par_RunPCA_npcs 30 Total Number of principal components to compute and store for principal component analysis (PCA) par_RunUMAP_dims 10 Number of dimensions to use as input features for uniform manifold approximation and projection (UMAP) par_compute_jackstraw No Whether or not to perform JackStraw computation. This computation takes a long time.","title":"Step 5: Integration and linear dimensional reduction"},{"location":"reference/#step-6-clustering","text":"Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_skip_step5 No Whether or not the user skipped integration in Step 5 par_FindNeighbors_dims 30 Number of dimensions from linear dimensional reduction used as input to identify neighbours. Can be informed by the elbow and Jackstraw plots produced in Step 5 par_FindNeighbors_k.param 60 Defines k for the k-nearest neighbor algorithm par_FindNeighbors_prune.SNN 1/15 Sets the cutoff for acceptable Jaccard index when computing the neighborhood overlap for the shared nearest-neighbour (SNN) construction par_FindClusters_resolution 0.1 to 0.9, in intervals of 0.1 Value of the clustering resolution parameter. You may provide multiple resolution values par_compute_ARI Yes Whether or not you want to compute the Adjusted Rand Index (ARI) between clusters at a given clustering resolution par_RI_reps 100 Number of iterations for clustering the data at a given resolution in order to calculate the ARI","title":"Step 6: Clustering"},{"location":"reference/#step-7-cluster-annotation","text":"Parameter Default Description (the cluster annotation method associated with the parameter is shown) par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_level_cluster integrated_snn_res.0.7 The cluster resolution that you want to use for downstream analyses. If you skipped integration in Step 5, use par_level_cluster='RNA_snn_res.0.7', if you want to proceed with a clustering resolution of 0.7 par_top_sel 5 Method 1: Number of top markers to identify based on avg_log2FC par_db Descartes_Cell_Types_and_Tissue_2021, CellMarker_Augmented_2021, Azimuth_Cell_Types_2021 Method 1: Character vector of EnrichR databases that define cell types. The top marker genes for each cluster will be tested for enrichment across these databases. par_compute_module_score Yes Method 2: Whether or not to perform the module score computation par_compute_module_score Yes Method 2: Whether or not to perform the module score computation par_module_score NULL Method 2: Path defining the location of the directory that contains the csv file of the gene sets used to compute the module score par_reference NULL Method 3: Path defining the location of the reference Seurat object par_level_celltype NULL Method 3: The name of the metadata column in the reference Seurat object that defines cell types par_FindTransferAnchors_dim 10 Method 3: Number of dimensions from linear dimensional reduction used to find transfer anchors between the reference and query Seurat objects par_futureglobalsmaxSize 50000 * 1024^2 Method 3: This will increase your RAM usage so set this number mindfully par_visualize_select_features No Visualize select features: Whether or not to visualize select features par_select_features NULL Visualize select features: list of gene identifiers to visualize the expression of select features","title":"Step 7: Cluster annotation"},{"location":"reference/#step-8-differential-gene-expression-contrasts","text":"Parameter Default Description (the cluster annotation method associated with the parameter is shown) par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_level_cluster integrated_snn_res.0.7 The cluster resolution that you used in the cluster annotation module. If you skipped integration in Step 5, use par_level_cluster='RNA_snn_res.0.7', if you want to proceed with a clustering resolution of 0.7 par_step8_clus_label NULL List of user-currated cluster labels obtained from the annotation module. Make sure to have the same number of labels as clusters at the desired clustering resolution. par_new_genotype yes Whether or not you want to add new sample labels to simplify the contrasts. For example, you may wish to set both control1 and control2 as control. par_old_sample_label NULL list of old sample labels (i.e. those used to create the samples_info folder in the setup procedures) par_new_sample_label NULL list of new sample labels corresponding to the old sample labels defined in the parameter above","title":"Step 8: Differential gene expression contrasts"},{"location":"reference/#cell-hashtag-scrnaseq-analysis-track","text":"","title":"Cell Hashtag scRNAseq Analysis Track"},{"location":"reference/#step-1-fastq-pre-processing_1","text":"Parameter Default Description REF_DIR_GRCH NULL Path to reference genome for FASTQ alignment. 10X Genomics reference genomes are available for download. For more information see their documentation . R1LENGTH NULL Minimum number of bases to retain for R1 sequence of gene expression MEMPERCORE 30 For clusters whose job managers do not support memory requests, it is possible to request memory in the form of cores. This option will scale up the number of threads requested via the MRO_THREADS variable according to how much memory a stage requires when given to the ratio of memory on your nodes.","title":"Step 1: FASTQ pre-processing"},{"location":"reference/#step-2-ambient-rna-removal-and-create-seurat-object_1","text":"Parameter Default Description Save_RNA No Whether or not to export an RNA expression matrix Save_metadata No Whether or not to export a metadata dataframe count_matrices NULL If users skipped Step 1, the may provide the path to a directory that contains existing feature-barcode expression matrices to initiate the pipeline at Step 2 min.cells_L 0 Only retain genes expressed in a minimum number of cells min.features_L 0 Only retain cells expressing a minimum number of genes","title":"Step 2: Ambient RNA removal and create Seurat object"},{"location":"reference/#step-3-quality-control-and-filtering_1","text":"Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_seurat_object NULL If users skipped Steps 1 and 2, the may provide the path to a directory that contains existing Seurat objects to initiate the pipeline at Step 3 par_nFeature_RNA_L NULL Only retain cells expressing a minimum number of genes par_nFeature_RNA_U NULL Only retain cells expressing a maximum number of genes par_nCount_RNA_L NULL Only retain cells with a minimum number of unique transcripts par_nCount_RNA_U NULL Only retain cells with a maximum number of unique transcripts par_mitochondria_percent_L NULL Only retain cells with a minimum percentage of mitochondrial genes par_mitochondria_percent_U NULL Only retain cells with a maximum percentage of mitochondrial genes par_ribosomal_percent_L NULL Only retain cells with a minimum percentage of ribosomal genes par_ribosomal_percent_U NULL Only retain cells with a maximum percentage of ribosomal genes par_log10GenesPerUMI_L NULL Only retain cells with a minimum number of genes per unique molecular identifier par_log10GenesPerUMI_U NULL Only retain cells with a maximum number of genes per unique molecular identifier par_remove_mitochondrial_genes Yes Whether or not to remove mitochondrial genes par_remove_ribosomal_genes Yes Whether or not to remove ribosomal genes par_remove_genes NULL If users want to remove specific genes from their data, they may define a list of gene identifiers par_normalization.method LogNormalize Method to use for normalization par_scale.factor 10000 Scale factor for scaling the data par_selection.method vst Method for choosing the top variable features par_nfeatures 2500 Number of features to select as top variable features par_top 10 Number of most variable features to be reported in the csv file par_npcs_pca 30 Total Number of principal components to compute and store for principal component analysis (PCA) par_cells 500 Number of cells to include in Seurat's dimheatmap function par_dims 12 Number of dimensions to include in Seurat's dimheatmap function par_dims_umap 10 Number of dimensions to use as input features for uniform manifold approximation and projection (UMAP) par_n.neighbors 65 Number of neighboring points to use in local approximations of manifold structure","title":"Step 3: Quality control and filtering"},{"location":"reference/#step-4-doublet-removal_1","text":"Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_normalization.method CLR Method for normalizing the HTO assay par_scale.factor 1000 Scale factor for scaling the HTO assay par_selection.method vst Method for selecting the most variable features in the HTO assay par_nfeatures 5 Number of features to select as top variable features for the HTO assay. This value is dependent on the number of sample specific barcodes used in the experiment par_dims_umap 5 Number of dimensions to use as input features for uniform manifold approximation and projection (UMAP) of HTO assay par_n.neighbor 65 Number of neighboring points to use in local approximations of manifold structure par_dimensionality_reduction Yes Whether or not to perform linear dimensionality reduction on the HTO assay par_npcs_pca 30 Total Number of principal components to compute and store for principal component analysis (PCA) of HTO assay par_dropDN Yes Whether or not to remove predicted doublets and negatives from downstream analyses par_label_dropDN Doublet, Negative Labels used to identify doublet and negative droplets par_quantile 0.9 The quantile to use for droplet classification using MULTIseqDemux par_autoThresh TRUE Whether or not to perform automated threshold finding to define the best quantile for droplet classification using MULTIseqDemux par_maxiter 5 Maximum number of iterations to use if autoThresh = TRUE par_RidgePlot_ncol 3 Number of columns used to display RidgePlots, which visualizes the enrichment of barcode labels across samples par_old_antibody_label NULL If you wish to rename the barcode labels, first list the existing barcode labels in this parameter. old antibody labels can be identified in the \"_old_antibody_label_MULTIseqDemuxHTOcounts\" file produced by running Step 4 msd par_new_antibody_label NULL If you wish to rename the barcode labels, list the new labels corresponding to the old labels listed in the parameter above","title":"Step 4: Doublet removal"},{"location":"reference/#step-5-integration-and-linear-dimensional-reduction_1","text":"Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_skip_integration No Whether or not to skip integration. This is applicable for experiments that comprises of only one sequencing run. par_FindIntegrationAnchors_dim 25 Which dimensions to use from the canonical correlation analysis (CCA) to specify the neighbor search space par_DefaultAssay RNA The assay to perform normalization, scaling, and linear dimensiona reduction on. For most use cases this will be RNA. par_normalization.method LogNormalize Method to use for normalization par_scale.factor 1000 Scale factor for scaling the data par_selection.method vst Method for detecting top variable features par_nfeatures 2500 Number of features to select as top variable features par_RunUMAP_n.neighbors 65 Number of neighboring points used in local approximations of manifold structure par_RunPCA_npcs 30 Total Number of principal components to compute and store for principal component analysis (PCA) par_RunUMAP_dims 10 Number of dimensions to use as input features for uniform manifold approximation and projection (UMAP) par_compute_jackstraw No Whether or not to perform JackStraw computation. This computation takes a long time.","title":"Step 5: Integration and linear dimensional reduction"},{"location":"reference/#step-6-clustering_1","text":"Parameter Default Description par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_skip_step5 No Whether or not the user skipped integration in Step 5 par_FindNeighbors_dims 30 Number of dimensions from linear dimensional reduction used as input to identify neighbours. Can be informed by the elbow and Jackstraw plots produced in Step 5 par_FindNeighbors_k.param 60 Defines k for the k-nearest neighbor algorithm par_FindNeighbors_prune.SNN 1/15 Sets the cutoff for acceptable Jaccard index when computing the neighborhood overlap for the shared nearest-neighbour (SNN) construction par_FindClusters_resolution 0.1 to 0.9, in intervals of 0.1 Value of the clustering resolution parameter. You may provide multiple resolution values par_compute_ARI Yes Whether or not you want to compute the Adjusted Rand Index (ARI) between clusters at a given clustering resolution par_RI_reps 100 Number of iterations for clustering the data at a given resolution in order to calculate the ARI","title":"Step 6: Clustering"},{"location":"reference/#step-7-cluster-annotation_1","text":"Parameter Default Description (the cluster annotation method associated with the parameter is shown) par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_level_cluster integrated_snn_res.0.7 The cluster resolution that you want to use for downstream analyses. If you skipped integration in Step 5, use par_level_cluster='RNA_snn_res.0.7', if you want to proceed with a clustering resolution of 0.7 par_level_genotype MULTI_ID_Lables Name of the metadata column in your Seurat object that describes the sample names par_top_sel 5 Method 1: Number of top markers to identify based on avg_log2FC par_db Descartes_Cell_Types_and_Tissue_2021, CellMarker_Augmented_2021, Azimuth_Cell_Types_2021 Method 1: Character vector of EnrichR databases that define cell types. The top marker genes for each cluster will be tested for enrichment across these databases. par_compute_module_score Yes Method 2: Whether or not to perform the module score computation par_compute_module_score Yes Method 2: Whether or not to perform the module score computation par_module_score NULL Method 2: Path defining the location of the directory that contains the csv file of the gene sets used to compute the module score par_reference NULL Method 3: Path defining the location of the reference Seurat object par_level_celltype NULL Method 3: The name of the metadata column in the reference Seurat object that defines cell types par_FindTransferAnchors_dim 10 Method 3: Number of dimensions from linear dimensional reduction used to find transfer anchors between the reference and query Seurat objects par_futureglobalsmaxSize 50000 * 1024^2 Method 3: This will increase your RAM usage so set this number mindfully par_visualize_select_features No Visualize select features: Whether or not to visualize select features par_select_features NULL Visualize select features: list of gene identifiers to visualize the expression of select features","title":"Step 7: Cluster annotation"},{"location":"reference/#step-8-differential-gene-expression-contrasts_1","text":"Parameter Default Description (the cluster annotation method associated with the parameter is shown) par_save_RNA No Whether or not to export an RNA expression matrix par_save_metadata No Whether or not to export a metadata dataframe par_level_cluster integrated_snn_res.0.7 The cluster resolution that you used in the cluster annotation module. If you skipped integration in Step 5, use par_level_cluster='RNA_snn_res.0.7', if you want to proceed with a clustering resolution of 0.7 par_step8_clus_label NULL List of user-currated cluster labels obtained from the annotation module. Make sure to have the same number of labels as clusters at the desired clustering resolution. par_new_genotype yes Whether or not you want to add new sample labels to simplify the contrasts. For example, you may wish to set both control1 and control2 as control. par_old_antibody_label NULL list of old sample labels (i.e. those used to create the samples_info folder in the setup procedures) par_new_antibody_label NULL list of new sample labels corresponding to the old sample labels defined in the parameter above","title":"Step 8: Differential gene expression contrasts"},{"location":"tutorial/","text":"Tutorial This section contains tutorials for different data. standard HTO Data1 Data2","title":"Tutorial"},{"location":"tutorial/#tutorial","text":"This section contains tutorials for different data.","title":"Tutorial"},{"location":"tutorial/#standard","text":"","title":"standard"},{"location":"tutorial/#hto","text":"","title":"HTO"},{"location":"tutorial/#data1","text":"","title":"Data1"},{"location":"tutorial/#data2","text":"","title":"Data2"}]}